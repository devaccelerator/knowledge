{
    "__type__": "Deck",
    "children": [
        {
            "__type__": "Deck",
            "children": [
                {
                    "__type__": "Deck",
                    "children": [
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "02c9d27a-1f48-11ec-b9c6-acde48001122",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "paste-787a28f70b382f714ceafe86ba9ce187f23569ee.jpg",
                                "paste-dcd6745340a1b5afab1bea930226e9ca17194d4b.jpg"
                            ],
                            "name": "constant",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<div>Given a graph that that looks like this:&nbsp;</div><img src=\"paste-dcd6745340a1b5afab1bea930226e9ca17194d4b.jpg\"><br><div>And represents the time complexity of an algorithm in which it's x-axis(horizontal) represents input size, and the y-axis(vertical) represents time to complete the algorithm, how would representing constant time complexity O(1) look like on this graph?</div>",
                                        "<img src=\"paste-787a28f70b382f714ceafe86ba9ce187f23569ee.jpg\">",
                                        "So no matter how big the input size becomes, the time it takes to complete the algorithm is constant meaning it doesn't increase at all.",
                                        "",
                                        "EEEA60BA-0EA7-4843-B0BE-62FA61AD7B94"
                                    ],
                                    "guid": "d<aq`P98>a",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<div># What is the time complexity of the following function?:<br><br>def print_items(n):<br>&nbsp; &nbsp; for i in range(n):<br>&nbsp; &nbsp; &nbsp; &nbsp; print(i)</div>",
                                        "O(n)",
                                        "Because the amount of operations the algorithm has to perform grows at the same rate as the input size increases.",
                                        "",
                                        "26B64310-58EA-4F81-B8B3-176CB96FFDA9"
                                    ],
                                    "guid": "FsR!-;Viu^",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "# What is the big O of the following code?:<br><br>def print_items(n):<br>&nbsp; &nbsp; print(n)",
                                        "O(1)",
                                        "No matter how big the input size gets, we're performing a constant amount of operations in the algorithm. In this case, those constant operations happen to just be a single print statement",
                                        "",
                                        "3258E268-C6FF-49C1-8381-CFDF39ECF30C"
                                    ],
                                    "guid": "ob0byHM-zE",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "02c9fc50-1f48-11ec-b9c6-acde48001122",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "paste-535dd2351df1db9bd96ddbd78c555196dd02b444.jpg",
                                "paste-7eb54cec0fc81b08cd61ad855d4928e7b70caf3b.jpg"
                            ],
                            "name": "exponential",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<div>Given a graph that that looks like this:&nbsp;</div>\n<div><img src=\"paste-7eb54cec0fc81b08cd61ad855d4928e7b70caf3b.jpg\"><br></div>\n<div>And represents the time complexity of an algorithm in which it's x-axis(horizontal) represents input size, and the y-axis(vertical) represents time to complete the algorithm, how would representing quadratic time complexity O(n^2) look like on this graph?</div>",
                                        "<img src=\"paste-535dd2351df1db9bd96ddbd78c555196dd02b444.jpg\">",
                                        "So as the input size grows, the time it takes to complete the algorithm continues to grow much faster than the incremental increase of the input size.",
                                        "",
                                        "22033E86-B9B8-465F-BF3C-9FACFE97AA4D"
                                    ],
                                    "guid": "wOaR]]E>#N",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "# what is the time complexity of the following code?:<br><br>def print_items(n):<br>&nbsp; &nbsp; for i in range(n):<br>&nbsp; &nbsp; &nbsp; &nbsp; for j in range(n):<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for k in range(n):<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(i, j, k)",
                                        "O(n^3)",
                                        "Because if <b>n</b>&nbsp;is 10, the numbers 000 - 999 are printed. 10^3 == 1000<br><br>Whenever we have 3 nested for loops where each loop iterates through the full size of the input, it's O(n^3), like-wise if we have 5 nested for loops doing the same thing, it would be O(n^5)",
                                        "",
                                        "CEFE1F2E-1F1E-479E-BE67-4BD96E9E5B43"
                                    ],
                                    "guid": "n)Sg[uw_t/",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "02ca2072-1f48-11ec-b9c6-acde48001122",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "paste-1c6f7ad702ccfa925462962f20b4ac9549a268b6.jpg",
                                "paste-79862c6590cefdaa0fc351d9d4f6cffc63175972.jpg"
                            ],
                            "name": "linear",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<div>Given a graph that that looks like this:<br><div><div><img src=\"paste-79862c6590cefdaa0fc351d9d4f6cffc63175972.jpg\"><br><div>And represents the time complexity of an algorithm in which it's x-axis(horizontal) represents input size, and the y-axis(vertical) represents time to complete the algorithm, how would representing linear time complexity O(n) look like on this graph?</div></div></div></div>",
                                        "<img src=\"paste-1c6f7ad702ccfa925462962f20b4ac9549a268b6.jpg\">",
                                        "So as the input size grows, the time complexity of the algorithm continues to grow at a constant rate.",
                                        "",
                                        "8213C92C-C82A-4849-91A3-78AB2B6B05B7"
                                    ],
                                    "guid": "p6N59-{qu`",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "02ca3ff8-1f48-11ec-b9c6-acde48001122",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "paste-6740dcb59ba1513b2f37f868ee93f012b48ee4b1.jpg",
                                "paste-b6dcb370fcdb704f08b5cf8a84938d0ddf52fd1c.jpg"
                            ],
                            "name": "logarithmic",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<div>Given a graph that that looks like this:&nbsp;<br><img src=\"paste-6740dcb59ba1513b2f37f868ee93f012b48ee4b1.jpg\"><br><div>And represents the time complexity of an algorithm in which it's x-axis(horizontal) represents input size, and the y-axis(vertical) represents time to complete the algorithm, how would representing logarithmic time complexity O(log(n)) look like on this graph?</div></div>",
                                        "<img src=\"paste-b6dcb370fcdb704f08b5cf8a84938d0ddf52fd1c.jpg\">",
                                        "So as the input size grows, the time it takes to complete the algorithm continues to grow much slower than the incremental increase of the input size.<br><br>Usually a logarithmic algorithm uses the divide and conquer strategy where only one extra constant operation is added to the algorithm for each time the input size doubles.",
                                        "",
                                        "1EBBD2F2-0467-476B-84E1-62F1E1A54C93"
                                    ],
                                    "guid": "fiS]B`ea4P",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<div># What is the big O of the following code?:<br><br></div>\n<div>def print_halves(n):</div>\n<div>&nbsp; &nbsp; while n &gt; 1:</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; print(n)</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; n = n / 2</div>",
                                        "<div>O(log(n))</div>",
                                        "<div>The time complexity of the above function is logarithmic because the amount of operations that are executed in the function above only increase by roughly 1 for each time the size of <b>n</b> doubles.</div>",
                                        "",
                                        "1602DBD9-BA8A-4F95-9A70-38994747A64D"
                                    ],
                                    "guid": "pl|B}YVHO$",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "02ca6334-1f48-11ec-b9c6-acde48001122",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "rules",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<div># What is the time complexity of the following function?:<br><br>def print_items(a, b):<br>&nbsp; &nbsp; for i in range(a):<br>&nbsp; &nbsp; &nbsp; &nbsp; print(i)<br><br>&nbsp; &nbsp; for j in range(b):<br>&nbsp; &nbsp; &nbsp; &nbsp; print(j)<br></div>",
                                        "O(a + b)",
                                        "<div>it's not O(n) because a and b aren't the same, so we can't combine them</div>",
                                        "",
                                        "039AD674-7CD8-452B-B0B2-E751D4289B50"
                                    ],
                                    "guid": "f{}R#S^[x3",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<div># What is the time complexity of the following function?:<br><br>def print_items(a, b):<br>&nbsp; &nbsp; for i in range(a):<br>&nbsp; &nbsp; &nbsp; &nbsp; for j in range(b):<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(i, j)<br></div>",
                                        "<div>O(a * b)</div>",
                                        "<div>It's not O(n^2) because <b>a</b> and <b>b</b> aren't the same, so we can't combine them into <b>n</b></div>",
                                        "",
                                        "CE2D82C4-A6E4-4429-86C6-DA2C9048629D"
                                    ],
                                    "guid": "rQ1cWvb3]D",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<div>simplify the following big O notation: O(100n^2)</div>",
                                        "<div>O(n^2)</div>",
                                        "We drop the constants, so we remove 100.",
                                        "",
                                        "0213AF44-B159-4D73-8942-E2BC7EA4A508"
                                    ],
                                    "guid": "NH#IAtkRA|",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<div>What is the correct way to write:&nbsp; O(n^2 + n)</div>",
                                        "O(n^2)",
                                        "<div>we drop non-dominants.</div>",
                                        "",
                                        "40B6F822-5A23-4F53-B9A4-4DA23BDBC31B"
                                    ],
                                    "guid": "n^N`,sYbro",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "02ca8c2e-1f48-11ec-b9c6-acde48001122",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "simplify",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "# What is the time complexity of the following function?:<br><br>def print_items(n):<br>&nbsp; &nbsp; for i in range(n):<br>&nbsp; &nbsp; &nbsp; &nbsp; print(i)<br><br>&nbsp; &nbsp; for j in range(n):<br>&nbsp; &nbsp; &nbsp; &nbsp; print(j)",
                                        "O(n)",
                                        "<div>You could say it's O(2n), but we drop the constants when describing big O, so it's O(n)</div>",
                                        "",
                                        "F108AF37-DC97-498A-BE0D-6783FA45D995"
                                    ],
                                    "guid": "r(j:@kw|qO",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "# what is the time complexity of the following code?:<br><br>def print_items(n):<br>&nbsp; &nbsp; for i in range(n):<br>&nbsp; &nbsp; &nbsp; &nbsp; for j in range(n):<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(i,j)",
                                        "O(n^2)",
                                        "O(n*n) is the same as O(n^2)<br><br>For each additional increase in the input size, the inner for loop has to iterate through the entire size of <b>n</b> again.",
                                        "",
                                        "F772973E-344F-4B8A-B4C2-5271A19D363F"
                                    ],
                                    "guid": "N/UlCQ^;v0",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "# what is the time complexity of the following code?:<br><br>def print_items(n):<br>&nbsp; &nbsp; for i in range(n):<br>&nbsp; &nbsp; &nbsp; &nbsp; for j in range(n):<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print(i,j)<br><br>&nbsp; &nbsp; for k in range(n):<br>&nbsp; &nbsp; &nbsp; &nbsp; print(k)",
                                        "<div>O(n^2)</div>",
                                        "<div>you could say it's O(n^2 + n), but we usually only care about the biggest variable, so we get rid of the n and so it's just O(n^2)</div>",
                                        "",
                                        "51C28FDE-0C16-4C77-938C-A472DE659077"
                                    ],
                                    "guid": "v:0RrSa/!6",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "02cab334-1f48-11ec-b9c6-acde48001122",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "mid": 1629300492637,
                            "name": "terminology",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<div>What is big O notation?</div>",
                                        "<div>The worst case time complexity of an algorithm</div>",
                                        "A way to describe the speed of an algorithm's worst case scenario",
                                        "",
                                        "8B931CA9-CA7D-48AF-A221-E4DD41D4435A"
                                    ],
                                    "guid": "H{&@h~YWW[",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<div>What is time complexity?</div>",
                                        "<div>How fast an algorithm runs&nbsp;</div>",
                                        "",
                                        "",
                                        "AD429E04-CACF-4C79-98BB-872CC87FEA37"
                                    ],
                                    "guid": "PfW,Ns=}U@",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        }
                    ],
                    "crowdanki_uuid": "02c9b4e8-1f48-11ec-b9c6-acde48001122",
                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [],
                    "name": "Big O Notation",
                    "notes": []
                }
            ],
            "crowdanki_uuid": "02c997f6-1f48-11ec-b9c6-acde48001122",
            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [],
            "name": "Algorithms & Data Structures",
            "notes": []
        },
        {
            "__type__": "Deck",
            "children": [
                {
                    "__type__": "Deck",
                    "children": [
                        {
                            "__type__": "Deck",
                            "children": [
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "3ef489ca-0139-11ec-9560-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "Control Flow",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "Create a function named <b>large_power()</b> that takes two parameters named <b>base</b> and <b>exponent</b>. If <b>base</b> raised to the <b>exponent</b>&nbsp;power is greater than <b>5000</b>, return <b>True</b>, otherwise return <b>False</b>",
                                                "<b>Example 1:<br>input:</b> base = 5000, exponent = 1<br><b>output</b>: False<br><br><b>Example 2:<br>input: </b>base = 100, exponent = 2<br><b>output: </b>True",
                                                "def large_power(base, exponent):",
                                                "<div><div>print(large_power(2, 13))</div><div># should print True</div><div>print(large_power(2, 12))</div><div># should print False</div></div>",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-control-flow/#heading-function-syntax\">https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-control-flow/#heading-function-syntax</a>",
                                                "Go to <b>1. Large Power</b>",
                                                "def large_power(base, exponent):<br>&nbsp; &nbsp; if base ** exponent &gt; 5000:<br>&nbsp; &nbsp; &nbsp; &nbsp; return True<br>&nbsp; &nbsp; else:<br>&nbsp; &nbsp; &nbsp; &nbsp; return False",
                                                "# In this solution, we have an example of how the operation can be performed in the condition of the <b>if</b> statement. This prevents us from needing to create an extra variable. If the condition is true, then the indented code is executed which returns <b>True</b>, otherwise the indented code in the <b>else</b> statement is executed.",
                                                "",
                                                "A11BE85D-1873-474C-B554-5F24AA79E091"
                                            ],
                                            "guid": "rh;RsJI+(R",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "Create a function called <b>over_budget</b> that has five parameters named <b>budget</b>, <b>food_bill</b>, <b>electricity_bill</b>, <b>internet_bill</b>, and <b>rent</b>.&nbsp;The function should return <b>True</b> if <b>budget</b> is less than the sum of the other four parameters — you’ve gone over budget! Return <b>False</b> otherwise.",
                                                "<b>Example 1:<br>input: </b>budget = 10, food_bill = 2, electricity_bill = 2, internet_bill = 2, rent = 4<br><b>output: </b>False<br><b><br></b><b>Example 2:<br>input:&nbsp;</b>budget = 10, food_bill = 5, electricity_bill = 5, internet_bill = 10, rent = 10<br><b>output: </b>True",
                                                "def over_budget(budget, food_bill, electricity_bill, internet_bill, rent):&nbsp;",
                                                "<div><div>print(over_budget(100, 20, 30, 10, 40))</div><div># should print False</div><div>print(over_budget(80, 20, 30, 10, 30))</div><div># should print True</div></div>",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-control-flow/#heading-function-syntax\">https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-control-flow/#heading-function-syntax</a>",
                                                "Go to <b>2. Over Budget</b>",
                                                "def over_budget(budget, food_bill, electricity_bill, internet_bill, rent): <br><b>&nbsp; &nbsp; if (budget &lt; food_bill + electricity_bill + internet_bill + rent): <br>&nbsp; &nbsp; &nbsp; &nbsp; return True <br>&nbsp; &nbsp; else: <br>&nbsp; &nbsp; &nbsp; &nbsp; return False</b>",
                                                "We can perform the operations within the condition of the <b>if</b> statement to prevent us from creating an extra variable. We calculate the sum and compare it to <b>budget</b> at the same time and return <b>True</b> if the condition is met, otherwise we return <b>False</b>.",
                                                "",
                                                "1cd58f94-6cc9-4bc5-9a13-7eeb47ef48b3"
                                            ],
                                            "guid": "qHJ6T9`7Tq",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "Create a function named <b>twice_as_large()</b> that has two parameters named <b>num1</b> and <b>num2</b>. Return <b>True</b> if <b>num1</b> is more than double <b>num2</b>. Return <b>False</b> otherwise.",
                                                "<b>Example 1:<br>input: </b>num1 = 20, num2 = 10<br><b>output: </b>False<br><br><b>Example 2:<br>input:&nbsp;</b>num1 = 21, num2 = 10<b><br>output: </b>True",
                                                "def twice_as_large(num1, num2):",
                                                "<div><div>print(twice_as_large(10, 5))</div><div># should print False</div><div>print(twice_as_large(11, 5))</div><div># should print True</div></div>",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-control-flow/#heading-function-syntax\">https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-control-flow/#heading-function-syntax</a>",
                                                "Go to <b>3. Twice As Large</b>",
                                                "def twice_as_large(num1, num2):<br><b>&nbsp;&nbsp;&nbsp; if num1 &gt; 2 * num2:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return True<br>&nbsp;&nbsp;&nbsp; else:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return False</b>",
                                                "In this function, we performed the operation within the condition of the if statement. The second input is multiplied by 2 and then compared to the first input on the same line.<br><br>The condition&nbsp;<b>num1 / 2 &gt; num2&nbsp;</b>also works",
                                                "",
                                                "e5700982-8d69-4fe7-932f-876995f7332b"
                                            ],
                                            "guid": "DIu<`cE8(F",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "Create a function called <b>divisible_by_ten()</b> that has one parameter named <b>num</b>. The function should return <b>True</b> if <b>num</b> is divisible by <b>10</b>, and <b>False</b> otherwise.",
                                                "<b>Example 1:<br>input: </b>num = 51<br><b>output: </b>False<br><br><b>Example 2:</b><br><b>input: </b>num = 50<br><b>output: </b>True",
                                                "def divisible_by_ten(num):",
                                                "<div><div>print(divisible_by_ten(20))</div><div># should print True</div><div>print(divisible_by_ten(25))</div><div># should print False</div></div>",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-control-flow/#heading-function-syntax\">https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-control-flow/#heading-function-syntax</a>",
                                                "Go to <b>4. Divisible By Ten</b>",
                                                "# Make sure to use the modulus operator when solving this problem.<br><br>def divisible_by_ten(num):<br><b>&nbsp;&nbsp;&nbsp; if num % 10 == 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return True<br>&nbsp;&nbsp;&nbsp; else:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return False</b>",
                                                "#&nbsp;In this solution, we perform the modulus operation within the condition of the if statement. We test if the result is equal to 0 and if it is, then we return <b>True</b> otherwise we return <b>False</b>.",
                                                "",
                                                "3be29ad2-967d-41f6-8dab-3677543f44e2"
                                            ],
                                            "guid": "i+gRzn@%YZ",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "Create a function named <b>not_sum_to_ten()</b> that has two parameters named <b>num1</b> and <b>num2</b>. Return <b>True</b> if <b>num1</b> and <b>num2</b> do not sum to <b>10</b>. Return <b>False</b> otherwise.",
                                                "<b>Example 1:<br>input: </b>num1 = 10, num2 = 0<br><b>output: </b>False<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>&nbsp;num1 = 10, num2 = -5<br><b>output: </b>True",
                                                "def not_sum_to_ten(num1, num2):",
                                                "<div><div>print(not_sum_to_ten(9, -1))</div><div># should print True</div><div>print(not_sum_to_ten(9, 1))</div><div># should print False</div><div>print(not_sum_to_ten(5,5))</div><div># should print False</div></div>",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-control-flow/#heading-function-syntax\">https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-control-flow/#heading-function-syntax</a>",
                                                "Go to <b>5. Not Sum To Ten Ten</b>",
                                                "def not_sum_to_ten(num1, num2):<br><b>&nbsp;&nbsp;&nbsp; if num1 + num2 != 10:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return True<br>&nbsp;&nbsp;&nbsp; else:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return False</b>",
                                                "#&nbsp;In this solution, we perform the modulus operation within the condition of the if statement. We test if the result is equal to 0 and if it is, then we return&nbsp;<b>True</b>&nbsp;otherwise we return&nbsp;<b>False</b>.",
                                                "",
                                                "87c9c773-7dc1-4817-b15d-4bec84def56f"
                                            ],
                                            "guid": "H_cQMwggh?",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "Create a function named <b>in_range()</b> that has three parameters named <b>num</b>, <b>lower</b>, and <b>upper</b>. The function should return <b>True</b> if <b>num</b> is greater than or equal to <b>lower</b> and less than or equal to <b>upper</b>. Otherwise, return <b>False</b>.",
                                                "<b>Example 1:<br>input: </b>num = 10, lower = 10, upper = 10<br><b>output: </b>True<br><br><b>Example 2:</b><br><b>input: </b>num = 5, lower = 10, upper = 20<br><b>output:&nbsp;</b>&nbsp;False<br><br><b>Example 3:</b><br><b>input: </b>num = 5, lower = 0, upper = 10<br><b>output:&nbsp;</b>&nbsp;True",
                                                "def in_range(num, lower, upper):",
                                                "<div><div>print(in_range(10, 10, 10))</div><div># should print True</div><div>print(in_range(5, 10, 20))</div><div># should print False</div></div>",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-control-flow\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-control-flow</a>",
                                                "Go to <b>1. In Range</b>",
                                                "def in_range(num, lower, upper):<br><b>&nbsp;&nbsp;&nbsp; if num &gt;= lower and num &lt;= upper:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return True<br>&nbsp;&nbsp;&nbsp; return False</b>",
                                                "In this solution, we test the two bounds connected with an&nbsp;<b>and</b>&nbsp;boolean operator. This means that the code nested in the&nbsp;<b>if</b>&nbsp;statement will only execute if both of the conditions are true. We also do not include the&nbsp;<b>else</b>&nbsp;statement here. Since our&nbsp;if&nbsp;statement will return&nbsp;<b>True</b>&nbsp;and exit the function if the condition is true, the last line will only be reached if the condition was false.",
                                                "",
                                                "2bdd76b8-96c9-4f0b-9f0e-413e38e0b526"
                                            ],
                                            "guid": "fsqN;Nvy<J",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<div>Create a function named&nbsp;<b>same_name()</b>&nbsp;that has two parameters named&nbsp;<b>your_name</b>&nbsp;and&nbsp;<b>my_name</b>.</div><div>If our names are identical, return&nbsp;<b>True</b>. Otherwise, return&nbsp;<b>False</b>.</div>",
                                                "<b>Example 1:<br>input: </b>your_name = \"Colby\", my_name = \"Colby\"<br><b>output: </b>True<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>your_name =&nbsp;\"Tina\", my_name = \"Amber\"<br><b>output: </b>False",
                                                "def same_name(your_name, my_name):",
                                                "<div><div>print(same_name(\"Colby\", \"Colby\"))</div><div># should print True</div><div>print(same_name(\"Tina\", \"Amber\"))</div><div># should print False</div></div>",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-control-flow\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-control-flow</a>",
                                                "Go to <b>2. Same Name</b>",
                                                "def same_name(your_name, my_name):<br><b>&nbsp; &nbsp; if (your_name == my_name):<br>&nbsp; &nbsp; &nbsp; &nbsp; return True<br>&nbsp; &nbsp; else:<br>&nbsp; &nbsp; &nbsp; &nbsp; return False</b>",
                                                "As you can see in this solution code, comparing two strings in python can be done using the&nbsp;<b>==</b>&nbsp;operator. If you want an added challenge, you can try shortening the function body to one line of code!",
                                                "",
                                                "c68ef10f-4334-47ed-81aa-a1f38ab9b962"
                                            ],
                                            "guid": "g=iT$hCXT+",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<div>Create a function named&nbsp;<b>movie_review()</b>&nbsp;that has one parameter named&nbsp;<b>rating</b>.</div><div>If&nbsp;<b>rating</b>&nbsp;is less than or equal to&nbsp;<b>5</b>, return&nbsp;<b>\"Avoid at all costs!\"</b>. <br>If&nbsp;<b>rating</b>&nbsp;is between&nbsp;<b>5</b>&nbsp;and&nbsp;<b>9</b>, return&nbsp;<b>\"This one was fun.\"</b>. <br>If&nbsp;<b>rating</b>&nbsp;is&nbsp;<b>9</b>&nbsp;or above, return&nbsp;<b>\"Outstanding!\"</b></div>",
                                                "<b>Example 1:<br>input: </b>rating = 9<br><b>output:&nbsp;</b>\"Outstanding!\"<b><br></b><br><b>Example 2:</b><br><b>input:&nbsp;</b>rating =&nbsp;4<br><b>output:&nbsp;</b>\"Avoid at all costs!\"<b><br></b><br><b>Example 3:</b><br><b>input:&nbsp;</b>rating =&nbsp;6<br><b>output:&nbsp;</b>\"This one was fun.\"",
                                                "def movie_review(rating):",
                                                "<div><div>print(movie_review(9))</div><div># should print \"Outstanding!\"</div><div>print(movie_review(4))</div><div># should print \"Avoid at all costs!\"</div><div>print(movie_review(6))</div><div># should print \"This one was fun.\"</div></div>",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-control-flow\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-control-flow</a>",
                                                "Go to <b>4. Movie Review</b>",
                                                "def movie_review(rating):<br>&nbsp;&nbsp;&nbsp; if rating &lt;= 5:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return \"Avoid at all costs!\"<br>&nbsp;&nbsp;&nbsp; if rating &lt; 9:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return \"This one was fun.\"<br>&nbsp;&nbsp;&nbsp; return \"Outstanding!\"",
                                                "To solve this, we used a series of&nbsp;<b>if</b>&nbsp;statements to select which string to return. Another way of solving this would be to use&nbsp;<b>if</b>,&nbsp;<b>elif</b>&nbsp;and&nbsp;<b>else</b>&nbsp;statements.",
                                                "",
                                                "18a7ddca-d0df-4699-9ca7-5322e54b8f7f"
                                            ],
                                            "guid": "L#vq%[eULg",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<div>Create a function called&nbsp;<b>max_num()</b>&nbsp;that has three parameters named&nbsp;<b>num1</b>,&nbsp;<b>num2</b>, and&nbsp;<b>num3</b>.</div><div>The function should return the largest of these three numbers. If any of two numbers tie as the largest, you should return&nbsp;<b>\"It's a tie!\"</b>.</div>",
                                                "<b>Example 1:<br>input: </b>num1 = -10, num2 = 0, num3 = 10<br><b>output: </b>10<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>num1 = -10, num2 = 5, num3 = -30<br><b>output: </b>5<br><br><b>Example 3:</b><br><b>input:&nbsp;</b>num1 = -5, num2 = -10, num3 = -10<br><b>output: </b>-5<br><br><b>Example 4:<br>input:&nbsp;</b>num1 = 2, num2 = 3, num3 = 3<b><br>output: </b>\"It's a tie!\"<b><br></b>",
                                                "def max_num(num1, num2, num3):",
                                                "<div><div>print(max_num(-10, 0, 10))</div><div># should print 10</div><div>print(max_num(-10, 5, -30))</div><div># should print 5</div><div>print(max_num(-5, -10, -10))</div><div># should print -5</div><div>print(max_num(2, 3, 3))</div><div># should print \"It's a tie!\"</div></div>",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-control-flow\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-control-flow</a>",
                                                "Go to <b>5. Max Number</b>",
                                                "def max_num(num1, num2, num3):<br>&nbsp;&nbsp;&nbsp; if num1 &gt; num2 and num1 &gt; num3:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return num1<br>&nbsp;&nbsp;&nbsp; elif num2 &gt; num1 and num2 &gt; num3:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return num2<br>&nbsp;&nbsp;&nbsp; elif num3 &gt; num1 and num3 &gt; num2:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return num3<br>&nbsp;&nbsp;&nbsp; else:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return \"It's a tie!\"",
                                                "In this code, we use a series of&nbsp;<b>if</b>,&nbsp;<b>elif</b>, and&nbsp;<b>else</b>&nbsp;statements. We test the first parameter against the other two parameters and return the value if it is greater than the other two. We have two more tests to check if the second parameter is greater than the other two, then if the third parameter is greater than the other two. In the case where none of the parameters were greater than both of the other parameters, then we know that there must have been a tie and the final return statement is reached.",
                                                "",
                                                "db26d26e-a48d-4e16-b612-0abc0f1c83b9"
                                            ],
                                            "guid": "t<[oZd:,9|",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "00b00cb6-0440-11ec-a2b6-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "paste-503bc30c9df797c806ce94860ba11f545f51a32e.jpg",
                                        "paste-5aace55ea8ea45229a4442d6d9a912cc107cfb5e.jpg",
                                        "paste-5b70491a5e3040310a96544f5494dc9aae7c81fd.jpg",
                                        "paste-6bb5f2c36249b685ab2d52eb97dccc523494577c.jpg",
                                        "paste-6c501869dd1914fbf974da98d0fc9452db1b5ab4.jpg",
                                        "paste-bad1754d549f78ea49da0bdf52aa46002b24acd4.jpg"
                                    ],
                                    "name": "Functions",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"paste-5b70491a5e3040310a96544f5494dc9aae7c81fd.jpg\">",
                                                "<b>Example 1:<br>input: </b>first_name = \"James\", last_name = \"Bond\"<br><b>output: </b>\"Bond, James Bond\"<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>first_name = \"Maya\", last_name = \"Angelou\"<br><b>output: </b>\"Angelou, Maya Angelou\"<br><br><b>Example 3:</b><br><b>input:&nbsp;</b>first_name = \"Seth\", last_name = \"Samuelson\"<br><b>output: </b>\"Samuelson, Seth Samuleson\"",
                                                "",
                                                "",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-functions\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-functions</a>",
                                                "Go to <b>3. Bond, James Bond</b>",
                                                "def introduction(first_name, last_name):<br>&nbsp; &nbsp; return last_name +&nbsp;\", \" +&nbsp;first_name +&nbsp;\" \" +&nbsp;last_name",
                                                "<img src=\"paste-bad1754d549f78ea49da0bdf52aa46002b24acd4.jpg\">",
                                                "",
                                                "4B2F7F7F-BFAD-40CE-B2C7-ED1662A0DA51"
                                            ],
                                            "guid": "m<CgM1S3qp",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"paste-6bb5f2c36249b685ab2d52eb97dccc523494577c.jpg\">",
                                                "<b>Example 1:<br>input: </b>name&nbsp; = \"Lola\", age = 16<br><b>output:&nbsp;</b>\"Lola, you are 112 years old in dog years\"<b><br></b><br><b>Example 2:</b><br><b>input:&nbsp;</b>name&nbsp; = \"Baby\", age = 0<br><b>output:&nbsp;</b>\"Baby, you are 0 years old in dog years\"<b><br></b><br><b>Example 3:</b><br><b>input:&nbsp;</b>name&nbsp; = \"Bob\", age = 10<br><b>output:&nbsp;</b>\"Bob, you are 70 years old in dog years\"",
                                                "def dog_years(name, age):",
                                                "",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-functions\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-functions</a>",
                                                "Go to <b>4. Dog Years</b>",
                                                "def dog_years(name, age):<br>&nbsp; &nbsp; return name+\", you are \"+str(age *&nbsp;7)+\" years old in dog years\"",
                                                "<img src=\"paste-6c501869dd1914fbf974da98d0fc9452db1b5ab4.jpg\">",
                                                "",
                                                "0BD5C3B1-73B9-41FB-A88B-3FE29168D3D4"
                                            ],
                                            "guid": "e17jE8?LB3",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"paste-503bc30c9df797c806ce94860ba11f545f51a32e.jpg\">",
                                                "<b>Example 1:<br>input: </b>a = 1, b = 2, c = 3, d = 4<br><b>output: <br></b># it should print:<br>3<br>-1<br>-3<br># and it should return:<br>0<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>a = 1, b = 1, c = 1, d = 1<br><b>output: </b><br># it should print:<br>2<br>0<br>0<br># and it should return:<br>0",
                                                "def lots_of_math(a, b, c, d):<br>&nbsp; &nbsp;&nbsp;<br><br><div># Test your lots_of_math function:</div><div>print(lots_of_math(1, 2, 3, 4)) # should print 3, -1, -3, 0</div><div>print(lots_of_math(1, 1, 1, 1)) # should print 2, 0, 0, 0</div>",
                                                "",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-functions\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-functions</a>",
                                                "Go to <b>5. All Operations</b>",
                                                "def lots_of_math(a, b, c, d):<br>&nbsp;&nbsp;&nbsp; first =&nbsp;a +&nbsp;b<br>&nbsp;&nbsp;&nbsp;&nbsp;second =&nbsp;c -&nbsp;d<br>&nbsp;&nbsp;&nbsp;&nbsp;third =&nbsp;first *&nbsp;second<br>&nbsp;&nbsp;&nbsp; fourth =&nbsp;third %&nbsp;a<br>&nbsp;&nbsp;&nbsp; print(first)<br>&nbsp;&nbsp;&nbsp; print(second)<br>&nbsp;&nbsp;&nbsp; print(third)<br>&nbsp;&nbsp;&nbsp; return fourth",
                                                "<img src=\"paste-5aace55ea8ea45229a4442d6d9a912cc107cfb5e.jpg\">",
                                                "",
                                                "56000CF9-5A14-4239-A99F-C42824E097A1"
                                            ],
                                            "guid": "sIiEOZE]tH",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "b8f0c6ba-0163-11ec-97a4-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "mid": 1629415250870,
                                    "name": "Lists",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<div>Create a function called&nbsp;<b>append_size</b>&nbsp;that has one parameter named&nbsp;<b>lst</b>.<br><br></div><div>The function should append the size of&nbsp;<b>lst</b>&nbsp;(inclusive) to the end of&nbsp;<b>lst</b>. The function should then return this new list.<br><br></div><div>For example, if&nbsp;<b>lst</b>&nbsp;was&nbsp;<b>[23, 42, 108]</b>, the function should return&nbsp;<b>[23, 42, 108, 3]</b>&nbsp;because the size of&nbsp;<b>lst</b>&nbsp;was originally&nbsp;<b>3</b>.</div>",
                                                "<b>Example 1:</b><br><b>input: </b>lst =&nbsp;[10, 100, 23, 18]<br><b>output:&nbsp;</b>[10, 100, 23, 18, 4]<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>lst = []<br><b>output: </b>[0]<br><br><b>Example 3:</b><br><b>input:&nbsp;</b>lst = [9]<br><b>output: </b>[9, 1]",
                                                "def append_size(lst):",
                                                "print(append_size([10, 100, 23, 18]))&nbsp;<br># should print [10, 100, 23, 18, 4]<br>print(append_size([]))<br># should print [0]<br>print(append_size([9]))<br># should print [9, 1]",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-lists\">https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-lists</a>",
                                                "Go to <b>1. Append Size</b>",
                                                "def append_size(lst):<br>&nbsp;&nbsp;&nbsp; lst.append(len(lst))<br>&nbsp;&nbsp;&nbsp; return lst",
                                                "<div><div>We can get the length and append it at the same time by nesting the function calls as shown in the solution. Afterward, we return the modified list.</div></div>",
                                                "",
                                                "2fbbdefe-0a68-4ffe-90c7-852fa7915fe3"
                                            ],
                                            "guid": "dB}WvVmo]J",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<div>Write a function named&nbsp;<b>append_sum</b>&nbsp;that has one parameter — a list named named&nbsp;<b>lst</b>.<br><br></div><div>The function should add the last two elements of&nbsp;<b>lst</b>&nbsp;together and append the result to&nbsp;<b>lst</b>. It should do this process three times and then return&nbsp;<b>lst</b>.<br><br></div><div>For example, if&nbsp;<b>lst</b>&nbsp;started as&nbsp;<b>[1, 1, 2]</b>, the final result should be&nbsp;<b>[1, 1, 2, 3, 5, 8]</b>.</div>",
                                                "<b>Example 1:<br>input:&nbsp;</b>lst = [5, 2]<br><b>output: </b>[5, 2, 7, 9, 16]<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>lst = [100, 12, 37, 2, 1]<br><b>output:&nbsp;</b>[100, 12, 37, 2, 1, 3, 4, 7]<br><br><b>Example 3: </b><br><b>input:&nbsp;</b>lst = [1, 1]<br><b>output: </b>[1, 1, 2, 3, 5]",
                                                "def append_sum(lst):",
                                                "print(append_sum([5, 2]))<br># should print [5, 2, 7, 9, 16]<br>print(append_sum([100, 12, 37, 2, 1]))<br># should print [100, 12, 37, 2, 1, 3, 4, 7]<br>print(append_sum([1, 1]))<br># should print [1, 1, 2, 3, 5]",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-lists\">https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-lists</a>",
                                                "Go to <b>2. Append Sum</b>",
                                                "def append_sum(lst):<br>&nbsp;&nbsp;&nbsp; lst.append(lst[-1] + lst[-2])<br>&nbsp;&nbsp;&nbsp; lst.append(lst[-1] + lst[-2])<br>&nbsp;&nbsp;&nbsp; lst.append(lst[-1] + lst[-2])<br>&nbsp;&nbsp;&nbsp; return lst",
                                                "In our solution, we add the numbers and append the result in one line. We add the last and second to last elements within the&nbsp;<b>.append()</b>&nbsp;function and we repeat this line two more times. Remember that when we use negative indices, it starts from the end of the list and goes towards the beginning of the list. You could also use a loop to solve this instead of repeating the lines.",
                                                "",
                                                "3714ed1a-22a8-48ab-a8eb-2b22f3f5933e"
                                            ],
                                            "guid": "znq@{A--0c",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<div>Write a function named&nbsp;<b>larger_list</b>&nbsp;that has two parameters named&nbsp;<b>lst1</b>&nbsp;and&nbsp;<b>lst2</b>.<br><br></div><div>The function should return the last element of the list that contains more elements. If both lists are the same size, then return the last element of&nbsp;<b>lst1</b>.</div>",
                                                "<b>Example 1:<br>input: </b>lst1 = [4, 10, 2, 5], lst2 = [-10, 2, 5, 10]<br><b>output:&nbsp;</b>5<br><br><b>Example 2:</b><br><b>input: </b>lst1 = [1, 2, 3, 4], lst2 = [1, 2]<br><b>output:&nbsp;</b>4<br><br><b>Example 3:</b><br><b>input: </b>lst1 = [2, 6, 3], lst2 = [4, 6, 8, 1]<br><b>output: </b>1",
                                                "def larger_list(lst1, lst2):",
                                                "print(larger_list([4, 10, 2, 5], lst2 = [-10, 2, 5, 10]))<br># should print 5<br>print(larger_list(&nbsp;[1, 2, 3, 4], [1, 2]))<br># should print 4<br>print(larger_list(&nbsp;[2, 6, 3], [4, 6, 8, 1]))<br># should print 1",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-lists\">https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-lists</a>",
                                                "Go to <b>3. Larger List</b>",
                                                "def larger_list(lst1, lst2):<br>&nbsp;&nbsp;&nbsp; if len(lst1) &gt;= len(lst2):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return lst1[-1]<br>&nbsp;&nbsp;&nbsp; else:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return lst2[-1]",
                                                "<div>We start by comparing the lengths of each of the lists using the&nbsp;<b>len()</b>&nbsp;function. This determines whether to return the last element of the first list or the second list. Notice that we use&nbsp;<b>&gt;=</b>. This way, we know what to do if the lists have an equal length.<br><br></div><div>In order to get the last element, we get the element at the -1 index. The negative index starts at the end of the list and works towards the start of the list.</div>",
                                                "",
                                                "9bb9364f-9aeb-4e6e-b900-3b3c820a9a44"
                                            ],
                                            "guid": "pzh6*-%rdt",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<div>Create a function named&nbsp;<b>more_than_n</b>&nbsp;that has three parameters named&nbsp;<b>lst</b>,&nbsp;<b>item</b>, and&nbsp;<b>n</b>.<br><br></div><div>The function should return&nbsp;<b>True</b>&nbsp;if&nbsp;<b>item</b>&nbsp;appears in the list more than&nbsp;<b>n</b>&nbsp;times. The function should return&nbsp;<b>False</b>&nbsp;otherwise.</div>",
                                                "<b>Example 1:<br>input: </b>lst = [2, 4, 6, 2, 3, 2, 1, 2], item = 2, n = 3<b><br></b><b>output: </b>True<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>lst = [1, 1, 1], item = 1, n = 3<br><b>output: </b>False<br><br><b>Example 3:</b><br><b>input:&nbsp;</b>lst = [1, 1, 1], item = 1, n = 2<br><b>output: </b>True",
                                                "def more_than_n(lst, item, n):",
                                                "print(more_than_n([2, 4, 6, 2, 3, 2, 1, 2], item = 2, n = 3))<br># should print True<br>print(more_than_n([1, 1, 1], item = 1, n = 3))<br># should print False<br>print(more_than_n([1, 1, 1], item = 1, n = 2))<br># should print True",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-lists\">https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-lists</a>",
                                                "Go to <b>4. More Than N</b>",
                                                "def more_than_n(lst, item, n):<br>&nbsp;&nbsp;&nbsp; if lst.count(item) &gt; n:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return True<br>&nbsp;&nbsp;&nbsp; else:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return False",
                                                "We use the&nbsp;<b>count()</b>&nbsp;list method to count the number of times&nbsp;<b>item</b>&nbsp;appears in&nbsp;<b>lst</b>. You could also do this manually by looping through&nbsp;<b>lst</b>&nbsp;and incrementing a variable every time you see&nbsp;<b>item</b>. We then compare the result to&nbsp;<b>n</b>.",
                                                "",
                                                "8bf60e60-9656-4a8e-b3f5-b65123cb54c3"
                                            ],
                                            "guid": "Aer:)MCmU%",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<div>Write a function named&nbsp;<b>combine_sort</b>&nbsp;that has two parameters named&nbsp;<b>lst1</b>&nbsp;and&nbsp;<b>lst2</b>.<br><br></div><div>The function should combine these two lists into one new list and sort the result. Return the new sorted list.</div>",
                                                "<b>Example 1:<br>input: </b>lst1 = [4, 10, 2, 5], lst2 = [-10, 2, 5, 10]<b><br></b><b>output:&nbsp;</b>[-10, 2, 2, 4, 5, 5, 10, 10]<b><br><br>Example 2:<br>input:&nbsp;</b>lst1 = [10, 5, 15], lst2 = [50, 5, 6]<b><br></b><b>output:&nbsp;</b>[5, 5, 6, 10, 15, 50]<br><b><br></b><b>Example 3:<br>input:&nbsp;</b>lst1 =&nbsp;[1, 3, 5], lst2 = [2, 4, 6]<b><br></b><b>output:&nbsp;</b>[1, 2, 3, 4, 5]",
                                                "def combine_sort(lst1, lst2):",
                                                "print(combine_sort([4, 10, 2, 5], [-10, 2, 5, 10]))<br># should print [-10, 2, 2, 4, 5, 5, 10, 10]<br>print(combine_sort([10, 5, 15], [50, 5, 6]))<br># should print [5, 5, 6, 10, 15, 50]<br>print(combine_sort([1, 3, 5], [2, 4, 6]))<br># should print [1, 2, 3, 4, 5]",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-lists\">https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-lists</a>",
                                                "Go to <b>5. Combine Sort</b>",
                                                "def combine_sort(lst1, lst2):<br>&nbsp;&nbsp;&nbsp; unsorted = lst1 + lst2<br>&nbsp;&nbsp;&nbsp; sortedList = sorted(unsorted)<br>&nbsp;&nbsp;&nbsp; return sortedList",
                                                "We start by combining the two lists together using&nbsp;<b>+</b>&nbsp;in order to get a new list. Next, in order to sort them, we use the&nbsp;<b>sorted()</b>&nbsp;function which returns a new sorted version of the list.",
                                                "",
                                                "27673cda-5d7d-4936-8270-c95eeb7feda5"
                                            ],
                                            "guid": "f5TT4dHd$D",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<div>Create a function called&nbsp;<b>every_three_nums</b>&nbsp;that has one parameter named&nbsp;<b>start</b>.<br><br></div><div>The function should return a list of every third number between&nbsp;<b>start</b>&nbsp;and&nbsp;<b>100</b>&nbsp;(inclusive). For example,&nbsp;<b>every_three_nums(91)</b>&nbsp;should return the list&nbsp;<b>[91, 94, 97, 100]</b>. If&nbsp;<b>start</b>&nbsp;is greater than&nbsp;<b>100</b>, the function should return an empty list.</div>",
                                                "<b>Example 1:<br>input: </b>start = 91<br><b>output:&nbsp;</b>[91, 94, 97, 100]<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>start = 92<br><b>output:&nbsp;</b>[92, 95, 98]<br><br><b>Example 3:</b><br><b>input:&nbsp;</b>start = -10<br><b>output:&nbsp;</b>[-10, -7, -4, -1, 2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 59, 62, 65, 68, 71, 74, 77, 80, 83, 86, 89, 92, 95, 98]",
                                                "def every_three_nums(start):",
                                                "print(every_three_nums(91))<br># should print [91, 94, 97, 100]<br>print(every_three_nums(92))<br># should print [92, 95, 98]<br>print(every_three_nums(-10))<br># should print [-10, -7, -4, -1, 2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 59, 62, 65, 68, 71, 74, 77, 80, 83, 86, 89, 92, 95, 98]",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-lists\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-lists</a>",
                                                "Go to <b>1. Every Three Numbers</b>",
                                                "def every_three_nums(start):<br>&nbsp; &nbsp; return list(range(start, 101, 3))",
                                                "We can write the body of this function in one line by nesting the&nbsp;<b>range()</b>&nbsp;function inside of the&nbsp;<b>list()</b>&nbsp;function. The range function accepts the starting number, the ending number (exclusive), and the amount to increment by.",
                                                "",
                                                "1e4fd6ea-05c9-4008-a252-ed536a839628"
                                            ],
                                            "guid": "h3BZbg29ET",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<div>Create a function named&nbsp;<b>remove_middle</b>&nbsp;which has three parameters named&nbsp;<b>lst</b>,&nbsp;<b>start</b>, and&nbsp;<b>end</b>.<br><br></div><div>The function should return a list where all elements in&nbsp;<b>lst</b>&nbsp;with an index between&nbsp;<b>start</b>&nbsp;and&nbsp;<b>end</b>&nbsp;(inclusive) have been removed.<br></div>",
                                                "<b>Example 1:<br>input: </b>lst =&nbsp;[4, 8,&nbsp;15, 16, 23, 42], start = 1, end = 3<br><b>output:&nbsp;</b>[4, 23, 42]<br><br><b>Example 2:</b><br><b>input: </b>lst = [0, 1, 2, 3, 4, 5], start = 1, end = 4<br><b>output: </b>[0, 5]<br><br><b>Example 3:</b><br><b>input: </b>lst = [5, 8, 3, 6, 4], start = 0, end = 4<br><b>output: </b>[]",
                                                "def remove_middle(lst, start, end):",
                                                "",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-lists\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-lists</a>",
                                                "Go to <b>2. Remove Middle</b>",
                                                "def remove_middle(lst, start, end):<br>&nbsp; &nbsp; return lst[:start] +&nbsp;lst[end+1:]",
                                                "This can be solved using one line of code if you combine and slice the lists at the same time. Slicing allows us to get the segments of the list before and after the index range and the operation&nbsp;+&nbsp;allows us to combine them together.",
                                                "",
                                                "09ce0a34-5b75-49c5-8abe-548a8738f3d8"
                                            ],
                                            "guid": "saJr6R&a?w",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<div>Create a function named&nbsp;<b>more_frequent_item</b>&nbsp;that has three parameters named&nbsp;<b>lst</b>,&nbsp;<b>item1</b>, and&nbsp;<b>item2</b>.<br><br></div><div>Return either&nbsp;<b>item1</b>&nbsp;or&nbsp;<b>item2</b>&nbsp;depending on which item appears more often in&nbsp;<b>lst</b>.<br><br></div><div>If the two items appear the same number of times, return&nbsp;<b>item1</b>.</div>",
                                                "def more_frequent_item(lst, item1, item2):",
                                                "<b>Example 1:<br>input:&nbsp;</b>lst = [2, 3, 3, 2, 3, 2, 3, 2, 3], item1 = 2, item2 = 3<b><br>output: </b>3<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>lst = [0, 0, 1, 1], item1 = 0, item2 = 1<b><br>output: </b>0<br><br><b>Example 3:</b><br><b>input:&nbsp;</b>lst = [1, 0, 1], item1 = 0, item2 = 1<b><br>output: </b>1",
                                                "",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-lists\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-lists</a>",
                                                "Go to <b>3. More Frequent Item</b>",
                                                "def more_frequent_item(lst, item1, item2):<br>&nbsp; &nbsp; if lst.count(item1) &gt;= lst.count(item2):<br>&nbsp; &nbsp; &nbsp; &nbsp; return item1<br>&nbsp; &nbsp; else:<br>&nbsp; &nbsp; &nbsp; &nbsp; return item2",
                                                "<div><div>We use the&nbsp;<b>count()</b>&nbsp;function to find the number of occurrences for each item. We then compare the counts against each other to find the item which appears the most in the list. The item with the most appearances is returned by the function.</div></div>",
                                                "",
                                                "abcbfd34-305b-4b78-b61a-205ce6de779c"
                                            ],
                                            "guid": "uowp%e^m^`",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<div>Create a function named&nbsp;<b>double_index</b>&nbsp;that has two parameters: a list named&nbsp;<b>lst</b>&nbsp;and a single number named&nbsp;<b>index</b>.<br><br></div><div>The function should return a new list where all elements are the same as in&nbsp;<b>lst</b>&nbsp;except for the element at&nbsp;<b>index</b>. The element at&nbsp;<b>index</b>&nbsp;should be double the value of the element at&nbsp;<b>index</b>&nbsp;of the original&nbsp;<b>lst</b>.<br><br></div><div>If&nbsp;<b>index</b>&nbsp;is not a valid index, the function should return the original list.<br><br>Do NOT modify the input list.</div>",
                                                "<b>Example 1:<br>input: </b>lst = [1, 2, 3, 4], index = 2<b><br>output: </b>[1, 2, 6, 4]<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>lst =&nbsp;[1, 2, 3, 4], index = 20<br><b>output:&nbsp;</b>[1, 2, 3, 4]<br><br><b>Example 3:</b><br><b>input:&nbsp;</b>lst =&nbsp;[1, 2, 3, 4], index = 20<br><b>output:</b>",
                                                "def double_index(lst, index):",
                                                "",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-lists\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-lists</a>",
                                                "Go to <b>4. Double Index</b>",
                                                "def double_index(lst, index):<br>&nbsp; &nbsp; # Checks to see if index is too big or too small<br>&nbsp;&nbsp;&nbsp; if index &gt;= len(lst) or index &lt; 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return lst<br>&nbsp;&nbsp;&nbsp; else:<br>&nbsp; &nbsp; &nbsp; &nbsp; # Gets the original list up to index<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new_lst = lst[0:index]<br><br>&nbsp; &nbsp; # Adds double the value at index to the new list<br>&nbsp;&nbsp;&nbsp; new_lst.append(lst[index] * 2)<br><br>&nbsp; &nbsp; #&nbsp; Adds the rest of the original list<br>&nbsp;&nbsp;&nbsp; new_lst = new_lst + lst[index + 1:]<br>&nbsp;&nbsp;&nbsp; return new_lst",
                                                "Note that this solution is careful not to modify the original input list. If we were to simply use&nbsp;<b>lst[index] = lst[index] * 2</b>&nbsp;then the list that was passed into the function would be modified outside of the function as well. Creating a new list and writing the values to it prevents this from happening. We use slicing to extract the values before and after the index and we append the modified value at the index to our new list.<br><br># A more concise solution:<br>def double_index(lst, index):<br>&nbsp;&nbsp;&nbsp; if index &gt;= len(lst) or index &lt; 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return lst<br>&nbsp;&nbsp;&nbsp; answer = lst[:]<br>&nbsp;&nbsp;&nbsp; answer[index] *= 2<br>&nbsp;&nbsp;&nbsp; return answer",
                                                "",
                                                "0510ce50-39fb-4dfa-91d5-33c1e3e6031a"
                                            ],
                                            "guid": "QsMYV0+?7d",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<div>Create a function called&nbsp;<b>middle_element</b>&nbsp;that has one parameter named&nbsp;<b>lst</b>.<br><br></div><div>If there are an odd number of elements in&nbsp;<b>lst</b>, the function should return the middle element. If there are an even number of elements, the function should return the average of the middle two elements.</div>",
                                                "<b>Example 1:<br>input: </b>lst =<b>&nbsp;</b>[5, 2, -10, -4, 4, 5]<b><br></b><b>output: </b>-7.0<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>[5, 2, -10, -4, 4]<br><b>output:&nbsp;</b>-10<br><br><b>Example 3:</b><br><b>input:&nbsp;</b>[1, 2, 3, 4]<br><b>output: </b>2.5",
                                                "def middle_element(lst):",
                                                "",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-lists\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-lists</a>",
                                                "Go to <b>5. Middle Item</b>",
                                                "def middle_element(lst):<br>&nbsp;&nbsp;&nbsp; if len(lst) % 2 == 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sum = lst[int(len(lst) / 2)] + lst[int(len(lst) / 2) - 1]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return sum / 2<br>&nbsp;&nbsp;&nbsp; else:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return lst[int(len(lst) / 2)]",
                                                "<div>We used modulus to determine if the list had an even or odd number of elements. After determining this, for an odd number of elements, we calculate the middle index and return the middle element from the list. For an even number of elements, we calculate the index of the element close to the middle and the other element close to the middle (by subtracting 1 from the middle calculation). We get the values at those indices and calculate the average.<br><br></div><div>Note that the math to find the middle index is a bit tricky. In some cases, when we divide by&nbsp;<b>2</b>, we would get a double. For example, if our list had&nbsp;<b>3</b>&nbsp;items in it, then&nbsp;<b>3/2</b>&nbsp;would give us&nbsp;<b>1.5</b>. The middle index should be&nbsp;<b>1</b>, so in order to go from&nbsp;<b>1.5</b>&nbsp;to&nbsp;<b>1</b>, we cast&nbsp;<b>1.5</b>&nbsp;as an&nbsp;int. In total, this is&nbsp;<b>int(len(lst)/2)</b>.</div>",
                                                "",
                                                "a16ba1d2-3ceb-4929-8d31-56b922b585f3"
                                            ],
                                            "guid": "AI|{CfE1fH",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "b8f1051c-0163-11ec-97a4-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "paste-07bd6d3d5ad86bc5d16483286db34eb97d898fa9.jpg",
                                        "paste-07f14e534e22e361f5d7dec8b7617966be235df0.jpg",
                                        "paste-14420c3abac7fecd932df0794506b3049f0b5f5e.jpg",
                                        "paste-271f8d8325a0fcb9383d959a42530dd32c74f35d.jpg",
                                        "paste-3085956e2b51bb3adceb3b481485e1cb061e3696.jpg",
                                        "paste-31b11bb98119df221265b42a145da6bb2a6b62d9.jpg",
                                        "paste-5844996fd259dedb3fd684a67698333904129ae5.jpg",
                                        "paste-80c066ce842676c2e4bcfa2cbf22a612fb314e86.jpg",
                                        "paste-b1d59ef498e07940c4e595b8fc43e3098300671a.jpg",
                                        "paste-b96cc7275f8062e730958b75b09e790052dab7a7.jpg",
                                        "paste-c95536e10c7e26bd7869be0a72cbb976a1b8edac.jpg",
                                        "paste-cee074307529ee12f9310f33aef138f6f6be346e.jpg",
                                        "paste-cf9d00758e503bcae0d5f574f91a8fc40a228b93.jpg",
                                        "paste-d116ff3e8ab6ee5f13dd1dae76ada53d5dddca62.jpg",
                                        "paste-d9219e1a72bf9719c9da74b0e76c6a31ca2185f8.jpg",
                                        "paste-da74bad6b566275caf1f964216fe435212b24903.jpg",
                                        "paste-e00c213ce87cdba4828f0329a87b4a49f9570e9e.jpg",
                                        "paste-fba9cb53fd3607915cfd773693ef3cb59ec405f2.jpg",
                                        "paste-fced8da294105490e7eb026b9e97952eb3247c83.jpg",
                                        "paste-ff26106a80a2f4ae69a3e2a2702e74338a3a6851.jpg",
                                        "paste-ff9b503a7e49a53d3297b94485031de0d67ffacd.jpg"
                                    ],
                                    "name": "Loops",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<div>Create a function named&nbsp;<b>divisible_by_ten()</b>&nbsp;that takes a list of numbers named&nbsp;<b>nums</b>&nbsp;as a parameter.<br><br></div><div>Return the count of how many numbers in the list are divisible by 10.</div>",
                                                "<b>Example 1:<br>input:&nbsp;</b>[20, 25, 30, 35, 40]<b><br></b><b>output: </b>3<br><br><b>Example 2:</b><br><b>input: </b>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br><b>output: </b>1<br><br><b>Example 3:</b><br><b>input: </b>[5, 15, 25]<br><b>output: </b>0",
                                                "def divisible_by_ten(nums):",
                                                "",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-loops\">https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-loops</a>",
                                                "Go to <b>1. Divisible By Ten</b>",
                                                "def divisible_by_ten(nums):<br>&nbsp;&nbsp;&nbsp; count = 0<br>&nbsp;&nbsp;&nbsp; for number in nums:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if number % 10 == 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; count += 1<br>&nbsp;&nbsp;&nbsp; return count",
                                                "In this solution, we defined the function and set up our counter. We use a&nbsp;<b>for</b>&nbsp;loop to iterate through each number and check if its divisible by ten. If a number is divisible by another number then the remainder should be zero, so we use modulus. After the loop has finished, we return our count.",
                                                "",
                                                "21cf6d71-3eca-4e77-8cc7-5e5f3995b2c7"
                                            ],
                                            "guid": "gA;A:D0#Qd",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<div>Create a function named&nbsp;<b>add_greetings()</b>&nbsp;which takes a list of strings named&nbsp;<b>names</b>&nbsp;as a parameter.<br><br></div><div>In the function, create an empty list that will contain each greeting. Add the string&nbsp;<b>'Hello, '</b>&nbsp;in front of each name in&nbsp;<b>names</b>&nbsp;and&nbsp;<b>append</b>&nbsp;the greeting to the list.<br><br></div><div>Return the new list containing the greetings.</div>",
                                                "<b>Example 1:<br>input: </b>names = [\"Seth\", \"Alex\", \"Paul\"]<br><b>output:&nbsp;</b>['Hello, Seth', 'Hello, Alex', 'Hello, Paul']<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>names = []<br><b>output: </b>[]<br><br><b>Example 3:</b><br><b>input: </b>[\"Elon\"]<br><b>output: </b>[\"Hello, Elon\"]",
                                                "def add_greetings(names):",
                                                "",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-loops\">https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-loops</a>",
                                                "Go to <b>2. Greetings</b>",
                                                "def add_greetings(names):<br>&nbsp;&nbsp;&nbsp; new_list = []<br>&nbsp;&nbsp;&nbsp; for name in names:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new_list.append('Hello, ' + name)<br>&nbsp;&nbsp;&nbsp; return new_list",
                                                "First, we set up our function to accept the list of strings and we initialized a new list of strings to hold our greetings. We iterate through each name and we append and concatenate the strings at the same time within our loop. Finally, we return the list containing all of our eloquent greetings.",
                                                "",
                                                "b6242453-2024-4c1d-8a75-a4e195487368"
                                            ],
                                            "guid": "CxE,3a~!g5",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<div>Write a function called&nbsp;<b>delete_starting_evens()</b>&nbsp;that has a parameter named&nbsp;<b>lst</b>.<br><br></div><div>The function should remove elements from the front of&nbsp;<b>lst</b>&nbsp;until the front of the list is not even. The function should then return&nbsp;<b>lst</b>.</div>",
                                                "<b>Example 1:<br>input: </b>lst =&nbsp;[4, 8, 10, 11, 12, 15]<br><b>output:&nbsp;</b>[11, 12, 15]<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>lst =&nbsp;[2, 4, 6, 8]<br><b>output: </b>[]<br><br><b>Example 3:</b><br><b>input:&nbsp;</b>lst = [1, 2, 4, 6, 8, 10, 12]<br><b>output:&nbsp;</b>[1, 2, 4, 6, 8, 10, 12]",
                                                "def delete_starting_evens(lst):",
                                                "",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-loops\">https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-loops</a>",
                                                "Go to <b>3. Delete Starting Even Numbers</b>",
                                                "def delete_starting_evens(lst):<br>&nbsp;&nbsp;&nbsp; while len(lst) &gt; 0 and lst[0] % 2 == 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lst = lst[1:]<br>&nbsp;&nbsp;&nbsp; return lst",
                                                "After defining our method, we use a&nbsp;<b>while</b>&nbsp;loop to keep iterating as long as some provided conditions are true. We provide two conditions for the&nbsp;<b>while</b>&nbsp;loop to continue. We will keep iterating as long as there is at least one number left in the list&nbsp;<b>len(lst) &gt; 0</b>&nbsp;and if the first element in the list is even&nbsp;<b>lst[0] % 2 == 0</b>. If both of these conditions are true, then we replace the list with every element except for the first one using&nbsp;<b>lst[1:]</b>. Once the list is empty or we hit an odd number, the&nbsp;<b>while</b>&nbsp;loop terminates and we return the modified list.",
                                                "",
                                                "b78e2d1a-2748-4e8a-943a-b461950e6831"
                                            ],
                                            "guid": "n,hpJEc~f=",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"paste-14420c3abac7fecd932df0794506b3049f0b5f5e.jpg\">",
                                                "<b>Example 1:<br>input: </b>lst = [4, 3, 7, 10, 11, -2]<b><br>output: </b>[3, 10, -2]<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>[10, 4, 5, 3]<br><b>output:&nbsp;</b>[4, 3]<br><br><b>Example 3:</b><br><b>input:&nbsp;</b>[0, 1, 2, 3, 4]<br><b>output:&nbsp;</b>[1, 3]",
                                                "def odd_indices(lst):",
                                                "",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-loops\">https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-loops</a>",
                                                "Go to <b>4. Odd Indices</b>",
                                                "<img src=\"paste-80c066ce842676c2e4bcfa2cbf22a612fb314e86.jpg\">",
                                                "<img src=\"paste-3085956e2b51bb3adceb3b481485e1cb061e3696.jpg\">",
                                                "",
                                                "c631c97f-64b9-46c6-bf8d-c520ec046175"
                                            ],
                                            "guid": "G1Kk^Y<+rB",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"paste-07bd6d3d5ad86bc5d16483286db34eb97d898fa9.jpg\">",
                                                "<b>Example 1:<br>input: </b>bases = [2, 3, 4], powers = [1, 2, 3]<br><b>output:&nbsp;</b>[2, 4, 8, 3, 9, 27, 4, 16, 64]<br><br><b>Example 2:</b><br><b>input: </b>bases = [10, 20], powers = [1, 2]<br><b>output: </b>[10, 100, 20, 400]<br><br><b>Example 3:</b><br><b>input: </b>bases = [10], powers = [1]<br><b>output: </b>[10]",
                                                "def exponents(bases, powers):",
                                                "",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-loops\">https://www.codecademy.com/courses/learn-python-3/articles/python-code-challenges-loops</a>",
                                                "Go to <b>5. Exponents</b>",
                                                "<img src=\"paste-5844996fd259dedb3fd684a67698333904129ae5.jpg\">",
                                                "<img src=\"paste-cee074307529ee12f9310f33aef138f6f6be346e.jpg\">",
                                                "",
                                                "72ce9fd2-82d4-4485-9c9d-221d4edb76a0"
                                            ],
                                            "guid": "b5D&/z(uoZ",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"paste-31b11bb98119df221265b42a145da6bb2a6b62d9.jpg\">",
                                                "<b>Example 1:<br>input: </b>lst1 = [1, 9, 5], lst2 = [2, 3, 7]<b><br>output:&nbsp;</b>[1, 9, 5]<b><br><br>Example 2:<br>input:</b><b>&nbsp;</b>lst1 =&nbsp;[1, 4, 5], lst2 = [7, 2, 1]<b><br>output:&nbsp;</b>[1, 4, 5]<b><br><br>Example 3:<br>input:</b><b>&nbsp;</b>lst1 =&nbsp;[1, 9, 5], lst2 = [6, 5, 9]<b><br>output:&nbsp;</b>[6, 5, 9]",
                                                "def larger_sum(lst1, lst2):",
                                                "",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-loops\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-loops</a>",
                                                "Go to <b>1. Larger Sum</b>",
                                                "<img src=\"paste-c95536e10c7e26bd7869be0a72cbb976a1b8edac.jpg\">",
                                                "<img src=\"paste-d9219e1a72bf9719c9da74b0e76c6a31ca2185f8.jpg\">",
                                                "",
                                                "615aaa9c-54d5-4e38-92b7-9d711542fb57"
                                            ],
                                            "guid": "q4e*LvO/qF",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"paste-271f8d8325a0fcb9383d959a42530dd32c74f35d.jpg\">",
                                                "<b>Example 1:<br>input: </b>lst =&nbsp;[8000, 900, 120, 5000]<br><b>output: </b>9020<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>lst = [9000, 100, 200]<br><b>output: </b>9100<br><br><b>Example 3:</b><br><b>input:&nbsp;</b>lst =&nbsp;[9001, 100, 200]<br><b>output: </b>9001<br><br><b>Example 4:</b><br><b>input:&nbsp;</b>lst =&nbsp;[1, 2, 3]<br><b>output:&nbsp;</b>5",
                                                "def over_nine_thousand(lst):",
                                                "",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-loops\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-loops</a>",
                                                "Go to <b>2. Over 9000</b>",
                                                "<img src=\"paste-fced8da294105490e7eb026b9e97952eb3247c83.jpg\">",
                                                "<img src=\"paste-d116ff3e8ab6ee5f13dd1dae76ada53d5dddca62.jpg\">",
                                                "",
                                                "113ec108-02fc-4e7b-b327-4f23ea1392e1"
                                            ],
                                            "guid": "G-:(Uph@X~",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"paste-ff9b503a7e49a53d3297b94485031de0d67ffacd.jpg\">",
                                                "<b>Example 1:<br>input: </b>nums =&nbsp;[50, -10, 0, 75, 20]<br><b>output: </b>75<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>nums = [1, 2, 3, 4, 5]<br><b>output: </b>5<br><br><b>Example 3:</b><br><b>input:&nbsp;</b>nums = [7, 4, 2, 6, 4]<br><b>output: </b>7",
                                                "def max_num(nums):",
                                                "",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-loops\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-loops</a>",
                                                "Go to <b>3. Max Num</b>",
                                                "<img src=\"paste-b1d59ef498e07940c4e595b8fc43e3098300671a.jpg\">",
                                                "<img src=\"paste-b96cc7275f8062e730958b75b09e790052dab7a7.jpg\">",
                                                "",
                                                "9d9f7968-df11-47a3-a55a-e35daf28fe32"
                                            ],
                                            "guid": "c>?O![T/Z}",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"paste-e00c213ce87cdba4828f0329a87b4a49f9570e9e.jpg\"><br>You can assume lists are of equal length.",
                                                "<b>Example 1:<br>input: </b>lst1 = [5, 1, -10, 3, 3], lst2 =&nbsp;[5, 10, -10, 3, 5]<br><b>output:&nbsp;</b>[0, 2, 3]<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>lst1 = [10, 20, 30, 40], lst2 =&nbsp;[20, 10, 40, 30]<br><b>output: </b>[]<br><br><b>Example 3:</b><br><b>input:&nbsp;</b>lst1 = [10, 20, 30, 40], lst2 =&nbsp;[10, 20, 30, 40]<br><b>output:&nbsp;</b>[0, 1, 2, 3]",
                                                "def same_values(lst1, lst2):",
                                                "",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-loops\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-loops</a>",
                                                "Go to <b>4. Same Values</b>",
                                                "<img src=\"paste-da74bad6b566275caf1f964216fe435212b24903.jpg\">",
                                                "<img src=\"paste-fba9cb53fd3607915cfd773693ef3cb59ec405f2.jpg\">",
                                                "",
                                                "49c85d80-b6f8-4bcb-befb-98ac3d629e33"
                                            ],
                                            "guid": "PUGpc)K>38",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"paste-ff26106a80a2f4ae69a3e2a2702e74338a3a6851.jpg\"><br>You can assume both input lists are of equal length.",
                                                "<b>Example 1:<br>input: </b>lst1 = [1, 2, 3], lst2 = [3, 2, 1]<br><b>output:&nbsp;</b>True<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>lst1 = [1, 2, 3], lst2 =&nbsp;[1, 2, 3]<br><b>output:&nbsp;</b>False<br><br><b>Example 3:</b><br><b>input:&nbsp;</b>lst1 = [16, 3, 6], lst2 =&nbsp;[3, 6, 4]<br><b>output: </b>False",
                                                "def reversed_list(lst1, lst2):",
                                                "",
                                                "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-loops\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-loops</a>",
                                                "Go to <b>5. Reversed List</b>",
                                                "<img src=\"paste-07f14e534e22e361f5d7dec8b7617966be235df0.jpg\">",
                                                "<img src=\"paste-cf9d00758e503bcae0d5f574f91a8fc40a228b93.jpg\">",
                                                "",
                                                "ded416e1-159d-4392-a501-bff338c6fc65"
                                            ],
                                            "guid": "mQS:KCdi*T",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                }
                            ],
                            "crowdanki_uuid": "3ef472d2-0139-11ec-9560-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "Python Code Challenges",
                            "notes": []
                        }
                    ],
                    "crowdanki_uuid": "3ef45be4-0139-11ec-9560-3e22fb2860fe",
                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [],
                    "name": "Codecademy",
                    "notes": []
                }
            ],
            "crowdanki_uuid": "c6e57e90-0123-11ec-aca4-3e22fb2860fe",
            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [],
            "mid": 1629400138992,
            "name": "Code Challenges",
            "notes": []
        },
        {
            "__type__": "Deck",
            "children": [
                {
                    "__type__": "Deck",
                    "children": [
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f0883642-0089-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "int",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "The {{c1::int()}} function converts the specified value into an integer",
                                        "",
                                        "",
                                        "3a3fa52c-a033-44d4-9433-4849f59a9d29"
                                    ],
                                    "guid": "E&/^R(6lO3",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f0885208-0089-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "lUNCMxlhX2KPsjoKejmgIg0E-u8VJA6D04vHZWMQH0TBxZhzyS-ftGtUSw7vpDKcN9Y7XmgIJPh1KWGlpw_USZZOZEeqSvZEcWOYzCkKLkbRootKtK5.png"
                            ],
                            "name": "len",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "Syntax to get the length of a list?",
                                        "len(my_list)",
                                        "<img src=\"lUNCMxlhX2KPsjoKejmgIg0E-u8VJA6D04vHZWMQH0TBxZhzyS-ftGtUSw7vpDKcN9Y7XmgIJPh1KWGlpw_USZZOZEeqSvZEcWOYzCkKLkbRootKtK5.png\">",
                                        "",
                                        "0139b73f-e6d6-4ed8-aaea-1621611dc5d4"
                                    ],
                                    "guid": "K:D#X]m`xL",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "print(len([1,2,3]))",
                                        "3",
                                        "",
                                        "",
                                        "9a4e9220-faff-40e3-842f-e075416ba71e"
                                    ],
                                    "guid": "dnuRHTjru_",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f088704e-0089-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "list",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "The {{c1::list()}} function converts an object into a list.",
                                        "",
                                        "",
                                        "c6656657-5099-4304-9802-d907ee7a6b1c"
                                    ],
                                    "guid": "ff~K/$FCM<",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f0888a34-0089-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "mDHBPdzUJa4sVULySsBFD07fT5B3WMOENDPvd3UZSbOMXCVvMuOCVocFFLibkVVzJHDQpwEgUqcsae-ygzYum-bvJMLzND_rrkvZSrjC-W2eZijHLdU.png"
                            ],
                            "name": "print",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "The {{c1::print()}} function is used to output information to the console.",
                                        "<img src=\"mDHBPdzUJa4sVULySsBFD07fT5B3WMOENDPvd3UZSbOMXCVvMuOCVocFFLibkVVzJHDQpwEgUqcsae-ygzYum-bvJMLzND_rrkvZSrjC-W2eZijHLdU.png\">",
                                        "",
                                        "8DD14D47-CE3B-4C76-AF10-B78FB99F1FC4"
                                    ],
                                    "guid": "zK5TWR,D*x",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": [
                                        "codecademy",
                                        "python"
                                    ]
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "What does the print function do?",
                                        "output information to the console",
                                        "<img src=\"mDHBPdzUJa4sVULySsBFD07fT5B3WMOENDPvd3UZSbOMXCVvMuOCVocFFLibkVVzJHDQpwEgUqcsae-ygzYum-bvJMLzND_rrkvZSrjC-W2eZijHLdU.png\">",
                                        "",
                                        "c73c0964-d1dc-4af8-b822-3b612aaf92e1"
                                    ],
                                    "guid": "bmsPa)DAq%",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": [
                                        "codecademy",
                                        "python"
                                    ]
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f088a85c-0089-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "SXA8x_aNcZiD7NOIS04m0AL8qcGYSaHJBysU7G7ypZBsMcGC15-JMOOfSw-6MsNbDThVEJQefMygzYGIfmUQKM7RmTEmGW-S3Q45ky1khzTKdRKVAk0.png",
                                "gW1axJRiAOU_SBKa3IbU-JakPIkiaASckBwPYWR7RpdNuzb-ueyLr-WgJO6qrXTbhQE5QGOq2DxfSqfjIVmFBAEIcBm8MXVbjelYuhRMvd2FUP-P3uR.png",
                                "hZLbtVb5lipVjPm4oJoqZPdRrycehPp2eY6Wct6sAZiABeTPZhXF_JB88CFkavYRTn8KgrUxw01nJUu-Lvsoniul5P6OSS7VnCV9ghAmfOn_kruNZal.png",
                                "paste-6d2a721acbf338ba38f842428b082bf3fd7f9023.jpg",
                                "paste-6f9b22f9b851a95102d82c2f3f6c39fa5d6caceb.jpg",
                                "ylCnoBAF1_F7_nGY1TdvWQ9SDv6_mbEptmO5qvSSirBHTkecUj2kX1UzWC_ANklH0K2Zs5PyRiUxMHXgbrBSuI5z824jbFAnP48O0lWuIdCbsl9JdTz.png"
                            ],
                            "mid": 1629300492637,
                            "name": "range",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "using the range() function, create a range object that has a sequence of [0, 1, 2, 3, 4]",
                                        "range(5)",
                                        "`range(0, 5)` also works, but is less concise.",
                                        "",
                                        "e02d2e9f-ad60-4f10-99eb-95bf6dd97b07"
                                    ],
                                    "guid": "nF!8SU?b48",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<img src=\"hZLbtVb5lipVjPm4oJoqZPdRrycehPp2eY6Wct6sAZiABeTPZhXF_JB88CFkavYRTn8KgrUxw01nJUu-Lvsoniul5P6OSS7VnCV9ghAmfOn_kruNZal.png\">",
                                        "<img src=\"SXA8x_aNcZiD7NOIS04m0AL8qcGYSaHJBysU7G7ypZBsMcGC15-JMOOfSw-6MsNbDThVEJQefMygzYGIfmUQKM7RmTEmGW-S3Q45ky1khzTKdRKVAk0.png\">",
                                        "",
                                        "",
                                        "350df499-57fc-4a84-83ab-9aef9168bce4"
                                    ],
                                    "guid": "G4+&F9T]1j",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "What inputs does range() take?",
                                        "range(start, stop, step)<br><br>`start` and `stop` are optional, so here are the possible inputs:<br>range(stop)<br>range(start, stop)<br>range(start, stop, step)",
                                        "<img src=\"paste-6d2a721acbf338ba38f842428b082bf3fd7f9023.jpg\"><br><a href=\"https://www.w3schools.com/python/ref_func_range.asp\">https://www.w3schools.com/python/ref_func_range.asp</a>",
                                        "",
                                        "53af4c24-89de-425a-a53b-e6c6bf288481"
                                    ],
                                    "guid": "sYm)4n1I>G",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<img src=\"gW1axJRiAOU_SBKa3IbU-JakPIkiaASckBwPYWR7RpdNuzb-ueyLr-WgJO6qrXTbhQE5QGOq2DxfSqfjIVmFBAEIcBm8MXVbjelYuhRMvd2FUP-P3uR.png\">",
                                        "<img src=\"ylCnoBAF1_F7_nGY1TdvWQ9SDv6_mbEptmO5qvSSirBHTkecUj2kX1UzWC_ANklH0K2Zs5PyRiUxMHXgbrBSuI5z824jbFAnP48O0lWuIdCbsl9JdTz.png\">",
                                        "",
                                        "",
                                        "83934436-7415-4c1d-a329-46f717118614"
                                    ],
                                    "guid": "jh1;BOPdux",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "using the range() function, create the range object `[3, 2, 1, 0]`",
                                        "range(3, -1, -1)",
                                        "inputs:<br>range(start, stop, step)<br><br>So we `start` at the number 3, and then we go backwards because our `step` is -1, and we stop before we reach `stop` which is -1.<br><br>print(list(range(3,-1,-1))) # [3, 2, 1, 0]",
                                        "",
                                        "fa190887-6f99-46c1-addf-2abfc28b05b9"
                                    ],
                                    "guid": "FbVr@*Vv8l",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "The {{c1::range()}}&nbsp;function can be used to create a list that can be used to specify the number of iterations in a for loop.",
                                        "<img src=\"paste-6f9b22f9b851a95102d82c2f3f6c39fa5d6caceb.jpg\">",
                                        "",
                                        "da62b1f2-dd8c-455e-bab7-6ccfa3fcbbd6"
                                    ],
                                    "guid": "L@~EsXZ}9f",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "for i in range(3):\n<br>&nbsp; &nbsp; print(i)",
                                        "0<br>1<br>2",
                                        "The range() function starts at 0 by default.",
                                        "",
                                        "52ce3f01-c8e4-4bca-84d1-4a4b3954074c"
                                    ],
                                    "guid": "eTAK.K_oQ;",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f088d2a0-0089-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "vEBBBrsInivN85ZPrwJ7krpLPuGPBN_9m1ZcUFUS8QPS5bIg65ig35R6kl9IyWZ_ICa4ZeKGqfu16fDJKe3z7i-0MVsDSfQOOm6p-JUJoGL11_ifVzV.png"
                            ],
                            "name": "sorted",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "The {{c1::sorted()}} function accepts a list as an argument, and will return a new, sorted list containing the same elements as the original",
                                        "<img src=\"vEBBBrsInivN85ZPrwJ7krpLPuGPBN_9m1ZcUFUS8QPS5bIg65ig35R6kl9IyWZ_ICa4ZeKGqfu16fDJKe3z7i-0MVsDSfQOOm6p-JUJoGL11_ifVzV.png\">",
                                        "",
                                        "bd7907d9-b350-4f1d-8296-0d469b16bfd2"
                                    ],
                                    "guid": "On%j,dnN?Y",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f088ebaa-0089-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "str",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "the {{c1::str()}} function converts the specified value into a string",
                                        "ten = str(10)&nbsp;<br># so ten equals the string '10'",
                                        "",
                                        "D575CBAF-A1AA-4845-B5A0-516AC85FF0F6"
                                    ],
                                    "guid": "py5+dO1V_&",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": [
                                        "codecademy",
                                        "python"
                                    ]
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "45305c44-06dc-11ec-80f9-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "3dUcsFGQmaQFy7R0yDD2aTKnpj7FDQhmVlsCinGA76xvdBCqN8Ugxqu_bhiAScbt3CcRMdp803PLCLQ4UsJU3PSOiFE8WSm4wr2JdJ_6nCOsWj02k7k.png"
                            ],
                            "mid": 1629301724971,
                            "name": "type",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "The Python {{c1::type()}} function returns the data type of the argument passed to it.",
                                        "<img src=\"3dUcsFGQmaQFy7R0yDD2aTKnpj7FDQhmVlsCinGA76xvdBCqN8Ugxqu_bhiAScbt3CcRMdp803PLCLQ4UsJU3PSOiFE8WSm4wr2JdJ_6nCOsWj02k7k.png\">",
                                        "",
                                        "7FEED614-1981-4BBF-ADB0-3AF9B8277AB3"
                                    ],
                                    "guid": "nwD&Wvw9!R",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        }
                    ],
                    "crowdanki_uuid": "46be7fbc-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [],
                    "name": "built-in functions",
                    "notes": []
                },
                {
                    "__type__": "Deck",
                    "children": [
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f053a2f0-06de-11ec-9e1c-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "Q1_lRd-YJz37xQ7RV57VDS7mCvG8H4d0mUrKUVITLLsEbcUt3XsH6EWUeE_fv7y04gBJGM5EaiAjt9fCK91jKK6Zwdtc7tsb163xe2msM5-Aq79fFx4.png"
                            ],
                            "mid": 1629300492637,
                            "name": "class variables",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "# What does the definition of the class `Example` need to be so that the print statement prints: 100 <br># ? <br><br>class Example:<br>{{c1::&nbsp; &nbsp; a = 100}}<br><br>x = Example() <br>print(x.a) # Should print 100",
                                        "<img src=\"Q1_lRd-YJz37xQ7RV57VDS7mCvG8H4d0mUrKUVITLLsEbcUt3XsH6EWUeE_fv7y04gBJGM5EaiAjt9fCK91jKK6Zwdtc7tsb163xe2msM5-Aq79fFx4.png\">",
                                        "",
                                        "EF781AA3-71BE-46B5-A689-E35969DA2681"
                                    ],
                                    "guid": "DC;XXh>jhC",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "# What should the print statement below be so that the class variable `quote` of the instance `x` is printed? <br><br>class Example: <br>&nbsp;&nbsp;&nbsp; quote = \"You can have it all, just not all at once\" <br><br>x = Example() <br>print({{c1::x.quote}}) # Should print: You can have it all, just not all at once",
                                        "<div>We use dot notation to access the class variable <b>quote</b>&nbsp;of&nbsp;<b>x</b>&nbsp;<br><br></div><div><b> x</b> is an instance of the <b>Example</b> class&nbsp;</div>",
                                        "",
                                        "BED481AC-1221-4BD0-9590-FBA950FB5397"
                                    ],
                                    "guid": "AXc9HTGGs:",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f053c794-06de-11ec-9e1c-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "LOnoH55ug4T1xBjI2NEa4M10VTI6Al9diIM_TeXZv4iRYcnshDPca3BesViWDbbxu5GYlRN4aMfZfXYpk6nUoUjBartW0CeAe9sB5i6Mixsw_1ago_k.png"
                            ],
                            "mid": 1629415250870,
                            "name": "general",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "Everything in Python is an {{c1::object}}",
                                        "integers, booleans, functions, are all objects in Python...",
                                        "",
                                        "9348FBB0-043F-446A-9C6D-7457F7898D5E"
                                    ],
                                    "guid": "A-~]S.0Czd",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "What is an object in Python?",
                                        "an instance of a class",
                                        "class Example:&nbsp;<br>&nbsp; &nbsp; pass&nbsp;<br>x = Example()&nbsp;<br># So&nbsp;<b>Example</b>&nbsp;is a class, and&nbsp;<b>x</b>&nbsp;is an object, which is an instance of&nbsp;<b>Example</b>",
                                        "",
                                        "3ED59615-821D-4DD5-8CEF-AD9AB384034E"
                                    ],
                                    "guid": "dsdV%f#b&!",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "# Define a class below so that the print statements print what the comments say it should print <br><br>{{c1::class X: <br>&nbsp; &nbsp; def __init__(self, a, b): <br>&nbsp; &nbsp; &nbsp; &nbsp; self.a = a <br>&nbsp; &nbsp; &nbsp; &nbsp; self.b = b}} <br><br>x = X(1, 2) <br>print(x.a) # should print: 1 <br>print(x.b) # should print: 2",
                                        "# This question tests your memorization of the syntax involved in creating a class.<br># `a` and `b` are instance variables.<br><br> # Note that the class definition could also look something like this:<br>class X:<br>&nbsp;&nbsp;&nbsp; def __init__(self, this_could_be_anything, blah_blah):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.a = this_could_be_anything<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; self.b = blah_blah<br><br># So the name of the parameters of the __init__ function doesn't really matter<br># But it's good practice to keep the names consistent.<br><span style=\"color: rgb(35, 39, 53);\"><br></span><img src=\"LOnoH55ug4T1xBjI2NEa4M10VTI6Al9diIM_TeXZv4iRYcnshDPca3BesViWDbbxu5GYlRN4aMfZfXYpk6nUoUjBartW0CeAe9sB5i6Mixsw_1ago_k.png\"><span style=\"color: rgb(35, 39, 53);\"><br></span>",
                                        "",
                                        "A0DC18BE-A2D6-4950-A7CC-5DEB12E40F26"
                                    ],
                                    "guid": "m4zfjaMO.$",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "What are magic methods?",
                                        "methods with double underscores before and after the name, like __init__",
                                        "Magic methods in Python are the special methods that start and end with the double underscores. They are also called dunder methods. Magic methods are not meant to be invoked directly by you, but the invocation happens internally from the class on a certain action.",
                                        "",
                                        "0F912A9B-FC62-40BE-83D8-76BCA89CCB15"
                                    ],
                                    "guid": "kq2)g&:ChJ",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f053efee-06de-11ec-9e1c-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "t0EsosG9lW6Gu_rXAX2ppmeOpqZ-wpoTdYy2M35k69uDAORC4j42RWsoOa82aN08lkIhnub-N2Wd_MM4_wQjQ-3p9zjMQfa6X108ZpUEE8eWk4NOcGx.png"
                            ],
                            "name": "instances",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "# Create an instance of the `Car` class below which should be assigned to the `ferrari` variable: <br>class Car: <br>&nbsp;&nbsp;&nbsp; \"This is an empty class\" <br>&nbsp;&nbsp;&nbsp; pass <br><br>ferrari = {{c1::Car()}}",
                                        "<b>Care()</b> creates a new instance of <b>Car</b>, and that instance is saved to the <b>ferarri</b>&nbsp;variable.<br><br><img src=\"t0EsosG9lW6Gu_rXAX2ppmeOpqZ-wpoTdYy2M35k69uDAORC4j42RWsoOa82aN08lkIhnub-N2Wd_MM4_wQjQ-3p9zjMQfa6X108ZpUEE8eWk4NOcGx.png\">",
                                        "",
                                        "5C899462-2329-4C0B-A328-0AE5D6C54731"
                                    ],
                                    "guid": "uYuJL)T>[D",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "45308da4-06dc-11ec-80f9-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "ZAZeeeD8r7TVQwcWNiBS8FCflJyZ7o-5l2JXucccGjFzoOecppgroGB0dm3G21Lk2IjEcZn6U47o-Gzy4jTUwwYnDDEYOJzjmt8s1k0AudcRumhuwGY.png"
                            ],
                            "name": "magic methods",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "In Python, the {{c1::__init__()}} magic method is used to initalize a newly created object.",
                                        "<img src=\"ZAZeeeD8r7TVQwcWNiBS8FCflJyZ7o-5l2JXucccGjFzoOecppgroGB0dm3G21Lk2IjEcZn6U47o-Gzy4jTUwwYnDDEYOJzjmt8s1k0AudcRumhuwGY.png\">",
                                        "",
                                        "214C0198-C449-48BC-8947-D1B92450C1F0"
                                    ],
                                    "guid": "s)ke4$)#Ry",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "What method of a class is called every time the class is instantiated?",
                                        "__init__()",
                                        "# example: <br>class Example: <br>&nbsp; &nbsp; def __init__(self): <br>&nbsp; &nbsp; &nbsp; &nbsp; print(\"Hello World!\") <br><br>x = Example() # prints: Hello World! <br><br># So the __init__() function of the Example class is called when we initialized it.",
                                        "",
                                        "8D351BC9-D23E-41B5-A03E-F1BA0C50BABE"
                                    ],
                                    "guid": "M1VuKM=A6`",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f05433b4-06de-11ec-9e1c-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "1waCYUdPsLlK2U3tMo7OORxEIg5t-pHf_zH3SH0maoxlDNoaPpB3BsSv_G4vGQyO8FE828l_ZVASqFnVpIIKQEHen6sbnOBF1Z-ue4v1QPGGNEfBYOw.png",
                                "9j5GqasfSfe9WMjbedY6urQ84ykdgkiFmV5OlkaUbM9N8QnBEAa0O-dWFwRtCP_ACWsJNNZiYwBlpas7utNCYNCgGCOmDyTleywlAZFismas4jDk5Tz.png",
                                "kFY1I87vEUC79r39S4T2MhC5tNAC9NfFNnEJdrcNlkXEQNHtMCNLBrbo3RJ3C9pSCMvM9aIy-eI55tYckBbsG9-OBl570HekSjXOZNhCNNtxvj4bZYr.png"
                            ],
                            "mid": 1629301724971,
                            "name": "methods",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<img src=\"1waCYUdPsLlK2U3tMo7OORxEIg5t-pHf_zH3SH0maoxlDNoaPpB3BsSv_G4vGQyO8FE828l_ZVASqFnVpIIKQEHen6sbnOBF1Z-ue4v1QPGGNEfBYOw.png\">",
                                        "<img src=\"9j5GqasfSfe9WMjbedY6urQ84ykdgkiFmV5OlkaUbM9N8QnBEAa0O-dWFwRtCP_ACWsJNNZiYwBlpas7utNCYNCgGCOmDyTleywlAZFismas4jDk5Tz.png\">",
                                        "The first argument in a method is always the object that is calling the method. Convention recommends that we name this first argument self. Methods always have at least this one argument.<br><br><span style=\"color: unset; font-style: unset; font-weight: unset; background-color: unset; text-decoration-line: unset;\"># Example\n<br>class Example:\n<br>&nbsp; &nbsp; def __init__(self, a):\n<br>&nbsp; &nbsp; &nbsp; &nbsp; self.a = a\n<br>&nbsp; &nbsp;<br>&nbsp; &nbsp; def test(self):\n<br>&nbsp; &nbsp; &nbsp; &nbsp; print(self.a)\n<br><br>x = Example(1)\n<br>x.test() # prints 1</span>",
                                        "",
                                        "D5B59AD1-17CA-444E-82E6-A9B3CEBE8CFB"
                                    ],
                                    "guid": "jR0wxu`?u{",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "In Python, {{c1::methods}} are functions that are defined as part of a class.",
                                        "<img src=\"kFY1I87vEUC79r39S4T2MhC5tNAC9NfFNnEJdrcNlkXEQNHtMCNLBrbo3RJ3C9pSCMvM9aIy-eI55tYckBbsG9-OBl570HekSjXOZNhCNNtxvj4bZYr.png\">",
                                        "",
                                        "85991229-E211-4CA4-A156-7942A16BE046"
                                    ],
                                    "guid": "K1W=9;dgyw",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        }
                    ],
                    "crowdanki_uuid": "453076e8-06dc-11ec-80f9-3e22fb2860fe",
                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [],
                    "name": "classes",
                    "notes": []
                },
                {
                    "__type__": "Deck",
                    "children": [
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "42fabbd8-004a-11ec-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "output",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "if True:\n<br>&nbsp; &nbsp; print(\"A\")\n<br>if&nbsp;False:&nbsp;<br>&nbsp; &nbsp; print(\"B\")\n<br>print(\"C\")",
                                        "A<br>C",
                                        "`C` gets printed no matter what because it is not indented inside any `if` statement. only `A` and `B` are printed conditionally based on what the boolean expression the `if` statement evaluates to.<br><br># Also, realize that the code above is basically the same as:<br><br>if 1 == 1:<br>&nbsp; &nbsp; print(\"A\")<br>if 1 == 2:<br>&nbsp; &nbsp; print(\"B\")<br>print(\"C\")<br><br># The code directly above turns into:<br>if True:&nbsp;<br>&nbsp; &nbsp; print(\"A\")&nbsp;<br>if&nbsp;False:&nbsp;<br>&nbsp; &nbsp; print(\"B\")&nbsp;<br>print(\"C\")<br><br># Because the boolean expression <b>1 == 1</b>&nbsp;and <b>1 == 2</b>&nbsp;evaluate into a boolean which equal True or False.<br><br>print(1 == 1) # prints True<br>print(1 == 2) # prints False",
                                        "",
                                        "0d84db6c-bf2e-474f-b85d-66fc99ce0f2a"
                                    ],
                                    "guid": "zM;CXX;X2:",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "if True:\n<br>&nbsp; &nbsp; print(\"A\")\n<br>else:\n<br>&nbsp; &nbsp; print(\"B\")",
                                        "A",
                                        "",
                                        "",
                                        "59c4e8c8-d259-48e7-860d-80925ecd7cfb"
                                    ],
                                    "guid": "tv-vxL0x|x",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "if&nbsp;False:&nbsp;<br>&nbsp; &nbsp; print(\"A\")&nbsp;<br>else:&nbsp;<br>&nbsp; &nbsp; print(\"B\")",
                                        "B",
                                        "",
                                        "",
                                        "498cb28e-83ff-49d9-8cda-0e67ae2c1eab"
                                    ],
                                    "guid": "Lh72c1;U#8",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "if False:\n<br>&nbsp; &nbsp; print(\"A\")\n<br>elif True:\n<br>&nbsp; &nbsp;&nbsp;print(\"B\")",
                                        "B",
                                        "",
                                        "",
                                        "14769415-ffe6-4e5f-9fca-b2acbca1ad71"
                                    ],
                                    "guid": "z=[gl*.(n|",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "if False:&nbsp;<br>&nbsp; &nbsp; print(\"A\")&nbsp;<br>elif True:&nbsp;<br>&nbsp; &nbsp;&nbsp;print(\"B\")<br>else:<br>&nbsp; &nbsp; print(\"C\")",
                                        "B",
                                        "The blocks of code within if, elif, and else statements are mutually exclusive.<br><br><b>elif</b> always has to come after another <b>if </b>or <b>elif </b>statement, and will only execute if the previous <b>if </b>or <b>elif</b>&nbsp;statement evaluated to <b>False</b>. Same with the <b>else</b> statement. The <b>else</b> statement doesn't execute because the previous <b>elif</b>&nbsp;statement evaluated to <b>True</b>, not <b>False</b>.",
                                        "",
                                        "4161a521-f003-47fb-9f46-0b51fe35bfcb"
                                    ],
                                    "guid": "ETL{V!(@Ao",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "if False:&nbsp;<br>&nbsp; &nbsp; print(\"A\")&nbsp;<br>elif False:&nbsp;<br>&nbsp; &nbsp;&nbsp;print(\"B\")<br>else:<br>&nbsp; &nbsp; print(\"C\")",
                                        "C",
                                        "",
                                        "",
                                        "b4fb237b-225d-4def-897b-b6b46416159b"
                                    ],
                                    "guid": "wq%n*<-Xj[",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "listA = [1, 2, 3]\n<br>listA + [4, 5, 6]\n<br>print(listA)",
                                        "[1, 2, 3]",
                                        "`listA + [4, 5, 6]` does not modify listA, instead it returns a new list that contains the elements of the lists being added together, demonstration:<br><br>```<br>listA = [1, 2, 3]\n<br>listB = listA + [4, 5, 6]\n<br>print(listA)\n<br>print(listB)<br>```<br><br>ouput:<br>```<br>[1, 2, 3]\n<br>[1, 2, 3, 4, 5, 6]<br>```",
                                        "",
                                        "ddd92098-28a4-44d1-a347-2d962d007af0"
                                    ],
                                    "guid": "d/{7vKf}qZ",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "46c03276-ffe0-11eb-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "467AGnY6M1UO9FOAweD6y4ykuFWyO9RvCMUnMC6XkFiSGPODYyhOT48Ha9BFK7nl69Pt-7KIwtQvPBDWbOhEN2XMC-hxPDuj82vOKH_tOipNo1v4dKU.png",
                                "LBFykoHXOySsUyfqcrE3xBB7fAohbBFYv8hNLpDSsXRvB_esvdexiJ36Rz-7fBjnlo-ikb6RcadrFoG5iMmk2JZTwbqWZP6cjYIMF62qmS2XpyCRgnK.png",
                                "mclIg-zOYABsHq7n1lmDQKB4SS5epQBx8bqX6st7eCw8ARCnbio_Rr54b6o1ClZWMKP6z7v_qE4vtYo-jtNFu47pOUUArSDDLZ4Q7shkw4kHjLw-HF1.png"
                            ],
                            "name": "syntax",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "The Python {{c1::if}} statement determines the execution of code based on the evaluation of a Boolean expression.<br><br>example:<br><br>num = 10<br>{{c1::if}} num == 10:<br>&nbsp; &nbsp; print(\"num equals ten\")<br>else:<br>&nbsp; &nbsp; print(\"num does not equal ten\")",
                                        "<img src=\"LBFykoHXOySsUyfqcrE3xBB7fAohbBFYv8hNLpDSsXRvB_esvdexiJ36Rz-7fBjnlo-ikb6RcadrFoG5iMmk2JZTwbqWZP6cjYIMF62qmS2XpyCRgnK.png\">",
                                        "",
                                        "43632892-5A88-4840-9B46-EC98AEF72223"
                                    ],
                                    "guid": "f]NFP)^!+;",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "How to code an if statement?",
                                        "if boolean_expression:<br>&nbsp; &nbsp; print()",
                                        "# example:<br>if True:<br>&nbsp; &nbsp; print(\"TRUE!\")<br><br>The colon : comes after the boolean expression, and the code to be executed based on that boolean expression should be indented after the if statement.<br><br>if [boolean]:<br>&nbsp; &nbsp; [code block]",
                                        "",
                                        "ccb981dc-5fea-4e63-877a-4b5ee574d36d"
                                    ],
                                    "guid": "O,]wAVhX`e",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "The {{c1::else}} statement provides alternate code to execute if the expression in an `if` statement evaluates to `False`.<br><br># example:<br>if False:<br>&nbsp; &nbsp; print(\"This won't print\")<br>{{c1::else}}:<br>&nbsp; &nbsp; print(\"This will print though\")",
                                        "<img src=\"467AGnY6M1UO9FOAweD6y4ykuFWyO9RvCMUnMC6XkFiSGPODYyhOT48Ha9BFK7nl69Pt-7KIwtQvPBDWbOhEN2XMC-hxPDuj82vOKH_tOipNo1v4dKU.png\">",
                                        "",
                                        "2CC95ABC-272D-4A72-A39C-F63B93BE7143"
                                    ],
                                    "guid": "h11%p)+?H8",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "add an else statement to the following code:<br><br>if False:<br>&nbsp; &nbsp; print(\"This won't print\")",
                                        "if False:<br>&nbsp; &nbsp; print(\"This won't print\")<br><b>else:</b><br>&nbsp; &nbsp; # whatever indented code goes here will execute",
                                        "",
                                        "",
                                        "f4498f51-8864-4307-aa11-4e9d91266b69"
                                    ],
                                    "guid": "nJ:2C#G;?X",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "The Python {{c1::elif}} statement allows for continued checks to be performed after an initial `if` statement.",
                                        "<img src=\"mclIg-zOYABsHq7n1lmDQKB4SS5epQBx8bqX6st7eCw8ARCnbio_Rr54b6o1ClZWMKP6z7v_qE4vtYo-jtNFu47pOUUArSDDLZ4Q7shkw4kHjLw-HF1.png\">",
                                        "",
                                        "43F4A04F-CBF5-4578-833F-467BC3983DEF"
                                    ],
                                    "guid": "i<ssCy3.f2",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        }
                    ],
                    "crowdanki_uuid": "46bea992-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [],
                    "name": "conditionals",
                    "notes": []
                },
                {
                    "__type__": "Deck",
                    "children": [
                        {
                            "__type__": "Deck",
                            "children": [
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "e1b4bdc6-061e-11ec-9185-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "mid": 1629301724971,
                                    "name": "accessing",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<span style=\"color: rgb(35, 39, 53);\"># What is the output of the code below?\n<br>data = {'a':1, 'b':2, 'c':3}\n<br>print(data['a'])</span>",
                                                "1",
                                                "Creating a dictionary and reading a value",
                                                "",
                                                "DDE0235C-180C-4EBE-A362-0F0CF3B6CE50"
                                            ],
                                            "guid": "x-wIEaML%$",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "# What is the output of the code below?\n<br>my_dictionary = {\"A\": 1}\n<br>print(my_dictionary[\"B\"])",
                                                "error",
                                                "KeyError: 'B' <br>Attempting to access a value with a key that does not exist will cause a KeyError. <br>You cannot access key value pairs that do not exist in dictionaries. Don't confuse this with assigning a new key value pair to a dictionary. Assigning new key value pairs to a dictionary is allowed, but not accessing one that doesn't exist.",
                                                "",
                                                "8AA6A869-9479-4DF7-A766-8DA6A4318D39"
                                            ],
                                            "guid": "bLl:O]&bk;",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "# Print the number 2 from the dictionary below\n<br>my_dictionary = {\"A\": 1, \"B\": 2}\n<br>print({{c1::my_dictionary[\"B\"]}}) # prints: 2",
                                                "Values in a Python dictionary can be accessed by placing the key within square brackets next to the dictionary.",
                                                "",
                                                "8A355FAD-9FE4-4A29-AB37-BB78E4AA0363"
                                            ],
                                            "guid": "H>,D+?K.`Z",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "e1b4e2d8-061e-11ec-9185-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "ytkVJpbHDFXKSHE_BosG7MTUISrl0-D5Vdcuc04V0g0I-awXHksfGFrn0TMJ2xGfFIp6yx0AwUo2SYicuhRdDE3fXH3KYYVXmMIkR9g9yUIjYhB3lRd.png"
                                    ],
                                    "mid": 1629300492637,
                                    "name": "general",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "A python {{c1::dictionary}} is an unordered collection of items. It contains data as a set of key: value pairs.",
                                                "<img src=\"ytkVJpbHDFXKSHE_BosG7MTUISrl0-D5Vdcuc04V0g0I-awXHksfGFrn0TMJ2xGfFIp6yx0AwUo2SYicuhRdDE3fXH3KYYVXmMIkR9g9yUIjYhB3lRd.png\">",
                                                "",
                                                "4FB0994D-81E2-4FFA-9218-99F49F2CFBAE"
                                            ],
                                            "guid": "Fx:#l++=~I",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "e1b500ec-061e-11ec-9185-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "in keyword",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "Define a function named <b>has_key</b> that takes in two arguments, <b>key</b>&nbsp;and <b>dictionary</b>. This function should return a boolean indicating whether or not the <b>dictionary</b> contains&nbsp;<b>key </b>as a key. If <b>dictionary</b> contains <b>key</b> as a key, the function should return <b>True</b>, else <b>False</b>.",
                                                "<b>Example 1:<br>input: </b>dictionary = {1: 2}, key = 1<br><b>output: </b>True<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>dictionary = {1: 2}, key = 2<b><br>output: </b>False<br><br><b>Example 3:</b><br><b>input:&nbsp;</b>dictionary = {1: 2}, key = \"a\"<b><br>output: </b>False",
                                                "def has_key(dictionary, key):",
                                                "print(has_key({1: 2}, 1))<br># should print: True<br>print(has_key({1: 2}, 2))<br># should print: False<br>print(has_key({1: 2}, \"a\"))<br># should print: False",
                                                "",
                                                "",
                                                "def has_key(dictionary, key): <br>&nbsp; &nbsp; return key in dictionary",
                                                "<span style=\"color: rgb(35, 39, 53);\"># some code snippets to help you understand:\n<br>dictionary = {\"a\": 1}\n<br>print(\"a\" in dictionary) # prints: True\n<br>print(\"b\" in dictionary) # prints: False\n<br>print(1 in dictionary) # prints: False\n<br># The last print statement returns False because the `X in dictionary` syntax only checks if `X` is a key of `dictionary`, not a value.</span>",
                                                "",
                                                "D5C5AC75-C9CB-45B4-98B0-F172EDC48376"
                                            ],
                                            "guid": "Rh/nHaccj^",
                                            "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<span style=\"color: rgb(35, 39, 53);\"># What is the output of the code below?\n<br>x = {\"a\": 1}\n<br>print(\"a\" in x)</span>",
                                                "True",
                                                "",
                                                "",
                                                "988916EC-65A7-4613-A7B7-5904150D4A40"
                                            ],
                                            "guid": "hO3<-mLWyq",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "# What is the output of the code below? <br>x = {\"a\": 1} <br>print(\"b\" in x)",
                                                "False",
                                                "",
                                                "",
                                                "4AA7A76F-666D-45F4-8730-E7FCB6991E16"
                                            ],
                                            "guid": "q9K+(c#dx?",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "e1b52572-061e-11ec-9185-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "5-q-ee4xoCIhupJdt1c4jmcdjUxIsKIzlS0Q-717x7YBiAyZ0t77FudHKlDPHQu7zscDRPpn5dx0_yOe_tmpLdJ8cjDSLwDFbzmd9wwcMsIwlDmvuaT.png",
                                        "SGV1TZ1ubCxN32ENxx1onHYdpBixfzhWofhB2ZA8Wc7d15ci0kMep3iqOJ9lwWT3eT9dy4kTq_FnFRDkXxlkucYdhnOmshO8KDZ-OQJxEKrOYE_2LBz.png",
                                        "YsuraYoPzf6_nNSOySvKXoNLDqOxPHTQcBcEUcHzQkHOUv533r-DUO64L09RXkEZZWGnaK0n6V-DBTGruE11meTFR7BKhsOkG8PVDBlFtqSE4SlETjV.png",
                                        "Z31BbV_Bp86hSjjlq09ywWux8RTAa08JFgiQKtRB9Q-yf-MrpoAjb4rKIY-SL4YbFuFLO_NfdeRw-DClLM7lB1lkTx0ervPMzYhsBVfa1nbzebfL7aa.png",
                                        "rQwj1Ypk86Mk3Q0ThHmAe8QJu41mpCf3fswrqfp2cuEIvXugUEOSy7lnmgyP3wvYb207Zl95Vy9gUtLztQPCGa6R4V5KnXcVWivXX9OBuHFOa0mZAMh.png"
                                    ],
                                    "name": "keys",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"SGV1TZ1ubCxN32ENxx1onHYdpBixfzhWofhB2ZA8Wc7d15ci0kMep3iqOJ9lwWT3eT9dy4kTq_FnFRDkXxlkucYdhnOmshO8KDZ-OQJxEKrOYE_2LBz.png\">",
                                                "<img src=\"YsuraYoPzf6_nNSOySvKXoNLDqOxPHTQcBcEUcHzQkHOUv533r-DUO64L09RXkEZZWGnaK0n6V-DBTGruE11meTFR7BKhsOkG8PVDBlFtqSE4SlETjV.png\">",
                                                "",
                                                "",
                                                "9F90EA15-D5D4-4D78-A7AC-1C2C177C738A"
                                            ],
                                            "guid": "HWV*/f;%Xk",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"rQwj1Ypk86Mk3Q0ThHmAe8QJu41mpCf3fswrqfp2cuEIvXugUEOSy7lnmgyP3wvYb207Zl95Vy9gUtLztQPCGa6R4V5KnXcVWivXX9OBuHFOa0mZAMh.png\">",
                                                "<img src=\"5-q-ee4xoCIhupJdt1c4jmcdjUxIsKIzlS0Q-717x7YBiAyZ0t77FudHKlDPHQu7zscDRPpn5dx0_yOe_tmpLdJ8cjDSLwDFbzmd9wwcMsIwlDmvuaT.png\">",
                                                "",
                                                "",
                                                "9F1CCC5C-D4AC-4837-9153-3F9BECF39AA0"
                                            ],
                                            "guid": "vY,pv>Ag1x",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "What can be used as a key (in regards to {key:value} pairs) in python dictionaries?",
                                                "only immutable data types",
                                                "such as strings, numbers, and tuples. anything that is mutable such as dictionaries or lists cannot be used.<br><br><img src=\"Z31BbV_Bp86hSjjlq09ywWux8RTAa08JFgiQKtRB9Q-yf-MrpoAjb4rKIY-SL4YbFuFLO_NfdeRw-DClLM7lB1lkTx0ervPMzYhsBVfa1nbzebfL7aa.png\">",
                                                "",
                                                "64163E94-CE53-4243-B100-92FF16C3B3BD"
                                            ],
                                            "guid": "cK2PWalwNo",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "e1b565d2-061e-11ec-9185-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "am2XOED39Wdv5RVnr9QFIahXyF7yNxHFxWgtTXyy53nw23dtppT1djuL3l8Dhd5oLId5JbK-b8mcV7bFv5_r-JADmiVijpxCcA5ceV_anH2sZx_A4Kf.png"
                                            ],
                                            "mid": 1629301724971,
                                            "name": "get",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<span style=\"color: rgb(35, 39, 53);\"># What is the output of the code below?\n<br>x = {\"a\": 1}\n<br>print(x.get(\"a\", 999))</span>",
                                                        "999",
                                                        "The value associated wth \"a\" is 1.",
                                                        "",
                                                        "88E2F1CF-FA56-432E-8068-2FE0C270401B"
                                                    ],
                                                    "guid": "G?kDUnQ#[h",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# What is the output of the code below?\n<br>x = {\"a\": 1}\n<br>print(x.get(\"b\", 999))",
                                                        "999",
                                                        "There is no key \"b\" in this dictionary, so the default provided to the .get() function, 999, will be printed.",
                                                        "",
                                                        "88B1F6C9-5860-476F-B1BA-E088013F6AD3"
                                                    ],
                                                    "guid": "rQtC&p:H}0",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "Python provides a {{c1::.get()}} method to access a dictionary value if it exists. This method takes the key as the first argument and an optional default value as the second argument, and it returns the value for the specified key if key is in the dictionary. If the second argument is not specified and key is not found then None is returned.",
                                                        "<img src=\"am2XOED39Wdv5RVnr9QFIahXyF7yNxHFxWgtTXyy53nw23dtppT1djuL3l8Dhd5oLId5JbK-b8mcV7bFv5_r-JADmiVijpxCcA5ceV_anH2sZx_A4Kf.png\">",
                                                        "",
                                                        "E50354BC-F05D-43F1-8BCF-55812DC10CA9"
                                                    ],
                                                    "guid": "P%^/OExuah",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "e1b58ac6-061e-11ec-9185-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [],
                                            "mid": 1629301724971,
                                            "name": "items",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# print a list of all the key value pairs in the dictionary below\n<br>my_dictionary = {\"A\": 1, \"B\": 2, \"C\": 3}\n<br>print(list({{c1::my_dictionary.items()}})) # prints: [(\"A\", 1), (\"B\", 2), (\"C\", 3)]",
                                                        "<div>The .items() dictionary method returns a view object that displays a list of the key-value pairs as a tuple. <br><br></div><div> we use the list() function to turn the view object into a list, but we don't need to turn it into a list if we wanted to loop through it.&nbsp;</div>",
                                                        "",
                                                        "909CB9D6-B8B0-4A2F-8D27-C644EAEB0B09"
                                                    ],
                                                    "guid": "iqd890a7#o",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "e1b5a86c-061e-11ec-9185-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [],
                                            "name": "keys",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# print a list of all the keys in the dictionary below\n<br>my_dictionary = {\"A\": 1, \"B\": 2, \"C\": 3}\n<br>print(list({{c1::my_dictionary.keys()}})) # prints: [\"A\", \"B\", \"C\"]",
                                                        "The .keys() dictionary method returns view object that displays a list of the keys (the first object in the key-value pair)<br><br>we use the list() function to turn the view object into a list, but we don't need to turn it into a list if we wanted to loop through it.",
                                                        "",
                                                        "370F8787-B2FF-4A45-8A6D-6B6A979376A9"
                                                    ],
                                                    "guid": "i}}jkbIiU#",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "e1b5c5f4-061e-11ec-9185-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "dEKJJqBf6GZBO1yxuznSELWdXgwMJ1awq9TRdzEhOlJ7EdUNKUgNfPpfnDHwlFzlBaXZJdLyA6j4zflwMPBGeBIg0J8rK-SCBl0H_6bwGiYIs-ZlBJT.png"
                                            ],
                                            "mid": 1629300492637,
                                            "name": "pop",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "Python dictionaries can remove key-value pairs with the {{c1::.pop()}} method",
                                                        "<img src=\"dEKJJqBf6GZBO1yxuznSELWdXgwMJ1awq9TRdzEhOlJ7EdUNKUgNfPpfnDHwlFzlBaXZJdLyA6j4zflwMPBGeBIg0J8rK-SCBl0H_6bwGiYIs-ZlBJT.png\">",
                                                        "",
                                                        "4C220304-CDA9-4E1A-9E42-8C50EB1722D2"
                                                    ],
                                                    "guid": "h6%d=Wnc?W",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# What is the output of the code below?\n<br>dictionary = {\"a\": 1}\n<br>dictionary.pop(\"a\")\n<br>print(dictionary)",
                                                        "{}",
                                                        "<div>We remove the key \"a\" and its associated value with the .pop() method. <br><br></div><div> more details on how the .pop() method works:&nbsp;<a href=\"https://www.javatpoint.com/python-dictionary-pop-method#:~:text=%E2%86%92%20%E2%86%90%20prev-,Python%20Dictionary%20pop()%20Method,it%20throws%20an%20error%20KeyError.\">https://www.javatpoint.com/python-dictionary-pop-method#:~:text=→ ← prev-,Python Dictionary pop() Method,it throws an error KeyError.</a></div>",
                                                        "",
                                                        "08E3EC5C-845E-4D8E-BA62-640FD3FFD69F"
                                                    ],
                                                    "guid": "ox]r[#F?=h",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# mutate the dictionary below to equal an empty dictionary: {} <br>dictionary = {\"example\": 999} <br>print(dictionary) # prints: {\"example\": 999} <br>{{c1::dictionary.pop(\"example\")}} <br>print(dictionary) # should print: {}",
                                                        "<div>We use the .pop method to remove the \"example\" key. </div><div><br>&nbsp;the `del dictionary[\"example\"]` syntax would work too&nbsp;</div>",
                                                        "",
                                                        "8AE11563-CDD1-4DB7-9F76-CA31065A51C1"
                                                    ],
                                                    "guid": "b3AF@r7:Hf",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "e1b5ea3e-061e-11ec-9185-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "rANeCdifpaw7IENpXVMHAXaNWmYnaz2Gno076SN7RSsjoKlN3wM_qLTy0FylhHuDdkE6f8M2pvFjWMk-ja5u3wRJE6HegCEtDqNWva8XWqAAnOCpCuY.png"
                                            ],
                                            "name": "update",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "The {{c1::.update()}} dictionary method allows you to combine two dictionaries into one.",
                                                        "<img src=\"rANeCdifpaw7IENpXVMHAXaNWmYnaz2Gno076SN7RSsjoKlN3wM_qLTy0FylhHuDdkE6f8M2pvFjWMk-ja5u3wRJE6HegCEtDqNWva8XWqAAnOCpCuY.png\">",
                                                        "",
                                                        "7A5B76CC-1390-4705-8A70-5D84C71776D4"
                                                    ],
                                                    "guid": "nOX?pNC%?.",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "e1b6079e-061e-11ec-9185-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [],
                                            "mid": 1629300492637,
                                            "name": "values",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# print a list of all the values in the dictionary below <br>my_dictionary = {\"A\": 1, \"B\": 2, \"C\": 3} <br>print(list({{c1::my_dictionary.values()}})) # prints: [1, 2, 3]",
                                                        "The .values() dictionary method returns a view object that displays a list of the values (the first object in the key-value pair)<br><br>we use the list() function to turn the view object into a list, but we don't need to turn it into a list if we wanted to loop through it.",
                                                        "",
                                                        "92F634C5-8FAF-415E-B27A-89BA3D505710"
                                                    ],
                                                    "guid": "Jd@@Ep6oi,",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# what is the output of the code below? <br>x = {\"a\": 1, \"b\": 2, \"c\": 3} <br>for y in x.values(): <br>&nbsp; &nbsp; print(y)",
                                                        "1<br>2<br>3",
                                                        "",
                                                        "",
                                                        "CD64C4FB-B636-4C76-AC11-E0B543515D85"
                                                    ],
                                                    "guid": "JMI;BG5y9i",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        }
                                    ],
                                    "crowdanki_uuid": "e1b549c6-061e-11ec-9185-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "methods",
                                    "notes": []
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "e1b6297c-061e-11ec-9185-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "mid": 1629300492637,
                                    "name": "mutating",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<span style=\"color: rgb(35, 39, 53);\"># Mutate the dictionary below to equal: {\"A\": 1, \"B\": 2, \"C\": 3}\n<br>my_dictionary = {\"A\": 1, \"B\": 2}\n<br>print(my_dictionary) # prints: {\"A\": 1, \"B\": 2}\n<br>{{c1::my_dictionary[\"C\"] = 3}}\n<br>print(my_dictionary) # prints: {\"A\": 1, \"B\": 2, \"C\": 3}</span>",
                                                "my_dictionary[\"C\"] = 3 creates a new key \"C\", which has a corresponding value of 3.",
                                                "",
                                                "23967BD7-40A1-419F-8A00-37272D28509D"
                                            ],
                                            "guid": "P_x`)m91rU",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "# Mutate the dictionary below to equal: {\"A\": 1, \"B\": 999}\n<br>my_dictionary = {\"A\": 1, \"B\": 2}\n<br>print(my_dictionary) # prints: {\"A\": 1, \"B\": 2}\n<br>{{c1::my_dictionary[\"B\"] = 999}}\n<br>print(my_dictionary) # prints: {\"A\": 1, \"B\": 999}",
                                                "<div>Note that just reassigning my_dictionary to equal {\"A\": 1, \"B\": 999} does not mutate the original dictionary, it simply creates a new one, and the question asked to mutate it. <br><br></div><div> Values can be written by placing key within square brackets next to the dictionary and using the assignment operator (=). If the key already exists, the old value will be overwritten&nbsp;</div>",
                                                "",
                                                "9DB3EF19-C995-4C3E-ADAE-14A4294E89E1"
                                            ],
                                            "guid": "Q~RVi;vIt&",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "# What is the output of the code below? <br>data = {'a':1} <br>data['a'] = 4 <br>print(data)",
                                                "{'a': 4}",
                                                "data['a'] = 4  updates the key a  to value 4&nbsp;",
                                                "",
                                                "446870C6-6E43-4421-8487-A0BB602CBE4F"
                                            ],
                                            "guid": "Alz20|3%Y@",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "# What is the output of the code below? <br>data = {} <br>data['a'] = 1 <br>print(data)",
                                                "{'a': 1}",
                                                "the 'a' key is created.",
                                                "",
                                                "BB984562-DD00-409F-A393-F368298E846D"
                                            ],
                                            "guid": "x=t1lCUkU0",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "# What is the output of the code below? <br>data = {'a':1} <br>data[0] = 2 <br>print(data)",
                                                "{'a': 1, 0: 2}",
                                                "Integers can serve as dictionary keywords. If no keyword exists, a new one is created.",
                                                "",
                                                "06246DC8-0129-4A33-A3C3-265688382A1B"
                                            ],
                                            "guid": "DDYRd85ibB",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "e1b65262-061e-11ec-9185-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "6Byz3jzAX0i-bYwIJdAEFhP_Ksth6r-AoWByYKuU74IzC5lZhnqMHyC9pMCvTQMltPifD9KL7oQCHu3V9-ufXge-5MDhgYFXcA9SifwHOIbuulWWg8p.png",
                                        "FHlQRnEJRNa7Kg5nTrOQ-Vb8jsNDwDCwJMdZDLhcChUmaEAHnJvcLEJRjEyBuHFBaQ3vqtST4XXFbOqu3Jv7wp49ulepVWt_blSRR2527IUMCan2UG0.png",
                                        "kl_iL4LLT7sB-mDX0Fc0YOL3beXO9BGlCUO7puI3_xqgp3kQ6xqZph8i_PjaRwajdUtUHiJLZw8wLW23EYgMycUYuD9wt7kHYlRL12twbx2ZFjPdXtZ.png",
                                        "njSF03Rl2iVaVRjoTTiNzCW9MuAXj1om-Qin9rfd74cctwKctQaTtU6c5Zg0d-7DEbCwTfwAIzwd-MZWChGM-AuHOG3TY0tDkxyVSyBZ-GEA3t69jWJ.png",
                                        "rmRHadpFmHdqn0RdorcnnXGKE1PdWKZS8-Yy40fFoWlVqH8Gz4aloTNRCneZDdY3zbd-ZKZwUVunV0H8Nfq1_tLeiSrBcImPliWHTfBwmhKljlIMrf_.png"
                                    ],
                                    "name": "syntax",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"rmRHadpFmHdqn0RdorcnnXGKE1PdWKZS8-Yy40fFoWlVqH8Gz4aloTNRCneZDdY3zbd-ZKZwUVunV0H8Nfq1_tLeiSrBcImPliWHTfBwmhKljlIMrf_.png\">",
                                                "<img src=\"kl_iL4LLT7sB-mDX0Fc0YOL3beXO9BGlCUO7puI3_xqgp3kQ6xqZph8i_PjaRwajdUtUHiJLZw8wLW23EYgMycUYuD9wt7kHYlRL12twbx2ZFjPdXtZ.png\">",
                                                "",
                                                "",
                                                "2C631936-86C3-4BC5-ADD1-D6C2108CFF16"
                                            ],
                                            "guid": "Ox2.I5n7nY",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "What is the syntax to declare a python dictionary?",
                                                "example = {\"key1\": \"value1\", \"key2\": \"value2\"}",
                                                "<img src=\"FHlQRnEJRNa7Kg5nTrOQ-Vb8jsNDwDCwJMdZDLhcChUmaEAHnJvcLEJRjEyBuHFBaQ3vqtST4XXFbOqu3Jv7wp49ulepVWt_blSRR2527IUMCan2UG0.png\">",
                                                "",
                                                "79295F9E-9F8B-43DD-BA43-86F892757522"
                                            ],
                                            "guid": "EiHGXK@K7q",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"njSF03Rl2iVaVRjoTTiNzCW9MuAXj1om-Qin9rfd74cctwKctQaTtU6c5Zg0d-7DEbCwTfwAIzwd-MZWChGM-AuHOG3TY0tDkxyVSyBZ-GEA3t69jWJ.png\">",
                                                "<img src=\"6Byz3jzAX0i-bYwIJdAEFhP_Ksth6r-AoWByYKuU74IzC5lZhnqMHyC9pMCvTQMltPifD9KL7oQCHu3V9-ufXge-5MDhgYFXcA9SifwHOIbuulWWg8p.png\">",
                                                "",
                                                "",
                                                "416E8DEF-C29D-45C2-8C22-09A454462370"
                                            ],
                                            "guid": "ckr>^%>gzH",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "e1b675c6-061e-11ec-9185-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "gc6Wz5xFMgEuW-G4XYPF5_JckuSxefleQeHduBiZGE0OyfKQzSjVQXZ9MDn-1Uxl7trOq4twRvCEz5JqgZjwykZ7VfE9X8P2Af_V_1m7zGdAU25bzxS.png"
                                    ],
                                    "name": "values",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "What can be used as a value (in regards to {key:value} pairs) in python dictionaries?",
                                                "anything",
                                                "Python allows the values in a dictionary to be any type – string, integer, a list, another dictionary, boolean, etc.<br><br>Notice how the values of the dictionary below range range from numbers to strings, to booleans, to lists, to other dictionaries, it can be anything!<br><br><img src=\"gc6Wz5xFMgEuW-G4XYPF5_JckuSxefleQeHduBiZGE0OyfKQzSjVQXZ9MDn-1Uxl7trOq4twRvCEz5JqgZjwykZ7VfE9X8P2Af_V_1m7zGdAU25bzxS.png\">",
                                                "",
                                                ""
                                            ],
                                            "guid": "zvZQuKXwMj",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                }
                            ],
                            "crowdanki_uuid": "ea1f70b0-0618-11ec-9b0c-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "dictionaries",
                            "notes": []
                        },
                        {
                            "__type__": "Deck",
                            "children": [
                                {
                                    "__type__": "Deck",
                                    "children": [
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "02d0b2ac-1f48-11ec-b9c6-acde48001122",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [],
                                            "name": "big O",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<div># What is the time complexity of accessing an element from a list like so?:</div>\n<div><br>def fn(my_list):</div>\n<div>&nbsp; &nbsp; first_element = my_list[0] # what is the time complexity of this operation?</div>",
                                                        "<div>O(1)</div>",
                                                        "<div>It's constant time complexity because retrieving the element from a list when we know it's exact index takes constant time.</div>",
                                                        "",
                                                        "0C53DF8E-A531-4EA0-8577-FDCADA05371D"
                                                    ],
                                                    "guid": "x@|d=&{kWC",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89ddd22-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [],
                                            "name": "output",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "print( [1,2,3][0] )",
                                                        "1",
                                                        "it prints the first element",
                                                        "",
                                                        "EF5187EF-2CF6-401D-B8AB-60218E03D97B"
                                                    ],
                                                    "guid": "gxlGJqqeU^",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "print( [1,2,3][-1] )",
                                                        "3",
                                                        "it prints the last element",
                                                        "",
                                                        "46819823-6D77-4B3B-B98B-9991E6545578"
                                                    ],
                                                    "guid": "vj6Z=E.aQV",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89e0c02-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "paste-056241f1f011a2ef68a3cea239d0ae4a97383860.jpg",
                                                "ql9Pa0ytTql7OCPaQ_nIvKWE0rqgZ1P9ButD0vSAXTvCYalYtwx2prT2_HilJkhR1RG6jLKPhof96kJdo6mtCPFO4iyxVCp5lTI2r107yMypLShMMG3.png",
                                                "xBgO4NYTeXFEXaRpVsGeNMW5L4kbV9P6KAlj3zArKJ44YYeFYxS0QU3D6vc9UntKGzACsXA3NAMfC9QMlOSZvyrvlNnWyZPx504SJWqws6Rh6xjkAeG.png",
                                                "yWk-VEbo6mk_bfP2vKVoKVTdX7TqJJ61-Y8muXWFsAWDEtrIxF0qV6qZZIIDmo37FqJDt31vXtNdWzpYYQXkPzJKHC786ugEENom_jBe_3hSAHyU5Lp.png"
                                            ],
                                            "name": "syntax",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "Syntax to access a list element by index?",
                                                        "list[index]",
                                                        "<img src=\"xBgO4NYTeXFEXaRpVsGeNMW5L4kbV9P6KAlj3zArKJ44YYeFYxS0QU3D6vc9UntKGzACsXA3NAMfC9QMlOSZvyrvlNnWyZPx504SJWqws6Rh6xjkAeG.png\"><br><img src=\"yWk-VEbo6mk_bfP2vKVoKVTdX7TqJJ61-Y8muXWFsAWDEtrIxF0qV6qZZIIDmo37FqJDt31vXtNdWzpYYQXkPzJKHC786ugEENom_jBe_3hSAHyU5Lp.png\">",
                                                        "",
                                                        "ca78c7de-bb10-41ed-82fb-94267c601df6"
                                                    ],
                                                    "guid": "sGO&)hIu!G",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "Syntax to access the last element of a list?",
                                                        "list[-1]",
                                                        "",
                                                        "",
                                                        "351c630e-ef4f-4297-8e94-6802dffd97ca"
                                                    ],
                                                    "guid": "IpV&7[8(}z",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "Syntax to access the first element of a list?",
                                                        "list[0]",
                                                        "Demonstration:<br><br>```<br>my_list = [1, 2, 3]<br>one = my_list[0]<br>print(one)<br>```<br>output:<br>```<br>1<br>```",
                                                        "",
                                                        "a48c09ed-f4a4-4d08-b280-ed11089fed14"
                                                    ],
                                                    "guid": "LijdgoB|an",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# Syntax to access the number 6 from the matrix below?<br><br>matrix = [[1,2,3], [4,5,6], [7,8,9]]",
                                                        "matrix[1][2]&nbsp;",
                                                        "<img src=\"ql9Pa0ytTql7OCPaQ_nIvKWE0rqgZ1P9ButD0vSAXTvCYalYtwx2prT2_HilJkhR1RG6jLKPhof96kJdo6mtCPFO4iyxVCp5lTI2r107yMypLShMMG3.png\">",
                                                        "",
                                                        "408a5d20-f85c-4927-86ab-27354791b149"
                                                    ],
                                                    "guid": "D]12I3t}`p",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# Mutate the matrix below to equal [[\"A\", 0], [\"B\", 1]]<br><br>matrix = [[\"A\", 0], [\"B\", 999]]",
                                                        "matrix[1][1] = 1",
                                                        "matrix = [[“A”, 0], [“B”, 999]]<br>print(matrix) # prints [[“A”, 0], [“B”, 999]]<br>matrix[1][1] = 1<br>print(matrix) # prints [[“A”, 0], [“B”, 1]]<br><br><img src=\"paste-056241f1f011a2ef68a3cea239d0ae4a97383860.jpg\">",
                                                        "",
                                                        "224724DF-14B1-4020-B483-3B220358B593"
                                                    ],
                                                    "guid": "iP@/fIMAyl",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        }
                                    ],
                                    "crowdanki_uuid": "c89dc738-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "indexing",
                                    "notes": []
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89e5572-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "JZ7uRjA7vGoire5Qs1sIn9NGqQsMy6m_Y1ip5r0IKgHSUUeIBoI_9mrmGlWnr2J1_kWSHPS8ebNjspn4Ew9TLtH5gBdtqF4ynM2DDG8Ks1gX9pYJrca.png"
                                            ],
                                            "name": "append",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "Syntax to add values to the end of a list in Python? (You should mutate the original list)",
                                                        "my_list.append(\"like this\")",
                                                        "<img src=\"JZ7uRjA7vGoire5Qs1sIn9NGqQsMy6m_Y1ip5r0IKgHSUUeIBoI_9mrmGlWnr2J1_kWSHPS8ebNjspn4Ew9TLtH5gBdtqF4ynM2DDG8Ks1gX9pYJrca.png\">",
                                                        "",
                                                        "32b96979-a538-46da-a0d5-2321d331bd6f"
                                                    ],
                                                    "guid": "tV+p6D!<HY",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "x = [0, 1, 2]\n<br>x.append(3)\n<br>print(x)",
                                                        "[0, 1, 2, 3]&nbsp;",
                                                        "append  method adds a single element to the end of the list",
                                                        "",
                                                        "39d8b4fa-1d2c-4d00-bd57-5c716042d29c"
                                                    ],
                                                    "guid": "cf9_-WjGV/",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "x = [0, 1, 2]\n<br>x.append([3, 4])\n<br>print(x)\n<br>print(x[3])",
                                                        "[0, 1, 2, [3, 4]]\n<br>[3, 4]",
                                                        "append method always adds a single element to a list",
                                                        "",
                                                        "48486e2c-b0b9-4c60-80e1-40f20ff856af"
                                                    ],
                                                    "guid": "lv*[x`-le~",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<div>What is the time complexity of using the .append() method of lists in Python?</div>",
                                                        "<div>O(1)</div>",
                                                        "<div>Adding an element to the end of a list takes constant time because no re-indexing occurs.</div>",
                                                        "",
                                                        "FF692892-9A78-49AC-AA60-28476C445B2F"
                                                    ],
                                                    "guid": "BGs;xlWD[h",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89e7778-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "60qMNdJcgTgbYHDGPXjrI7F5ADiONOpbfjcudTUKzlLTAW6v9e9B81XvMUGTMWYQW73u5Xp_AIgtib1laefBrj-hxgmMx-jzqjBTU78kwTGaIMLjX90.png",
                                                "E3yeKREgHmvSnq6AX9KtWAtq8JCvDdeTZFGLeIYduDMdSYK7zDFKo1K4xH8LNpDtOEczLRcnzbH5UOC-WZ-z7nhWNb1dRcebpzioY-9gZ03445vqjpS.png",
                                                "N3YSj8c30TvvKdpiLdRddsQakFtNLDVxdgsFNCbeYtKrMjpxFSaPWVUeScE0fqay242oZJrhHjKWqD1ilKXt-oxnDN0YIhYvDfCiXV7A4byFSn1OdKO.png"
                                            ],
                                            "name": "count",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "The {{c1::.count()}}  list method searches a list for whatever search term it receives as an argument, then returns the number of matching entries found.",
                                                        "<img src=\"60qMNdJcgTgbYHDGPXjrI7F5ADiONOpbfjcudTUKzlLTAW6v9e9B81XvMUGTMWYQW73u5Xp_AIgtib1laefBrj-hxgmMx-jzqjBTU78kwTGaIMLjX90.png\">",
                                                        "",
                                                        "78060d9a-9bf6-46bc-9608-3b1f6ec9aaf6"
                                                    ],
                                                    "guid": "~3xHm7gq`",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<img src=\"E3yeKREgHmvSnq6AX9KtWAtq8JCvDdeTZFGLeIYduDMdSYK7zDFKo1K4xH8LNpDtOEczLRcnzbH5UOC-WZ-z7nhWNb1dRcebpzioY-9gZ03445vqjpS.png\">",
                                                        "<img src=\"N3YSj8c30TvvKdpiLdRddsQakFtNLDVxdgsFNCbeYtKrMjpxFSaPWVUeScE0fqay242oZJrhHjKWqD1ilKXt-oxnDN0YIhYvDfCiXV7A4byFSn1OdKO.png\">",
                                                        "",
                                                        "",
                                                        "07a4c424-d32f-4b18-a581-1647965c5a3c"
                                                    ],
                                                    "guid": "O@+r~J0hVx",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89e9726-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "eWS3udz6wLMyg9Vzs6_cYLc7YunorlkzW16UTpVkDK0mR7EciP6aTQ893_sTmD0WwmqHWhVUlcxqDOW2BCPpDr6Zl23p-y7G7UUZMs_h06E84uOWPy1.png"
                                            ],
                                            "name": "insert",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "The {{c1::.insert()}} list method allows us to add an element to a specific index in a list.",
                                                        "",
                                                        "",
                                                        "54ee9552-21f6-4539-b4af-051262f702dd"
                                                    ],
                                                    "guid": "i~#Se{(+7$",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "What inputs does the .insert() method take?",
                                                        "(index, element)",
                                                        "list.insert(0, \"example\")<br><img src=\"eWS3udz6wLMyg9Vzs6_cYLc7YunorlkzW16UTpVkDK0mR7EciP6aTQ893_sTmD0WwmqHWhVUlcxqDOW2BCPpDr6Zl23p-y7G7UUZMs_h06E84uOWPy1.png\">",
                                                        "",
                                                        "24d35e00-f111-4344-be99-ba50eb1e9e65"
                                                    ],
                                                    "guid": "dBv9x@^=;v",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# using a list method, change `mylist` to be [1,2,3,4]&nbsp;<br><br>mylist = [1, 2, 4]",
                                                        "mylist.insert(2, 3)",
                                                        "So now the number 3 is in the 2nd index of the list.<br><br>Before we inserted into the list, the number 4 was in the 2nd index of the list instead.",
                                                        "",
                                                        "151ce7b5-7f01-4f6f-b18d-af96165f7bcb"
                                                    ],
                                                    "guid": "n|mevu^BSq",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<div>What is the time complexity of adding an element to the beginning of a list in Python?</div>",
                                                        "<div>O(n)</div>",
                                                        "<div>It's O(n) because we have to re-index all the elements after adding the element to the beginning.</div>",
                                                        "",
                                                        "8401C0F4-9D43-4F2A-A847-7998E29BF297"
                                                    ],
                                                    "guid": "p=KZ{|%`k0",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89eb652-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "LkycJOcxGBEn_bKfxkkRFk_tYM3sJUmDEGbBK9-oGbmh1yna16L2JgXoMtr1A0PhAr2WDYRqhQlwtug9o8Amxg1QWu0UgZgb3XboUhZUAqErNUe26Iz.png",
                                                "UIYQgHTQB89IRDhHCjv00RRX_NyVgfcvVD2Cz9FwUKaC0B-8640BPeb0rKnmyczUVfqXr_EkOKZFy1DTeCA8Rl7U5kz2S5yPIv12xU8aQzR2HsMQDTz.png",
                                                "gLf_07W4Tudr4ng4kLIA40TRHNlvmpFXfyppFQk7Kz4ut-oWSnEp1EOGR4_m-Lt6gCpcxsbPkKCadOvClXyzuBJPodBhTPffXtBf4doO9vzK-976mC5.png"
                                            ],
                                            "name": "pop",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "The {{c1::.pop()}} list method allows us to remove an element from a list while also returning it. It accepts one optional input which is the index of the element to remove. If no index is provided, then the last element in the list will be removed and returned.",
                                                        "<img src=\"UIYQgHTQB89IRDhHCjv00RRX_NyVgfcvVD2Cz9FwUKaC0B-8640BPeb0rKnmyczUVfqXr_EkOKZFy1DTeCA8Rl7U5kz2S5yPIv12xU8aQzR2HsMQDTz.png\">",
                                                        "",
                                                        "c847bc04-0eea-4ce9-85b1-713d1f5af459"
                                                    ],
                                                    "guid": "Oym.kaD0j<",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "x = [0, 1, 2, 3] <br>y = x.pop() <br>print(x) <br>print(y)",
                                                        "[0, 1, 2]\n<br>3",
                                                        "# pop  method removes a single element from list and returns it. By default, pop removes and returns the last element.<br><br># The reason <b>print(y) </b>doesn't print <b>[0, 1, 2]</b>&nbsp;is because <b>y </b>equals the result of <b>x.pop()</b>. So when we call <b>x.pop()</b>, the last element from <b>x</b> is removed, and that element that was removed is returned from the pop function. So to rewrite the code to be more readable and expressive, we can write it like this:<br><br>my_list = [0, 1, 2, 3]<br>removed_element = my_list.pop()<br>print(my_list) # prints [0, 1, 2]<br>print(removed_element) # prints 3<br><br># if we wanted <b>y </b>to equal <b>[0, 1, 2] </b>instead, we could do something like this:<br>x = [0, 1, 2, 3]&nbsp;<br>x.pop()&nbsp;<br>y = x<br>print(x) # prints&nbsp;&nbsp;[0, 1, 2]&nbsp;<br>print(y) # prints&nbsp;&nbsp;[0, 1, 2]<br><br># Here's one more example that should hopefully clarify how the <b>.pop()</b> method works in python:<br>x = [0, 1, 2]<br>print(x) # prints [0, 1, 2]<br>print(x.pop()) # prints 2<br>print(x) # prints [0, 1]<br><br># Notice how x.pop() returns the element that was removed? That's why when <b>y = x.pop()</b>, it was set to equal the element removed from <b>x</b>, and not <b>x </b>itself.<br><br># Also remember, the <b>.pop()</b>&nbsp;method of lists mutates the list it was called on. So if <b>x = [1, 2, 3]</b>, and then we do: <b>x.pop()</b>, <b>x</b> will now equal <b>[1, 2]</b>, because we mutated <b>x</b>&nbsp;by removing it's last element with the <b>.pop() </b>method.",
                                                        "",
                                                        "957a55d4-1095-44c0-96bd-ae8ee4764e75"
                                                    ],
                                                    "guid": "Q<1{_$?~cd",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<img src=\"LkycJOcxGBEn_bKfxkkRFk_tYM3sJUmDEGbBK9-oGbmh1yna16L2JgXoMtr1A0PhAr2WDYRqhQlwtug9o8Amxg1QWu0UgZgb3XboUhZUAqErNUe26Iz.png\">",
                                                        "<img src=\"gLf_07W4Tudr4ng4kLIA40TRHNlvmpFXfyppFQk7Kz4ut-oWSnEp1EOGR4_m-Lt6gCpcxsbPkKCadOvClXyzuBJPodBhTPffXtBf4doO9vzK-976mC5.png\">",
                                                        "",
                                                        "",
                                                        "c1f92b60-080e-4dce-ac30-cac6dd41391d"
                                                    ],
                                                    "guid": "DpdLF.N//O",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<div>What is the time complexity of popping the <b>last</b> element of a list in Python?</div>",
                                                        "<div>O(1)</div>",
                                                        "<div>removing an element from the end of a list takes constant time because no re-indexing occurs.</div>",
                                                        "",
                                                        "C8AFFFFF-8CBF-4C3C-8BDA-F9697D16A9BC"
                                                    ],
                                                    "guid": "GKw/R9QT6#",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<div>What is the time complexity of popping the <b>first</b> element of a list in Python?</div>",
                                                        "<div>O(n)</div>",
                                                        "<div>It's O(n) because we have to re-index all the elements after the first element after popping the first element.</div>",
                                                        "",
                                                        "8B1CB95D-551B-4AA2-849C-9DE9FB003C87"
                                                    ],
                                                    "guid": "s~^6N=Lw!0",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89ed4e8-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "XNAhF9atQ48AtJuXzQ4eXxB4VumAJQDR3qs4ftu8oc69eBOMfTXV01pW8EDF17YOjT8210foRwhiwAzrqyLSslg5vCBrWwIYs96ncN04Anqc0QmBAxE.png"
                                            ],
                                            "name": "remove",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# Using a list method, delete the number 2 from the list below. <br># Do <b>NOT</b>&nbsp;use the .pop() method, use a different method.<br><br>my_list = [1,2,3]<br><br>",
                                                        "my_list.remove(2)",
                                                        "<img src=\"XNAhF9atQ48AtJuXzQ4eXxB4VumAJQDR3qs4ftu8oc69eBOMfTXV01pW8EDF17YOjT8210foRwhiwAzrqyLSslg5vCBrWwIYs96ncN04Anqc0QmBAxE.png\">",
                                                        "",
                                                        "0261a948-ae86-46ef-8111-8ecb3b59d003"
                                                    ],
                                                    "guid": "kr<3kx!&>{",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "my_list = [1,0,1] <br>my_list.remove(1) <br>print(my_list)",
                                                        "[0, 1]",
                                                        "When using the `.remove()` method In the case where two or more elements in the list have the same value, the first occurrence of the element is removed.",
                                                        "",
                                                        "a2550058-e36b-4c73-812c-dd74033d6b06"
                                                    ],
                                                    "guid": "E&<u{P[vz?",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89ef23e-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "fbjxql5ICKSaPgg3gGizuOF5vqBeB-6MdAu6_l175VXT5k3_E6sCnFQMoSztJWejLF7SsSllSubXd7ZA7IZrxZjuVdBmdfWXtpDHZOppIpA8RuYuGjI.png"
                                            ],
                                            "name": "sort",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "The {{c1::.sort()}}  list method will sort the contents of whatever list it is called on.",
                                                        "<img src=\"fbjxql5ICKSaPgg3gGizuOF5vqBeB-6MdAu6_l175VXT5k3_E6sCnFQMoSztJWejLF7SsSllSubXd7ZA7IZrxZjuVdBmdfWXtpDHZOppIpA8RuYuGjI.png\">",
                                                        "",
                                                        "94bfc52a-1c6e-486e-8ab6-a2e34a34dd97"
                                                    ],
                                                    "guid": "k7nuQ@4{YM",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "my_list = [2, 1, 3] <br>my_list.sort() <br>print(my_list)",
                                                        "[1, 2, 3]",
                                                        "the .sort() method sorts in ascending order by default.",
                                                        "",
                                                        "ea08904b-894e-4201-84f8-674d5a623af0"
                                                    ],
                                                    "guid": "P8K~jM-U7?",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "my_list = [\"b\", \"a\", \"c\"]\n<br>my_list.sort()\n<br>print(my_list)",
                                                        "['a', 'b', 'c']",
                                                        "",
                                                        "",
                                                        "5d3b45d9-9ed9-4832-9888-3bf7259059ce"
                                                    ],
                                                    "guid": "s$Ya!M@Z[Z",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# using the .sort() method, change `my_list` to be `[3,2,1,0]`<br><br>my_list = [1,3,0,2]",
                                                        "my_list.sort(reverse=True)",
                                                        "pass in `reverse=True` as an argument to `.sort()` in order to indicate we want to sort the list in descending order instead of the default ascending order",
                                                        "",
                                                        "4671eac5-c41d-44ff-953a-bd3e50fb9b63"
                                                    ],
                                                    "guid": "bH6EnC(DLY",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# using a list method, mutate `mylist` to equal [0,1,2,3]\n<br><br>mylist = [3,0,2,1]",
                                                        "mylist.sort()",
                                                        "",
                                                        "",
                                                        "f7d77467-7709-4c64-9545-82b9fcf01dba"
                                                    ],
                                                    "guid": "F]vLE81-I5",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        }
                                    ],
                                    "crowdanki_uuid": "c89e3d80-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "methods",
                                    "notes": []
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c89f15e8-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "HfUssMsaz6j3B5_q3k3uGkq5rAvCiIX3ZrpgNB77oScNrG5abCXWECbBCOd9Nbwkz18Odwoj3aArKAfhDU9iNnsocmmatsQKjzkmUsCRXHc1GSHtyTJ.png",
                                        "QYUOkuWZjZnJG7aD35U8WZQv4S9GhZz14ai3K_dLdorXZkGhdQBvdCmSbeKFW193W9LTT6MOxy4UKjloxYeqQPw11GdyJkMiz3ovvPti2csF0gX9cng.png",
                                        "WXr4VFV9UzJtZBpJLctrCFzw9PGhJzfPnLRkkGyj798dpHWcxyvDQ8OS6_2dGd9rcL1_UJucEUkR4dnWytb83pkoc8pOYD-ZW-hYAyaLpOKtmRynRH3.png",
                                        "XdD6nPmxv8QA_TXqPNm_zd56FbR6tIbDSEOXw1Kt-Qc4O9AJvXRy_yU3G_AzsTzwvUy9b2gXvS7w7QDfw8ROspPP_R8Q4-GCEIaxwIZMby4RTJgsbkf.png"
                                    ],
                                    "name": "misc",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "In Python, {{c1::lists}} are ordered collections of items that allow for easy use of a set of data",
                                                "<img src=\"XdD6nPmxv8QA_TXqPNm_zd56FbR6tIbDSEOXw1Kt-Qc4O9AJvXRy_yU3G_AzsTzwvUy9b2gXvS7w7QDfw8ROspPP_R8Q4-GCEIaxwIZMby4RTJgsbkf.png\">",
                                                "",
                                                "46b50d26-10ac-45a7-8836-1ac5a5fbfab9"
                                            ],
                                            "guid": "ce088lqSbM",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "What types of datatypes can a list hold?",
                                                "any",
                                                "<img src=\"WXr4VFV9UzJtZBpJLctrCFzw9PGhJzfPnLRkkGyj798dpHWcxyvDQ8OS6_2dGd9rcL1_UJucEUkR4dnWytb83pkoc8pOYD-ZW-hYAyaLpOKtmRynRH3.png\">",
                                                "",
                                                "96d18a69-f0da-49bb-8290-a69b31eb9566"
                                            ],
                                            "guid": "EL8}fl%e*r",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "In Python, lists can be added to each other by {{c1::using the plus symbol +}}",
                                                "<img src=\"QYUOkuWZjZnJG7aD35U8WZQv4S9GhZz14ai3K_dLdorXZkGhdQBvdCmSbeKFW193W9LTT6MOxy4UKjloxYeqQPw11GdyJkMiz3ovvPti2csF0gX9cng.png\">",
                                                "",
                                                "1a8a2438-3227-4f66-b057-2e63c62059bf"
                                            ],
                                            "guid": "or%(+r<.#e",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "What is the index of the first element in a list in Python?",
                                                "zero",
                                                "<img src=\"HfUssMsaz6j3B5_q3k3uGkq5rAvCiIX3ZrpgNB77oScNrG5abCXWECbBCOd9Nbwkz18Odwoj3aArKAfhDU9iNnsocmmatsQKjzkmUsCRXHc1GSHtyTJ.png\">",
                                                "",
                                                "ff131d8f-8e3f-4659-b337-6bc258250feb"
                                            ],
                                            "guid": "dc}m+wr>>^",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "my_list = [0, 1, 2]\n<br>two = 4/2\n<br>print(my_list[two])",
                                                "error",
                                                "TypeError: list indices must be integers or slices, not float<br><br>The `/` operator returns a float datatype, not an integer, and you can only use an integer to access elements of a list.",
                                                "",
                                                "7640c6dd-fbdd-408d-8e68-374774112815"
                                            ],
                                            "guid": "c3])WT7bY?",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c89f38a2-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "output",
                                    "notes": []
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89f6886-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [],
                                            "name": "output",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "print( [1,2,3][1:2] )",
                                                        "[2]",
                                                        "it prints all elements starting from index 1 all the way up to but not including index 2",
                                                        "",
                                                        "5af93e8a-3029-46e1-9f03-93a386701e2d"
                                                    ],
                                                    "guid": "IJ8T|P8Q[!",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "print( [1,2,3][:1] )",
                                                        "[1]",
                                                        "it prints all elements starting from the beginning all the way up to but not including index 1",
                                                        "",
                                                        "A2259394-5818-487D-828E-98392F7610F6"
                                                    ],
                                                    "guid": "udvl7CW>Ed",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "print( [1,2,3][1:] )",
                                                        "[2,3]",
                                                        "it prints the elements starting from index 1, all the way until the end",
                                                        "",
                                                        "5639D797-699B-4A2C-835E-0298B90DD632"
                                                    ],
                                                    "guid": "m64QlS(2c&",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "print( [1,2,3][:-1] )&nbsp;",
                                                        "[1,2]",
                                                        "it prints all elements starting from the beginning all the way up to but not including the last element",
                                                        "",
                                                        "9FB6A891-A7E2-4584-97E2-7495DAFE73DF"
                                                    ],
                                                    "guid": "tIP5Rb~yi.",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "print( [1,2,3][:] )",
                                                        "[1,2,3]",
                                                        "so list[:] simply returns a copy of that list.<br>since [START:END] are not specified, the whole list is selected.",
                                                        "",
                                                        "3F307A5D-E343-4840-953E-28102CCD8FE2"
                                                    ],
                                                    "guid": "B!^zlgFrDK",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89f8dfc-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "8-V9LdTutqJsvOrv2RWOavqtujXPwK7r8smge_OggrsdDPYfGBk60wkrQNrR_KpVvuQD74JckEB37PR64CXbHRFsHz_o5HCxeH5t772kAi0IkgaDada.png",
                                                "ONKC3LNk9lkKLYvz_yUVBZ8y-76p8PCNv_A6iCm2BMvaQp-4do0uGe3p03KNwOiOhhlkQG65kaEz66JxM3baKdkXO6wLsiaowM60Zm6rpWahOwiDtjL.png",
                                                "_x1YG7kEfWxtipFb4tq07EHaCB6YV2o2nuBxhNSQhRMKcd8sqAq2Nx_y7H2QPzC5NXRr_Ko87sUBc8XvfSKPnotcZM2i_nodZpnNlGNG4rZLHfNeJe-.png",
                                                "fsVZfABmoRuTyYTi3RG9bqxtVz9w8WtBqHLd1X_CUkMOI4dwA1o2miY9LlMmQvYPxz9iJJ_Ac7STdzs8CYtx4xSkhsVL1CQm3z5A_lRzJouuLGIxQJp.png",
                                                "s2c55s0SI06UtiqAiDXmQYHAsY3-9_B5nu-WfxTjgLsUBHrJzB0Sb1orNgjm1Om_ugIA8sBFqoF0oS6iBmNP2C8Of1RR0N_WPJxaYK0dvIrQIPAGpcl.png"
                                            ],
                                            "name": "syntax",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "Syntax to slice the first two elements of a list?",
                                                        "list[:2]",
                                                        "",
                                                        "",
                                                        "7f4fa9ab-dfcd-44d2-9ff5-675aea8aa804"
                                                    ],
                                                    "guid": "t$MfeT93;O",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "Syntax to slice all elements of a list except the first two elements?",
                                                        "list[2:]",
                                                        "",
                                                        "",
                                                        "c72a9e49-5744-4d67-8c89-7e8642cce3dc"
                                                    ],
                                                    "guid": "QB1Dc/-|yd",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "What is the syntax for slicing a list in Python?",
                                                        "my_list[START_NUMBER:END_NUMBER]",
                                                        "`START_NUMBER` is inclusive, but `END_NUMBER` is exclusive. So slicing returns a list from the `(START_NUMBER)` index, all the way to the `(END_NUMBER - 1)` index.<br><br><img src=\"_x1YG7kEfWxtipFb4tq07EHaCB6YV2o2nuBxhNSQhRMKcd8sqAq2Nx_y7H2QPzC5NXRr_Ko87sUBc8XvfSKPnotcZM2i_nodZpnNlGNG4rZLHfNeJe-.png\">",
                                                        "",
                                                        "6a7f376c-bb5c-4cc6-91dd-7f5e5055a226"
                                                    ],
                                                    "guid": "B-!L4^=Fp<",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<img src=\"fsVZfABmoRuTyYTi3RG9bqxtVz9w8WtBqHLd1X_CUkMOI4dwA1o2miY9LlMmQvYPxz9iJJ_Ac7STdzs8CYtx4xSkhsVL1CQm3z5A_lRzJouuLGIxQJp.png\">",
                                                        "<img src=\"s2c55s0SI06UtiqAiDXmQYHAsY3-9_B5nu-WfxTjgLsUBHrJzB0Sb1orNgjm1Om_ugIA8sBFqoF0oS6iBmNP2C8Of1RR0N_WPJxaYK0dvIrQIPAGpcl.png\">",
                                                        "",
                                                        "",
                                                        "db9e2e99-2fcd-4fb7-9eb2-13b6d3d414a8"
                                                    ],
                                                    "guid": "A&Kh*luPOR",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<img src=\"ONKC3LNk9lkKLYvz_yUVBZ8y-76p8PCNv_A6iCm2BMvaQp-4do0uGe3p03KNwOiOhhlkQG65kaEz66JxM3baKdkXO6wLsiaowM60Zm6rpWahOwiDtjL.png\">",
                                                        "<img src=\"8-V9LdTutqJsvOrv2RWOavqtujXPwK7r8smge_OggrsdDPYfGBk60wkrQNrR_KpVvuQD74JckEB37PR64CXbHRFsHz_o5HCxeH5t772kAi0IkgaDada.png\">",
                                                        "",
                                                        "",
                                                        "09b15c6a-d6db-4e51-89c6-3a4315fa6c92"
                                                    ],
                                                    "guid": "B:2VlVExyf",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        }
                                    ],
                                    "crowdanki_uuid": "c89f5422-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "slicing",
                                    "notes": []
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c89fafa8-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "syntax",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "Syntax to declare a list that contains numbers in Python?",
                                                "my_list = [1, 2, 3]",
                                                "List values are placed in between brackets separated by commas",
                                                "",
                                                "17bac0bf-8231-4692-9729-365bc0b12ad5"
                                            ],
                                            "guid": "r3.wb6k.D@",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "Syntax to declare an empty list?",
                                                "my_list = []",
                                                "Why would we create an empty list?<br><br>Usually, it’s because we’re planning on filling it up later based on some other input.",
                                                "",
                                                "f3824590-e5ad-4401-af40-2169a2df6f0f"
                                            ],
                                            "guid": "keT)P<!1[/",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                }
                            ],
                            "crowdanki_uuid": "c89db11c-0074-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "lists",
                            "notes": []
                        },
                        {
                            "__type__": "Deck",
                            "children": [
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "fdeed116-0547-11ec-9c94-acde48001122",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "5yfsMb7Qy9Qgkd6ZtE4s1EC8PYeLxypoVk4wTyv7eg_8xBmHx_8VCjyc2pZHIHWW0C7TvKE6ah4rbo_9P1Dw6bMeQKRNGCH8Rn6pcgchiNPHAP1nrah.png",
                                        "EI14ItNWQpy1HAN-p6pEZhD45V-ahUMFGeF8OqEOxYPdQ0KTRvEOUwcM_7h9XwxTNP3wvU6l0cCNopp_AvtRr0ZxC_uWvMjsAw2NNa0iKMa-6hB0wSo.png",
                                        "M5iqJ75_SMJgKdGGwZLK2cLuQhMWrnxUERrSyEdutBA6kLFn1_EK6-CgfNrZr5L5dJI2K-Fr6DsrxDw34yK_4hne5K7JewthfaHYXJKfCcGr0x2Ovhy.png"
                                    ],
                                    "name": "indexing & slicing",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"5yfsMb7Qy9Qgkd6ZtE4s1EC8PYeLxypoVk4wTyv7eg_8xBmHx_8VCjyc2pZHIHWW0C7TvKE6ah4rbo_9P1Dw6bMeQKRNGCH8Rn6pcgchiNPHAP1nrah.png\">",
                                                "<img src=\"EI14ItNWQpy1HAN-p6pEZhD45V-ahUMFGeF8OqEOxYPdQ0KTRvEOUwcM_7h9XwxTNP3wvU6l0cCNopp_AvtRr0ZxC_uWvMjsAw2NNa0iKMa-6hB0wSo.png\">",
                                                "cool_fruit = “watermelon”<br>print(cool_fruit[len(cool_fruit) - 2]) # prints: o<br><br><b>cool_fruit</b> is the variable name which equals the string <b>\"watermelon\"</b>, so the second to last index of <b>cool_fruit</b> is <b>\"o\"</b>.<br><br>Remember that indices start at zero, not one.<br><br>So a string of length 10 has indices 0 - 9.<br><br>So the last character of a string is string[len(string) - 1]<br><br>And the second to last character of a string is string[len(string) - 2]<br><br>string[len(string)] would result in an index that is out of bounds.<br><br># Example:<br>string = “abc”<br>a_idx = len(string) - 3 # equals 0<br>b_idx = len(string) - 2 # equals 1<br>c_idx = len(string) - 1 # equals 2<br>out_of_bounds = len(string) # equals 3<br><br>print(string[a_idx]) # prints “a”<br>print(string[b_idx]) # prints “b”<br>print(string[c_idx]) # prints “c”<br>print(string[out_of_bounds]) # IndexError: list index out of range<br><br># The length of “abc” is 3, but the last index of “abc” is 2",
                                                "",
                                                "9E10759E-951C-439A-A10C-19E424E98A85"
                                            ],
                                            "guid": "N]uA5qrdoK",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "What is the syntax for slicing and indexing strings?",
                                                "Same as lists",
                                                "string[index] for indexing and string[start:end] for slicing<br><br><img src=\"M5iqJ75_SMJgKdGGwZLK2cLuQhMWrnxUERrSyEdutBA6kLFn1_EK6-CgfNrZr5L5dJI2K-Fr6DsrxDw34yK_4hne5K7JewthfaHYXJKfCcGr0x2Ovhy.png\">",
                                                "",
                                                "C302C5AB-C954-4A4B-B15E-6CAD4D11C2FE"
                                            ],
                                            "guid": "uIjhCeQU44",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "fdef024e-0547-11ec-9c94-acde48001122",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "IzJj-Z9qxdwZYIAEVITVe_rWIL87lGW8vP_vyYyLDcpLN06ndxiTml_eHBCmJl51LSc4n-Z0M823_CozfJ9DmbWFD9841So6Grg5kaRbhH7Wh3LzsId.png",
                                                "WKBwi1itRy6vXp35DErq05ImdfD1I5guc6YG4PMdT_NTJzYenMvy5tAoi8YPgiinakjViOW4x4-_TGq6KoE_a2-Vilj-i5Gjbb_2_raZVlP8Me9QJs4.png",
                                                "gqirf7bCjRFYsAo_A31ESsArvNkZRxTcjAxpXGitYiyXtnYOr1eL6hHxhFrbez7tyZDUNWC33oCWULa0LnutfzQik0qglcdXfJm9aLbk8rztpVccoHY.png"
                                            ],
                                            "mid": 1629301724971,
                                            "name": "find",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<img src=\"IzJj-Z9qxdwZYIAEVITVe_rWIL87lGW8vP_vyYyLDcpLN06ndxiTml_eHBCmJl51LSc4n-Z0M823_CozfJ9DmbWFD9841So6Grg5kaRbhH7Wh3LzsId.png\">",
                                                        "<img src=\"WKBwi1itRy6vXp35DErq05ImdfD1I5guc6YG4PMdT_NTJzYenMvy5tAoi8YPgiinakjViOW4x4-_TGq6KoE_a2-Vilj-i5Gjbb_2_raZVlP8Me9QJs4.png\">",
                                                        "",
                                                        "",
                                                        "A7A31509-FB3D-4CF4-BE21-068118B688A5"
                                                    ],
                                                    "guid": "xc!daJigo@",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "The Python string method {{c1::.find()}} returns the index of the first occurrence of the string passed as the argument. It returns -1 if no occurrence is found.",
                                                        "<img src=\"gqirf7bCjRFYsAo_A31ESsArvNkZRxTcjAxpXGitYiyXtnYOr1eL6hHxhFrbez7tyZDUNWC33oCWULa0LnutfzQik0qglcdXfJm9aLbk8rztpVccoHY.png\">",
                                                        "",
                                                        "18173DA1-5218-44E0-A116-5BCCA196148B"
                                                    ],
                                                    "guid": "tYKr/t/O+L",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "fdef1e78-0547-11ec-9c94-acde48001122",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "MC9WoNQB9bFzuQUvPlSjseeQza1XUVUN6LHQABumVS_4oDPBXoFNffAZVXI1g70liRWgU8p4uZLcnJEe7josDDKExGcVdLGZE9l1-beAqNIDDZTNfg5.png",
                                                "TH4uQdYdE2XAFyGWiol8eweYpygWA-GQdjb12FSdI_Qr80NkVHjN_R8wPXMOe_eCNSra2Kbgl1uaraumEz9wUdwIOFYoSu-orbzZdfMbwKCEsBXjd1H.png",
                                                "nEkrzQlx-2ZZfEFpQwHVbs4bvE69ArnT0hOz9gjL1ADb5foZRcn9viOdHNZjfQO8MF4QfP1lJDduTZQnEiptiK76dvewKUtrPHe4a1NRIa_SlHRiKJb.png"
                                            ],
                                            "mid": 1629301724971,
                                            "name": "join",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<img src=\"TH4uQdYdE2XAFyGWiol8eweYpygWA-GQdjb12FSdI_Qr80NkVHjN_R8wPXMOe_eCNSra2Kbgl1uaraumEz9wUdwIOFYoSu-orbzZdfMbwKCEsBXjd1H.png\">",
                                                        "<img src=\"nEkrzQlx-2ZZfEFpQwHVbs4bvE69ArnT0hOz9gjL1ADb5foZRcn9viOdHNZjfQO8MF4QfP1lJDduTZQnEiptiK76dvewKUtrPHe4a1NRIa_SlHRiKJb.png\">",
                                                        "",
                                                        "",
                                                        "E8D0ADA4-0352-4A79-8E58-0C6D71ECFF86"
                                                    ],
                                                    "guid": "BP_Jp0*E.C",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "The string method {{c1::.join()}} concatenates a list of strings together to create a new string joined with the desired delimiter.<br><br># Example:<br>print(\"-\".{{c1::join}}([\"monk\", \"like\", \"discipline\"]) # prints: monk-like-discipline",
                                                        "<img src=\"MC9WoNQB9bFzuQUvPlSjseeQza1XUVUN6LHQABumVS_4oDPBXoFNffAZVXI1g70liRWgU8p4uZLcnJEe7josDDKExGcVdLGZE9l1-beAqNIDDZTNfg5.png\">",
                                                        "",
                                                        "0AF1C85D-C21B-4B86-8F54-B1E6E0480E4C"
                                                    ],
                                                    "guid": "J]<v*x3d/4",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# using a string method, print the list below as a string like this: \"this-is-an-example\"\n<br><br>example = [\"this\", \"is\", \"an\", \"example\"]\n<br><br>print({{c1::\"-\".join(example)}}) # prints: this-is-an-example",
                                                        "",
                                                        "",
                                                        "866C9719-C90E-47E8-950B-063A5D87E67F"
                                                    ],
                                                    "guid": "jIQ|:`6f76",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "fdef3db8-0547-11ec-9c94-acde48001122",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "Gtj6XuCHsbUBCxcbCwO4dUmF9jsVDhRUOcTlIpz10Pe2BsxTRD9IvPu0k0ChBllpAi6N1CXyhoEiUX-B64WiGzg3yTQATCrgSyPCDlY5nMv-lJG0n1r.png"
                                            ],
                                            "name": "lower",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "The string method {{c1::.lower()}} returns a string with all uppercase characters converted into lowercase.",
                                                        "<img src=\"Gtj6XuCHsbUBCxcbCwO4dUmF9jsVDhRUOcTlIpz10Pe2BsxTRD9IvPu0k0ChBllpAi6N1CXyhoEiUX-B64WiGzg3yTQATCrgSyPCDlY5nMv-lJG0n1r.png\">",
                                                        "",
                                                        "0F39C3B0-9D98-4C7B-B663-1B1C6F8478ED"
                                                    ],
                                                    "guid": "MZL@!2#@+d",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# using a string method, print the string below like this: \"monk mode\"\n<br>lifestyle = \"MONK MODE\"\n<br>print(lifestyle.{{c1::lower()}}) # prints: monk mode",
                                                        "",
                                                        "",
                                                        "D20BD86B-576B-467D-AC26-F6CE36F8CF21"
                                                    ],
                                                    "guid": "JM%BYX:s<n",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "fdef59ec-0547-11ec-9c94-acde48001122",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "2KK70I2LwFEmH7x4fwIAvVtNcdqdQu5M301i6JC6-r97_RIg9vOnejJSssXd-eZb2xpI4eJ6Wy7yOoJXTyTIfiGImCBL_1Mm7_eNVtzGr_nDAeuNE15.png"
                                            ],
                                            "mid": 1629301724971,
                                            "name": "replace",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "The string method {{c1::.replace()}} is used to replace the occurrence of the first argument with the second argument within the string.",
                                                        "<img src=\"2KK70I2LwFEmH7x4fwIAvVtNcdqdQu5M301i6JC6-r97_RIg9vOnejJSssXd-eZb2xpI4eJ6Wy7yOoJXTyTIfiGImCBL_1Mm7_eNVtzGr_nDAeuNE15.png\">",
                                                        "",
                                                        "FC696947-31F3-4D55-842A-33D278C0C220"
                                                    ],
                                                    "guid": "M*qhbad;-f",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "fdef72e2-0547-11ec-9c94-acde48001122",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "4iQRnex_yHa7J3EhGPbk1JoPHUCawX-vFuHPGl-g18rC2C1sMlYhCM5nzCL2O83hJSsc8yA23WQiQH1KOZG7AhEQnUyIiu35rp7b3_vNK2YKN-0nD5E.png",
                                                "CeN0qFF9WJjYaFFqTSbLB8Z7powgbhyqr3kmZO746N0HUYFrZvtj_RFfl3eDhMeRM5yPbLz4WEKQ9nKO1yOFdt5VZRBCYbuX62TDnYj4kyUpQAbDnt-.png",
                                                "TQgVRBQx5zPMoni9d118a7iWAL8d2y1PF5lUrweyOhz5U8IZNJxOOgWt99m_RtUyNSzf4ELNPx5ml9EyNDMPS3JcgF0ceDIUFyecvY797NBSVps1arx.png",
                                                "m-ER6m__iE15suu2GUcYjhGPGVUZlf8sfaWz-eMr4DJOBk1u02nFO4jGE3qZWjZ2VDou5jfZsY21TBxa1lYPMSGP422JoGkThEnPHwMJIe70p2h9IFR.png"
                                            ],
                                            "mid": 1629300492637,
                                            "name": "split",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "The string method {{c1::.split()}} separates a string into a list of items. If no argument is passed, the default behavior is to split on whitespace. If an argument is passed to the method, that value is used as the delimiter on which to separate the string.",
                                                        "<img src=\"m-ER6m__iE15suu2GUcYjhGPGVUZlf8sfaWz-eMr4DJOBk1u02nFO4jGE3qZWjZ2VDou5jfZsY21TBxa1lYPMSGP422JoGkThEnPHwMJIe70p2h9IFR.png\">",
                                                        "",
                                                        "23A309B8-3160-43FD-91D2-2C524F9D6E20"
                                                    ],
                                                    "guid": "vHlo+uk3zu",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "print(\"Silicon Valley\".split())",
                                                        "['Silicon', 'Valley']",
                                                        "",
                                                        "",
                                                        "E2179A58-6EEE-43FD-ADFF-DAFD943F4B03"
                                                    ],
                                                    "guid": "ySJ<cE*)/o",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "print(\"Silicon Valley\".split('i'))",
                                                        "['S', 'l', 'con Valley']",
                                                        "",
                                                        "",
                                                        "AEBB8BB3-BEB8-43F5-8B6D-2DD1DC573336"
                                                    ],
                                                    "guid": "fyT)BN)X##",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# using a string method, print the string below as a list like this:&nbsp;[\"relentless\", \"focus\", \"deep\", \"work\", \"monk\", \"mode\"]\n<br><br>my_string = \"relentless focus deep work monk mode\"\n<br>print(my_string.{{c1::split()}}) # prints [\"relentless\", \"focus\", \"deep\", \"work\", \"monk\", \"mode\"]",
                                                        "",
                                                        "",
                                                        "4EEAE577-C57B-4EF3-8359-254B4C80E38C"
                                                    ],
                                                    "guid": "M2UV2kb5mN",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<img src=\"CeN0qFF9WJjYaFFqTSbLB8Z7powgbhyqr3kmZO746N0HUYFrZvtj_RFfl3eDhMeRM5yPbLz4WEKQ9nKO1yOFdt5VZRBCYbuX62TDnYj4kyUpQAbDnt-.png\"><br><img src=\"TQgVRBQx5zPMoni9d118a7iWAL8d2y1PF5lUrweyOhz5U8IZNJxOOgWt99m_RtUyNSzf4ELNPx5ml9EyNDMPS3JcgF0ceDIUFyecvY797NBSVps1arx.png\">",
                                                        "<img src=\"4iQRnex_yHa7J3EhGPbk1JoPHUCawX-vFuHPGl-g18rC2C1sMlYhCM5nzCL2O83hJSsc8yA23WQiQH1KOZG7AhEQnUyIiu35rp7b3_vNK2YKN-0nD5E.png\">",
                                                        "",
                                                        "",
                                                        "3B9E1C14-6F85-492E-B050-258F570A1280"
                                                    ],
                                                    "guid": "Ii}*0ux)1p",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "fdef961e-0547-11ec-9c94-acde48001122",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "8hVtPwqbZ3rpwazumoHjDscQ8EEbmq0BFwJICSw6VaXqqd58YBeanPfYGQqbsTn4ybMhE7eAtPQFElkmQaoAqN9-xSZJcLVROQj0RANU6GhNMVFhw_-.png",
                                                "VyEIOTMQx0lwD-jgkWa8SIHiFz8XUXtPQbVyu_uZTPIOLoL_5PMS86tPR0si3MvpCT1aaVOkRpl1m7nEymiMl1E4Z0-rY8O2sB0j1uQhWcS8CxagORE.png",
                                                "vdTNkudz96Gm6XKxJZgE505o1tnQNAMhK7F4Wkl3DGkDdmHpXTwU6v17It6crsP6fQx6Or6YK4tFWINXwUSD4VLuOtw650xzR9GXIBXD_G7QTynfZAD.png"
                                            ],
                                            "mid": 1629300492637,
                                            "name": "strip",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "The string method {{c1::.strip()}} can be used to remove characters from the beginning and end of a string.",
                                                        "<img src=\"8hVtPwqbZ3rpwazumoHjDscQ8EEbmq0BFwJICSw6VaXqqd58YBeanPfYGQqbsTn4ybMhE7eAtPQFElkmQaoAqN9-xSZJcLVROQj0RANU6GhNMVFhw_-.png\">",
                                                        "",
                                                        "AC38142E-16F3-480E-90DE-0C638B987C4C"
                                                    ],
                                                    "guid": "t$cC+MY3>Q",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<img src=\"vdTNkudz96Gm6XKxJZgE505o1tnQNAMhK7F4Wkl3DGkDdmHpXTwU6v17It6crsP6fQx6Or6YK4tFWINXwUSD4VLuOtw650xzR9GXIBXD_G7QTynfZAD.png\">",
                                                        "<img src=\"VyEIOTMQx0lwD-jgkWa8SIHiFz8XUXtPQbVyu_uZTPIOLoL_5PMS86tPR0si3MvpCT1aaVOkRpl1m7nEymiMl1E4Z0-rY8O2sB0j1uQhWcS8CxagORE.png\">",
                                                        "",
                                                        "",
                                                        "C114AC59-41ED-4D3D-AF3E-C62B6A910AA7"
                                                    ],
                                                    "guid": "fqs-i<JMv4",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "fdefb2a2-0547-11ec-9c94-acde48001122",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "Vhe37Jl6Cdh8owqNeoErALoZrz7lFLa-B6C4Zj-kEXutKcZHLqqVHRsqndjbGnYP303NEqxy4aochncJssvQ3MFLZr4n5p00AROVqf9JlBdc10uGM6t.png"
                                            ],
                                            "name": "title",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "The string method {{c1::.title()}} returns the string in title case.",
                                                        "<img src=\"Vhe37Jl6Cdh8owqNeoErALoZrz7lFLa-B6C4Zj-kEXutKcZHLqqVHRsqndjbGnYP303NEqxy4aochncJssvQ3MFLZr4n5p00AROVqf9JlBdc10uGM6t.png\">",
                                                        "",
                                                        "CE3F2646-1554-440A-85BC-42FC877C78F0"
                                                    ],
                                                    "guid": "QERj_YM~b3",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "fdefcdb4-0547-11ec-9c94-acde48001122",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "VsYu92dKVlf_XQmTXX_3xeiILBVlvPaVvrOWWtg2ZNNiISnXKAekOBzG5wqDerbd0ExiGtayDI-b9paVEuhkQB9usIdXsum1usfhdrwLhBalauBrjpC.png"
                                            ],
                                            "name": "upper",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "The string method {{c1::.upper()}} returns the string with all lowercase characters converted to uppercase.",
                                                        "<img src=\"VsYu92dKVlf_XQmTXX_3xeiILBVlvPaVvrOWWtg2ZNNiISnXKAekOBzG5wqDerbd0ExiGtayDI-b9paVEuhkQB9usIdXsum1usfhdrwLhBalauBrjpC.png\">",
                                                        "",
                                                        "C31BA2C0-3AA6-496E-ADE4-799A90271E74"
                                                    ],
                                                    "guid": "cW|=B+58n(",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        }
                                    ],
                                    "crowdanki_uuid": "fdeeed04-0547-11ec-9c94-acde48001122",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "methods",
                                    "notes": []
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "fdefea7e-0547-11ec-9c94-acde48001122",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "0QLlyvzKJFecih7xPD72ld8KWc08YEcZTzkBwZXnwLiC9KIJo5RcWoh6yEo-xEN9zT97X46BcI011ECB2wl1RQSJg6B36oRuRcp9cDn1LJoTeacSi-4.png",
                                        "5CGuwT-qggDrhFx8d_N5h5JjhVvRW_tRnz_sqI5I20JSUxvdkZDpE9F0XAvMPiZRykDeRRtL-vzOl75IbHAoVXuLh0EvHmPGnBTd1IKh8kS_C5kE4WB.png",
                                        "AH0X_c-jimuyrIGGz-WS07HN1HoHirxr0Uqky86uRmHoE8E-rwstehHzwGU2ypZ-X-x4cq-EKSKihcDCNcoCKOzi_UcQKRECKZ82KmSx76elNo9oNYI.png",
                                        "RqSvcIpuxPbKIVlYa_RSXyNor5cJcDLswqbZrryP1qPlzx43m7WTSy_M3jgfI9iJh-OQ2de9llVPkrpNxp3vCDWQCUUBuWHgCz_w79J06LgR4Ak0FQq.png",
                                        "fO2gECHTCTMdEgNYMkH51f1NFMCrEYd3n1IrEP0svjxvke_RLyWcHFW2OdA0EZ48AcRslQZM8N8E5zuFPdLjRzG1FzDanCF5u1fbYbIJaNuuQSneIsD.png",
                                        "paste-433828876930196de97cd8f2c13e77ffbf921fac.jpg",
                                        "paste-470092d1117c4a821add1bd22afbc934b0ae3ef3.jpg"
                                    ],
                                    "mid": 1629301724971,
                                    "name": "misc",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "A {{c1::string}} is a sequence of characters (letters, numbers, whitespace or punctuation) enclosed by quotation marks.",
                                                "<img src=\"0QLlyvzKJFecih7xPD72ld8KWc08YEcZTzkBwZXnwLiC9KIJo5RcWoh6yEo-xEN9zT97X46BcI011ECB2wl1RQSJg6B36oRuRcp9cDn1LJoTeacSi-4.png\">",
                                                "",
                                                "92B6C52F-0F7C-4F16-9A4F-921061D881E8"
                                            ],
                                            "guid": "URG!nmUuU",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "What is a string?",
                                                "'this is a string'",
                                                "A sequence of characters enclosed by quotation marks",
                                                "",
                                                "a31fd9f8-a473-469e-bd56-262f0d263183"
                                            ],
                                            "guid": "P*B;b)ou{k",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "How to find the length of a string?<br>For example, the length of the string \"text\" is 4.",
                                                "len(string)",
                                                "<img src=\"AH0X_c-jimuyrIGGz-WS07HN1HoHirxr0Uqky86uRmHoE8E-rwstehHzwGU2ypZ-X-x4cq-EKSKihcDCNcoCKOzi_UcQKRECKZ82KmSx76elNo9oNYI.png\">",
                                                "",
                                                "1803C7D3-2938-4FB7-8A42-B7544B75F64C"
                                            ],
                                            "guid": "-OHupiH^]",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "Are strings mutable, or immutable?",
                                                "immutable",
                                                "# Example of how lists are mutable\n<br>my_list = [1, 2, 4]\n<br>print(my_list) # prints [1, 2, 4]\n<br>my_list[-1] = 3\n<br>print(my_list) # prints [1, 2, 3]\n<br><br># Example of how string are immutable\n<br>my_string = \"124\"\n<br>print(my_string) # prints \"124\"\n<br>my_string[-1] = 3 # throws error because strings are immutable, we cannot mutate it.<br><br><img src=\"5CGuwT-qggDrhFx8d_N5h5JjhVvRW_tRnz_sqI5I20JSUxvdkZDpE9F0XAvMPiZRykDeRRtL-vzOl75IbHAoVXuLh0EvHmPGnBTd1IKh8kS_C5kE4WB.png\">",
                                                "",
                                                "4AC2F8FF-1543-470F-A12C-B68FEC78596D"
                                            ],
                                            "guid": "c-Pz.//M)=",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "What does it mean for something to be immutable in Python?",
                                                "Something that can't be changed after being created",
                                                "Here are examples of immutable objects in python: integers, floats, booleans, strings, and tuples",
                                                "",
                                                "250BC8B2-C7D2-40A9-BAAC-EB24BD880F71"
                                            ],
                                            "guid": "PBeH$8^x_p",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "{{c1::Backslashes \\}} are used to escape characters in a Python string.",
                                                "<img src=\"RqSvcIpuxPbKIVlYa_RSXyNor5cJcDLswqbZrryP1qPlzx43m7WTSy_M3jgfI9iJh-OQ2de9llVPkrpNxp3vCDWQCUUBuWHgCz_w79J06LgR4Ak0FQq.png\">",
                                                "",
                                                "87E800B5-D072-45E9-80E9-B44B4026D37D"
                                            ],
                                            "guid": "l8MDU9Gw1m",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "# Given the string below, print every single character inside the string one by one<br><br>my_string = \"This is an example\"<br><br>{{c1::for char in my_string:<br>&nbsp; &nbsp; print(char)}}<br><br>'''<br># Should print:<br>T<br>h<br>i<br>s<br><br>i<br>s<br><br>a<br>n<br><br>e<br>x<br>a<br>m<br>p<br>l<br>e<br>'''",
                                                "# the 'char' variable can be anything. For example, this works too:<br>for x in my_string:<br>&nbsp; &nbsp; print(char)<br><br><img src=\"fO2gECHTCTMdEgNYMkH51f1NFMCrEYd3n1IrEP0svjxvke_RLyWcHFW2OdA0EZ48AcRslQZM8N8E5zuFPdLjRzG1FzDanCF5u1fbYbIJaNuuQSneIsD.png\">",
                                                "",
                                                "604256C1-CC5E-438D-9EF8-A90FF676FD72"
                                            ],
                                            "guid": "FCQP;rxTT/",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(\"quotations {{c1::'within' \\\"a\\\"}} string\") # prints: quotations 'within' \"a\" string",
                                                "since the string above is enclosed by the \" \" quotation marks, we need to escape those same quotation marks within the string with a back slash \\ <br><br>if we tried to print the string: `<b>quotations 'within' \"a\" string</b>` with the backslash, it would look like this:<br><img src=\"paste-470092d1117c4a821add1bd22afbc934b0ae3ef3.jpg\"><br><br>and it would print what we expect: `<b>quotations 'within' \"a\" string</b>`<br><br>if we tried to print without the backslashes though, it would look like this:<br><img src=\"paste-433828876930196de97cd8f2c13e77ffbf921fac.jpg\"><br><br>So it creates two string, <b>\"quotations 'within' \"</b> and <b>\" string\"</b>, and it tries to reference a variable named <b>a</b>&nbsp;which does not exist. This is why we use the backslash before the quotation mark in order to make sure that the quotation marks used around \"a\" are used as characters to be used within the string, and not to mark the end or start of a string.",
                                                "",
                                                "BF2EE874-E3D6-423B-B6B2-787B4CF53CF4"
                                            ],
                                            "guid": "o#M<!>5FfN",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "fdf01530-0547-11ec-9c94-acde48001122",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "FQ5fvhLxCC8QaNwG9e32rKkIE-J_Pgg_abs78_KmHQ3rJaaRQQmPvfGrQ3EXof4DJA5ilyB-XZqTWy5hZXJMOcwNzGCZO8AeRs3J69idDo55C8ICwZJ.png",
                                        "X_mXhe6XFMB-9lM2N2y8LOpGqnM8vcXMfEKbRVVSANNdEaDaWltgRVvwq0ttNrbj_4P9e814eqOTecebcg4jrmXPjpUmzp86h3CU2ksHrJbdTlZSB3y.png",
                                        "hX_zOQveJSkLRou3Fipbnip0GYKk6NadelmM1XtfY0Hb8faWGkv1OCVq9w5LlyuRtVbnkXsVRYxLjLxPsI7xyQglDyeGiCNzY9e2NC7hLH4xsbI1jc9.png",
                                        "paste-331c25474d8a9d679564d62b06953596f86e4c9c.jpg",
                                        "paste-a344c24bf8a17b0925b927d9bf27ced50a9ec2b1.jpg",
                                        "paste-ac8bf830b18795882ab3640bdca489afb46e4850.jpg",
                                        "paste-caefc5d2105d44cb7624b977444653e283acdaf4.jpg",
                                        "paste-cbb46354ad4f4176cff8fff55c2872a59d803bba.jpg",
                                        "paste-d50d1844c26295d78a753b9c6c199f590a8a272e.jpg"
                                    ],
                                    "name": "syntax",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "How to concatenate strings?",
                                                "using the + operator",
                                                "e<br>xample:<br>result = \"hello \" + \"world\"<br>print(result) # hello world<br><br><img src=\"FQ5fvhLxCC8QaNwG9e32rKkIE-J_Pgg_abs78_KmHQ3rJaaRQQmPvfGrQ3EXof4DJA5ilyB-XZqTWy5hZXJMOcwNzGCZO8AeRs3J69idDo55C8ICwZJ.png\"><br><img src=\"X_mXhe6XFMB-9lM2N2y8LOpGqnM8vcXMfEKbRVVSANNdEaDaWltgRVvwq0ttNrbj_4P9e814eqOTecebcg4jrmXPjpUmzp86h3CU2ksHrJbdTlZSB3y.png\">",
                                                "",
                                                "9751817f-4937-4d45-9f2b-c9dc36a2d009"
                                            ],
                                            "guid": "J47SJG4XM#",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "How to declare a multi-line string?",
                                                "'''<br>like<br>this<br>'''",
                                                "<img src=\"hX_zOQveJSkLRou3Fipbnip0GYKk6NadelmM1XtfY0Hb8faWGkv1OCVq9w5LlyuRtVbnkXsVRYxLjLxPsI7xyQglDyeGiCNzY9e2NC7hLH4xsbI1jc9.png\">",
                                                "",
                                                "6d2fe013-af94-466c-b532-7b1ca09b755f"
                                            ],
                                            "guid": "c32[j7h^Cp",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"paste-331c25474d8a9d679564d62b06953596f86e4c9c.jpg\">",
                                                "<img src=\"paste-a344c24bf8a17b0925b927d9bf27ced50a9ec2b1.jpg\">",
                                                "",
                                                "",
                                                "3726a3ee-69cc-4b6a-864a-6ab3f7754255"
                                            ],
                                            "guid": "iX?ZrhvK2D",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"paste-d50d1844c26295d78a753b9c6c199f590a8a272e.jpg\">",
                                                "<img src=\"paste-ac8bf830b18795882ab3640bdca489afb46e4850.jpg\">",
                                                "",
                                                "",
                                                "72953836-c78a-459b-a293-50b46873e491"
                                            ],
                                            "guid": "A$SZ.NB+D)",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"paste-cbb46354ad4f4176cff8fff55c2872a59d803bba.jpg\">",
                                                "<img src=\"paste-caefc5d2105d44cb7624b977444653e283acdaf4.jpg\">",
                                                "",
                                                "",
                                                "40eb6fe0-52ad-4047-aa68-c015edd307ca"
                                            ],
                                            "guid": "h31rQQzD8$",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                }
                            ],
                            "crowdanki_uuid": "42fbe38c-004a-11ec-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "strings",
                            "notes": []
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "c89fc9fc-0074-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "tuples",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "Syntax to declare a tuple in Python?",
                                        "example = (1, 2, 3)",
                                        "So like a list, but instead of brackets, we use parentesis. So ( instead of [.",
                                        "",
                                        "21c868ac-2cd7-4e46-af15-fe6f55614a8c"
                                    ],
                                    "guid": "wGb=g/LeGI",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "What's the difference between a Tuple and a List?",
                                        "Tuples are immutable while lists are mutable.&nbsp;",
                                        "Meaning once a tuple is created, the data inside it cannot be mutated.<br><br>For example, if we have a list, we can append and pop elements from the list, and assign new values to certain indexes of that list. We cannot do this with tuples though.",
                                        "",
                                        "d89702e2-70b6-4f9c-8bca-5ef94522d968"
                                    ],
                                    "guid": "g_f=O54Ckv",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        }
                    ],
                    "crowdanki_uuid": "c89d9b6e-0074-11ec-9d19-3e22fb2860fe",
                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [],
                    "name": "data structures",
                    "notes": []
                },
                {
                    "__type__": "Deck",
                    "children": [],
                    "crowdanki_uuid": "46c05bde-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [
                        "paste-2c5e311facf3a35fe253359b0c4a412314df94e1.jpg",
                        "paste-47b4cdfaa6363c000116d29234289dfd2b7b81d6.jpg"
                    ],
                    "name": "errors",
                    "notes": [
                        {
                            "__type__": "Note",
                            "fields": [
                                "<img src=\"paste-47b4cdfaa6363c000116d29234289dfd2b7b81d6.jpg\">",
                                "<img src=\"paste-2c5e311facf3a35fe253359b0c4a412314df94e1.jpg\">",
                                "",
                                "",
                                "674c0286-5470-489f-aaba-61bc30ff314f"
                            ],
                            "guid": "tMK2@e&.Wt",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        }
                    ]
                },
                {
                    "__type__": "Deck",
                    "children": [],
                    "crowdanki_uuid": "46befeba-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [],
                    "mid": 1629300492637,
                    "name": "execution order",
                    "notes": [
                        {
                            "__type__": "Note",
                            "fields": [
                                "in what order are mathematical operations performed in python?",
                                "the standard mathematical order of operations",
                                "PEMDAS<br><br>parentheses first, then exponents, then all multiplication and division from left to right in the order both operations appear, then all addition and subtraction from left to right in the order both operations appear.",
                                "",
                                "eea0682a-663c-4030-8443-64b48cc5a718"
                            ],
                            "guid": "CUqK#6d)%P",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": [
                                "codecademy",
                                "python"
                            ]
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "in what order is Python code executed?",
                                "from top to bottom",
                                "",
                                "",
                                "b402c394-7608-4130-8dc7-e1c657ac86fe"
                            ],
                            "guid": "Ik[uS{Cgz^",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "<span style=\"color: unset; font-style: unset; font-weight: unset; background-color: unset; text-decoration-line: unset;\">def func():\n<br>&nbsp; &nbsp; return 1\n<br>&nbsp; &nbsp; print(\"test\")\n<br><br>print(func())</span>",
                                "1",
                                "<span style=\"color: unset; font-style: unset; font-weight: unset; background-color: unset; text-decoration-line: unset;\">The code inside a function stops executing after a return statement<br></span><br>So in this example, when the code <b>return 1</b>&nbsp;executes, the function stops executing and so the command&nbsp;<b>print(\"test\") </b>never executes.",
                                "",
                                "ce3d18ac-8b56-4833-b280-7b46d67b0a5e"
                            ],
                            "guid": "z|+!m_SvDt",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        }
                    ]
                },
                {
                    "__type__": "Deck",
                    "children": [
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "9c40f05c-0114-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "4wJ0ogl_i5B3QBPqYSZYBLa3Gz61TnTPGYsz7zwb662YC8WpMnA8vhHM4vPIM0LcjDfooSwntKNwS17t26DTUJO-x1qeyjOmcifNWFXiEgT0lerVUqr.png",
                                "TDVc1-Fixieo9f87B5yCHuBy2wX7030E9Gd8nron3c3kZTn09hbLN1kTZrotDfx11iVz_PK1LzBH6EuM9BdEbXpi58EiuuGyY6wxccAkp294v4XqefI.png",
                                "paste-091af210d6281354a03b9e011b2fc2726eed51a0.jpg",
                                "paste-3e79de966b815c30dd6d0c4ac4225f4a6cf1c5a5.jpg",
                                "paste-61fad6a1d5bc5319d1c1861e96828ac446ed3044.jpg",
                                "paste-8ea8f0c5485915c6edfc5005564fed56bf898532.jpg",
                                "paste-d6da5bb299042eb76f8e03ae602f4b79596a0509.jpg",
                                "wbJHmgCM_Xr7wEOItMkszfZ7xjO8_p35Jn63BUJAuUCMHeLhwkF9qIVQOHO-58GGJMIdwiv_2xuOfMCkG2tXwpIyaxUppAuVkqqwee5dzxqScO5ETkT.png"
                            ],
                            "name": "arguments",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "What are function arguments?",
                                        "the values passed into a function when calling it",
                                        "<img src=\"wbJHmgCM_Xr7wEOItMkszfZ7xjO8_p35Jn63BUJAuUCMHeLhwkF9qIVQOHO-58GGJMIdwiv_2xuOfMCkG2tXwpIyaxUppAuVkqqwee5dzxqScO5ETkT.png\">",
                                        "",
                                        "d4bc1e52-8c56-467c-98b8-aa048fe39e1c"
                                    ],
                                    "guid": "o[cxy66:K;",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<img src=\"TDVc1-Fixieo9f87B5yCHuBy2wX7030E9Gd8nron3c3kZTn09hbLN1kTZrotDfx11iVz_PK1LzBH6EuM9BdEbXpi58EiuuGyY6wxccAkp294v4XqefI.png\">",
                                        "<img src=\"paste-8ea8f0c5485915c6edfc5005564fed56bf898532.jpg\">",
                                        "<img src=\"paste-091af210d6281354a03b9e011b2fc2726eed51a0.jpg\">",
                                        "",
                                        "18ccaf6b-46a1-4d0f-9073-346b16597c78"
                                    ],
                                    "guid": "xq0P37n*iT",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<img src=\"paste-d6da5bb299042eb76f8e03ae602f4b79596a0509.jpg\">",
                                        "<img src=\"paste-61fad6a1d5bc5319d1c1861e96828ac446ed3044.jpg\">",
                                        "",
                                        "",
                                        "b553c1c2-d8e1-44e3-888f-f3500c3478de"
                                    ],
                                    "guid": "yA2Tt)0HYO",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<img src=\"4wJ0ogl_i5B3QBPqYSZYBLa3Gz61TnTPGYsz7zwb662YC8WpMnA8vhHM4vPIM0LcjDfooSwntKNwS17t26DTUJO-x1qeyjOmcifNWFXiEgT0lerVUqr.png\">",
                                        "<img src=\"paste-3e79de966b815c30dd6d0c4ac4225f4a6cf1c5a5.jpg\">",
                                        "# Example<br>def update(new_value = 10)<br>&nbsp; &nbsp; print(new_value)<br><br>print(update()) # prints 10<br>print(update(20)) # prints 20<br><br># So when we call the <b>update </b>function with an input of <b>20</b>, when the function definition executes, (which is `<b>print(new_value)</b>`) <b>new_value</b> is assigned the value of <b>20</b>.<br><br># If we call <b>update </b>without passing in any value, <b>new_value</b>&nbsp;defaults to <b>10</b>&nbsp;because we defined that argument to be <b>new_value = 10</b>, which basically means, \"If no value is provided for <b>new_value</b>, <b>new_value</b> will equal <b>10</b>, otherwise <b>new_value</b> will equal whatever the provided input is\"&nbsp;<br><br># If you still don't understand, watch this video:&nbsp;<a href=\"https://www.youtube.com/watch?v=DASOXeFFkCg\">https://www.youtube.com/watch?v=DASOXeFFkCg</a>",
                                        "",
                                        "e2cd43a8-88f9-43ae-9afe-016fa8d71a8f"
                                    ],
                                    "guid": "G9%<4ANZg4",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "9c4111ea-0114-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "BVjLHHEqp__OEj8KaW2Ba95r-1Vrk8DSJ8P2MWDkYTfVIGCeWe9fMcFi0k7GLyLqtifffgLD4furKe5KUpc0D79i6YQNXbjROHAC6MLWI6K_QDoE67Z.png"
                            ],
                            "name": "calling",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<span style=\"color: unset; font-style: unset; font-weight: unset; background-color: unset; text-decoration-line: unset;\"># Syntax to call the function below?\n<br><br>def work():\n<br>&nbsp; &nbsp; print(\"FOCUS\")</span>",
                                        "work()",
                                        "The parentheses call the function<br><br>so when function `work` is called, the code indented after `def work():` is executed, so `FOCUS` is printed.<br><br><img src=\"BVjLHHEqp__OEj8KaW2Ba95r-1Vrk8DSJ8P2MWDkYTfVIGCeWe9fMcFi0k7GLyLqtifffgLD4furKe5KUpc0D79i6YQNXbjROHAC6MLWI6K_QDoE67Z.png\">",
                                        "",
                                        "a2990d0f-91d9-4c68-8ba2-7eaf46af0028"
                                    ],
                                    "guid": "iI@Vqtxd&)",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "9c412ab8-0114-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "DZSWV7jua0VfNMAYsuw7b0zw4fT09k5nu_KJXN0Y2Te_beQKk0lUccwka1_FR18rP5sif_bsDQE4Mu3hKAUfshcyFANNnv42hB3wNMrbwz_Mu6bwt4v.png"
                            ],
                            "mid": 1629300492637,
                            "name": "parameters",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "# Set a default value of <b>100</b>&nbsp;for the <b>x</b> parameter<br><br>def fn(x):<br>&nbsp; &nbsp; print(x)",
                                        "def fn(x<b>=100</b>):\n<br>&nbsp; &nbsp; print(x)",
                                        "def fn(x):<br>&nbsp; &nbsp; print(x)<br>fn(1) # prints 1<br>fn() # throws TypeError: fn() missing 1 required positional argument: 'x'<br><br>--------------------------<br>def fn(x<b>=100</b>):<br>&nbsp; &nbsp; print(x)<br>fn(1) # prints 1<br>fn() # prints 100",
                                        "",
                                        "02ed8e6e-7d70-47be-9cec-6ba87a80de42"
                                    ],
                                    "guid": "d)>`4VZ2iE",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "{{c1::Parameters}} are variables that are defined in the function definition. They are assigned the values which were passed as arguments when the function was called, elsewhere in the code.",
                                        "<img src=\"DZSWV7jua0VfNMAYsuw7b0zw4fT09k5nu_KJXN0Y2Te_beQKk0lUccwka1_FR18rP5sif_bsDQE4Mu3hKAUfshcyFANNnv42hB3wNMrbwz_Mu6bwt4v.png\">",
                                        "",
                                        "2db39c78-d9ca-4e38-b039-4af356736d66"
                                    ],
                                    "guid": "zKW8|D55rw",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<span style=\"color: unset; font-style: unset; font-weight: unset; background-color: unset; text-decoration-line: unset;\"># Modify the function below so it has 3 parameters, </span><span style=\"color: unset; font-style: unset; background-color: unset; text-decoration-line: unset;\"><b>a</b></span><span style=\"color: unset; font-style: unset; font-weight: unset; background-color: unset; text-decoration-line: unset;\">, </span><span style=\"color: unset; font-style: unset; background-color: unset; text-decoration-line: unset;\"><b>b</b></span><span style=\"color: unset; font-style: unset; font-weight: unset; background-color: unset; text-decoration-line: unset;\">, and </span><span style=\"color: unset; font-style: unset; background-color: unset; text-decoration-line: unset;\"><b>c</b></span><span style=\"color: unset; font-style: unset; font-weight: unset; background-color: unset; text-decoration-line: unset;\">.\n<br><br>def fn():\n<br>&nbsp; &nbsp; pass</span>",
                                        "<span style=\"color: unset; font-style: unset; font-weight: unset; background-color: unset; text-decoration-line: unset;\">def fn(</span><span style=\"color: unset; font-style: unset; background-color: unset; text-decoration-line: unset;\"><b>a, b, c</b></span><span style=\"color: unset; font-style: unset; font-weight: unset; background-color: unset; text-decoration-line: unset;\">):\n<br>&nbsp; &nbsp; pass</span>",
                                        "",
                                        "",
                                        "70f5bedc-778a-4e97-b0cd-92a853fdec73"
                                    ],
                                    "guid": "hG0jbJ(KDS",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "9c4149da-0114-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "aINhMtGdodneSQIpvWPzRBzKS-QhY-EOp_ceYY6u_oyJZ9ULiQV5pfYH3gyFZtVl30bNfg81HZz7SQehw2s9xYlybLITnDG47E_mugT1U3fLj7T9GGA.png",
                                "kdfLihZ2nkpsYOSs4DTBUOhFgYjD8JN7EI3jgZ9sADhRWIru13uodp8rN1BX48c5pGFHeCYy2r5SOnqR4ZCiX2aRMmAjzf-OmXDqIxvAi1hSHo1qT-O.png"
                            ],
                            "name": "return",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<span style=\"color: unset; font-style: unset; font-weight: unset; background-color: unset; text-decoration-line: unset;\">#&nbsp;</span>Modify the function definition below so <b>10 </b>is printed <b>ONCE</b>.<br><span style=\"color: unset; font-style: unset; font-weight: unset; background-color: unset; text-decoration-line: unset;\"><br>\ndef fn():<br>&nbsp; &nbsp; </span><span style=\"color: unset; font-style: unset; background-color: unset; text-decoration-line: unset;\"><b># Add your code here<br></b><br>print(fn())<br></span>",
                                        "<span style=\"color: unset; font-style: unset; font-weight: unset; text-decoration-line: unset;\">def fn():<br>&nbsp; &nbsp;&nbsp;</span><span style=\"color: unset; font-style: unset; text-decoration-line: unset;\"><b>return 10<br></b><br>print(fn())</span>",
                                        "<img src=\"kdfLihZ2nkpsYOSs4DTBUOhFgYjD8JN7EI3jgZ9sADhRWIru13uodp8rN1BX48c5pGFHeCYy2r5SOnqR4ZCiX2aRMmAjzf-OmXDqIxvAi1hSHo1qT-O.png\">",
                                        "",
                                        "caacde7b-4591-4fd4-b007-74ac99857e26"
                                    ],
                                    "guid": "w+?Vk>(=X=",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "How to return multiple values from a function?<br><br>def fn():<br>&nbsp; &nbsp; return <b># ???</b>",
                                        "def fn():<br>&nbsp; &nbsp; return <b>1, 2, 3</b>",
                                        "All values that should be returned are listed after the return keyword and are separated by commas<br><br><br><img src=\"aINhMtGdodneSQIpvWPzRBzKS-QhY-EOp_ceYY6u_oyJZ9ULiQV5pfYH3gyFZtVl30bNfg81HZz7SQehw2s9xYlybLITnDG47E_mugT1U3fLj7T9GGA.png\">",
                                        "",
                                        "018a52f3-68d1-4d2b-acb4-f47defc5bc8d"
                                    ],
                                    "guid": "G*tntMa)4*",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "9c4165c8-0114-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "8gp4fZiixD0PC8u1uiPUeEIL3DpYu74K9-W3SbBFC-B_osGMzEAiIY2V-9ckq6m3jwAvMr3QjVz3ygEOyBS7QRJ4wu8K_w0ABiEsbzJjEyFGjySAlM4.png",
                                "JpQXOvLe_skpGZ1ztRrjdYrSHF_QUSVNHMPlIJimhrJrR_mX9--iLKKkt3f6vQFZiBW88FTdxvTavnvOQrPin7akK1lDmDWR3_o6MQBh6bO9lB4Ax0e.png"
                            ],
                            "mid": 1629300492637,
                            "name": "syntax",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "Syntax to define a function in Python?",
                                        "def &lt;function name&gt;(&lt;inputs&gt;): <br>&nbsp; &nbsp; # code goes here",
                                        "<span style=\"color: unset; font-style: unset; font-weight: unset; background-color: unset; text-decoration-line: unset;\"># example:\n<br>def example(a):\n<br>&nbsp; &nbsp; print(a)<br>&nbsp; &nbsp; return a + 1<br></span><img src=\"JpQXOvLe_skpGZ1ztRrjdYrSHF_QUSVNHMPlIJimhrJrR_mX9--iLKKkt3f6vQFZiBW88FTdxvTavnvOQrPin7akK1lDmDWR3_o6MQBh6bO9lB4Ax0e.png\">",
                                        "",
                                        "70e3dff7-9efa-4b87-b63c-b98ff1e30e0a"
                                    ],
                                    "guid": "eG}8:%}M3x",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "All code under a function declaration should be {{c1::indented}} to identify it as part of the function",
                                        "<img src=\"8gp4fZiixD0PC8u1uiPUeEIL3DpYu74K9-W3SbBFC-B_osGMzEAiIY2V-9ckq6m3jwAvMr3QjVz3ygEOyBS7QRJ4wu8K_w0ABiEsbzJjEyFGjySAlM4.png\">",
                                        "",
                                        "9fac3199-a478-4c57-8c0f-ba8dbd86f638"
                                    ],
                                    "guid": "v.H%^G@BkT",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "Define a function named `multiply` that takes in two inputs, `a` and `b`, and returns the product of those inputs.",
                                        "def multiply(a, b):&nbsp;<br>&nbsp; &nbsp; return a * b",
                                        "# example:\n<br>def multiply(a, b):\n<br>&nbsp; &nbsp; return a * b\n<br><br>product = multiply(4, 3)\n<br>print(product) # prints 12",
                                        "",
                                        "4e1d710d-b719-4081-895b-f324adcd7845"
                                    ],
                                    "guid": "FIHLI/%@)Q",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        }
                    ],
                    "crowdanki_uuid": "9c40dafe-0114-11ec-9d19-3e22fb2860fe",
                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [],
                    "name": "functions",
                    "notes": []
                },
                {
                    "__type__": "Deck",
                    "children": [
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f08be256-0089-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "paste-7ac04a7160306e7fcacf682a498d0c7e4b070699.jpg"
                            ],
                            "mid": 1629301724971,
                            "name": "break",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "In a loop, the {{c1::break}}&nbsp;keyword escapes the loop, regardless of the iteration number",
                                        "<img src=\"paste-7ac04a7160306e7fcacf682a498d0c7e4b070699.jpg\">",
                                        "",
                                        "17c3b099-2056-4cc2-9542-7de45424bc17"
                                    ],
                                    "guid": "u^{%;d}4#4",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "numbers = [1, 2, 3, 4, 5]\n<br>for number in numbers:\n<br>&nbsp; &nbsp; if number == 3:\n<br>&nbsp; &nbsp; &nbsp; &nbsp; break\n<br>&nbsp; &nbsp; print(number)",
                                        "1\n<br>2",
                                        "So when the number == 3, we break the for loop, meaning the for loop ends",
                                        "",
                                        "bba46670-62eb-4f64-9aed-d267284d8ab7"
                                    ],
                                    "guid": "t/LLYhQ=*,",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f08bfe6c-0089-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "paste-638e6334df47678a3c0d9deff9c19f48c74aa5e0.jpg"
                            ],
                            "mid": 1629301724971,
                            "name": "continue",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "In Python, the {{c1::continue}}&nbsp;keyword is used inside a loop to skip the remaining code inside the loop code block and begin the next loop iteration.",
                                        "<img src=\"paste-638e6334df47678a3c0d9deff9c19f48c74aa5e0.jpg\">",
                                        "",
                                        "ce8b6ebc-b539-4266-af4b-460a6bc0c652"
                                    ],
                                    "guid": "ed-q=lTj+<",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "numbers = [1, 2, 3]\n<br>for number in numbers:\n<br>&nbsp; &nbsp; if number == 2:\n<br>&nbsp; &nbsp; &nbsp; &nbsp; continue\n<br>&nbsp; &nbsp; print(number)",
                                        "1&nbsp;<br>3",
                                        "The continue  statement returns the control to the beginning of the for/while loop.",
                                        "",
                                        "a0cc11dc-e41e-4dff-9037-8afafe6d88c4"
                                    ],
                                    "guid": "HU=rGi?d+,",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f08c1c26-0089-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "paste-26fa6a4e0e0c054dc42cde9369efbdc9fef0bbee.jpg",
                                "paste-384f0f073728d3e290c4935c6fa1afd6137462b7.jpg",
                                "paste-45b3f3bcdf0134974bd56a1f8dcef8dad85123e1.jpg",
                                "paste-722403d6b4c7fdcb57c9e0419493fe4de6a3c282.jpg"
                            ],
                            "mid": 1629300492637,
                            "name": "for",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "for i in range(3):<br>&nbsp; &nbsp; print(5)",
                                        "5<br>5<br>5",
                                        "The code inside the loop (printing 5) is executed 3 times.",
                                        "",
                                        "dc6620a8-8960-453e-b9fc-17dc54ad9d8a"
                                    ],
                                    "guid": "hCs`b-a)4G",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "Syntax to create a for loop that prints the numbers 0 - 99?",
                                        "for i in range(100):<br>&nbsp; &nbsp; print(i)",
                                        "",
                                        "",
                                        "4806398f-9567-4353-aadb-0988c96ac5ad"
                                    ],
                                    "guid": "H]kE+D-et!",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "TRASH<br><br>In Python, a {{c1::for}}&nbsp;loop can be used to perform an action a specific number of times in a row.",
                                        "",
                                        "",
                                        "8c99ad21-ed01-4e12-a2c4-ff430dc2710c"
                                    ],
                                    "guid": "iT7&sApjQ9",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "A Python {{c1::for}}&nbsp;loop can be used to iterate over a list of items and perform a set of actions on each item or to perform an action a specific number of times in a row.<br><br>{{c1::for}} num in [1, 2, 3]:<br>&nbsp; &nbsp; print(num)<br><br># Prints:<br># 1<br>#&nbsp;2<br>#&nbsp;3",
                                        "",
                                        "",
                                        "e8713819-b176-4b22-8771-4ec888e34a1d"
                                    ],
                                    "guid": "ykf!bj~*M3",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "numbers = [1, 2, 3, 4]<br>for x in numbers:<br>&nbsp;&nbsp;&nbsp; print(x)",
                                        "1<br>2<br>3<br>4",
                                        "The loop prints each element of the list",
                                        "",
                                        "2759aba7-99c3-4c03-ab42-963033247f43"
                                    ],
                                    "guid": "A-R@Df3*HP",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "Syntax for creating a for loop?",
                                        "for &lt;temporary variable&gt; in &lt;collection&gt;:<br>&nbsp; &nbsp; &lt;action statement&gt;",
                                        "Don't forget the indentation after the loop<br><br><img src=\"paste-45b3f3bcdf0134974bd56a1f8dcef8dad85123e1.jpg\">",
                                        "",
                                        "42b284bb-e674-4395-b5e0-c9bf44f57a30"
                                    ],
                                    "guid": "HW]SjTQ;e$",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<img src=\"paste-26fa6a4e0e0c054dc42cde9369efbdc9fef0bbee.jpg\">",
                                        "<img src=\"paste-722403d6b4c7fdcb57c9e0419493fe4de6a3c282.jpg\">",
                                        "<img src=\"paste-384f0f073728d3e290c4935c6fa1afd6137462b7.jpg\">",
                                        "",
                                        "12785fff-070b-4a1e-88ae-c297a5d1b4a0"
                                    ],
                                    "guid": "R@j#h<RDN",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f08c4a52-0089-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "paste-195c24079a9e0e43871715e931c2688a69edcfff.jpg",
                                "paste-354bed6f0bf37c32a0502d9592b07914954079f5.jpg",
                                "paste-8e94cbaa27571783cae7d63da4cdd3feaa49c828.jpg",
                                "paste-cb179acf122144f3064d19ae6a7c055de13c8ff1.jpg",
                                "paste-e3f4b3dfbe00f96e94df2c4e0bc60a2794ffa917.jpg",
                                "paste-fc862289608377fd18c3a10507279eeea6e767a6.jpg",
                                "paste-fe1a5e95b75b523ef3feff85b53654a52357f97d.jpg"
                            ],
                            "name": "list comprehensions",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<img src=\"paste-e3f4b3dfbe00f96e94df2c4e0bc60a2794ffa917.jpg\">",
                                        "<img src=\"paste-cb179acf122144f3064d19ae6a7c055de13c8ff1.jpg\">",
                                        "<img src=\"paste-354bed6f0bf37c32a0502d9592b07914954079f5.jpg\">",
                                        "",
                                        "9c8b0d7e-42f5-4f6d-98da-92aae54de6d5"
                                    ],
                                    "guid": "H26jDo1lVi",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<img src=\"paste-fe1a5e95b75b523ef3feff85b53654a52357f97d.jpg\">",
                                        "<img src=\"paste-fc862289608377fd18c3a10507279eeea6e767a6.jpg\">",
                                        "<img src=\"paste-195c24079a9e0e43871715e931c2688a69edcfff.jpg\">",
                                        "",
                                        "5e0ca401-9856-46d1-a01a-2a30ae5a9d2f"
                                    ],
                                    "guid": "H_uVSG,2J+",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "What is the syntax to use list comprehensions?",
                                        "[EXPRESSION for ITEM in LIST &lt;if CONDITIONAL&gt;]",
                                        "# example:<br><br>my_list = [x * 2 for x in range(10) if x &lt; 5]<br>print(my_list) # [0, 2, 4, 6, 8]<br><br># OR<br><br>my_list = [i for i in range(10)]<br>print(my_list) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<br><br><img src=\"paste-8e94cbaa27571783cae7d63da4cdd3feaa49c828.jpg\">",
                                        "",
                                        "9edf0f52-4f3e-4f1c-b779-13be23c5afb4"
                                    ],
                                    "guid": "f_a0Ox(o7-",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f08c6f64-0089-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "paste-4c9b683f0df89b49155752b84d4d6b7ab720e884.jpg"
                            ],
                            "name": "nesting",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "# Code to print every name in the following list?:<br>groups = [[\"Jobs\", \"Gates\"], [\"Newton\", \"Euclid\"], [\"Einstein\", \"Feynman\"]]",
                                        "for group in groups:<br>&nbsp;&nbsp;&nbsp; for name in group:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; print(name)",
                                        "<img src=\"paste-4c9b683f0df89b49155752b84d4d6b7ab720e884.jpg\">",
                                        "",
                                        "0bd9e77d-dcdb-4f64-8c0a-9fdb6d11039f"
                                    ],
                                    "guid": "sd.bL:E&r]",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f08c88be-0089-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "paste-22f28ca8ad65bf682a183217ec648b30ba9921e4.jpg"
                            ],
                            "name": "terminology",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "An {{c1::infinite loop}}&nbsp;is a loop that never terminates",
                                        "<img src=\"paste-22f28ca8ad65bf682a183217ec648b30ba9921e4.jpg\">",
                                        "",
                                        "abe89297-9b0f-4c15-8cac-82574b49eab3"
                                    ],
                                    "guid": "c`7=Z8.haG",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "f08ca114-0089-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "paste-44fca3cc67ffbc4e83bfd86c6b49c0e8fbf4c0c2.jpg",
                                "paste-a8cd7dd5d0bb1578e26f240468f7780e401293b6.jpg",
                                "paste-ab41469cae015de52549a437123de41864d165eb.jpg",
                                "paste-b507c4a06432af9098b7436287f950175440c76c.jpg"
                            ],
                            "mid": 1629300492637,
                            "name": "while",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "Syntax for creating a while loop?",
                                        "while &lt;boolean expression&gt;:<br>&nbsp; &nbsp; &lt;action statement&gt;",
                                        "<img src=\"paste-44fca3cc67ffbc4e83bfd86c6b49c0e8fbf4c0c2.jpg\">",
                                        "",
                                        "d02c622a-2720-4dd6-b2f9-e9d980d7860e"
                                    ],
                                    "guid": "e(^;()QOri",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "In Python, a {{c1::while}}&nbsp;loop will repeatedly execute a code block as long as a condition evaluates to True.",
                                        "",
                                        "",
                                        "3f995056-d0f2-4898-bd8e-e304aeddba19"
                                    ],
                                    "guid": "K4e$Va:%?2",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<img src=\"paste-ab41469cae015de52549a437123de41864d165eb.jpg\">",
                                        "<img src=\"paste-b507c4a06432af9098b7436287f950175440c76c.jpg\">",
                                        "<img src=\"paste-a8cd7dd5d0bb1578e26f240468f7780e401293b6.jpg\">",
                                        "",
                                        "370ccff4-350f-472d-be42-a00fbef1065a"
                                    ],
                                    "guid": "k{|7#-W]ce",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        }
                    ],
                    "crowdanki_uuid": "f08bcdac-0089-11ec-9d19-3e22fb2860fe",
                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [],
                    "mid": 1629301724971,
                    "name": "loops",
                    "notes": []
                },
                {
                    "__type__": "Deck",
                    "children": [
                        {
                            "__type__": "Deck",
                            "children": [
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "3efa41da-0139-11ec-9560-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "mid": 1629415250870,
                                    "name": "code challenges",
                                    "notes": []
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c8a03ef0-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "mid": 1629300492637,
                                    "name": "output",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(3 % 7)",
                                                "3",
                                                "`7` goes into `3` zero times. So the remainder is 3.",
                                                "",
                                                "f2faad16-81f5-446d-bce5-87f5086d1bed"
                                            ],
                                            "guid": "Qe-)[?knZ[",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(7 % 3)",
                                                "1",
                                                "",
                                                "",
                                                "ef00f22a-af0d-425f-9e3a-4319b30f4862"
                                            ],
                                            "guid": "Euo)=x`3!$",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(3 % 3)",
                                                "0",
                                                "",
                                                "",
                                                "860e2a52-e2b2-40d9-8b7f-9286c8484b42"
                                            ],
                                            "guid": "Nu{l^Jqyi9",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(3**2)",
                                                "9",
                                                "",
                                                "",
                                                "1cd76819-a614-4935-86fc-dcc3c20ba6c7"
                                            ],
                                            "guid": "o|gdaXt3Q^",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "number = 4/2<br>print(number)",
                                                "2.0",
                                                "division in python always returns a floating point number, not an integer.",
                                                "",
                                                "1a6bd76d-83cc-4e29-8c69-9a76bd543876"
                                            ],
                                            "guid": "N7>So}e$<E",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(5 // 2)",
                                                "2",
                                                "// is the floor divison operator, so it divides <b>5</b> by <b>2</b> which is <b>2.5</b>, and then rounds it down to <b>2</b>.",
                                                "",
                                                "D5A9D989-E11C-46D6-858E-8E1B54B3D43B"
                                            ],
                                            "guid": "x-LLrzdf4O",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(5.0 // 2)",
                                                "2.0",
                                                "// is the floor divison operator, so it divides&nbsp;<b>5.0</b>&nbsp;by&nbsp;<b>2</b>&nbsp;which is&nbsp;<b>2.5</b>, and then rounds it down to&nbsp;<b>2.0</b>.",
                                                "",
                                                "FD820BC9-6C69-42DA-97AA-28F794A7218B"
                                            ],
                                            "guid": "isBE[kXV+f",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c8a0607e-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "H4fLHpN6Lsxe4KLwx672ZgHpjBrM3U0oGvr5NJ1WFUtH3h7OyEUNrt2loIEwYj8kBsrlICVvMXjdzOeTmvFPEggNaest6cjhMncLy_Q3soZHqfqcRQx.png"
                                    ],
                                    "mid": 1629301724971,
                                    "name": "syntax",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::+}} operator is used for addition",
                                                "",
                                                "",
                                                "7F99D3D7-28DF-47F9-9190-DB4CAFA9B2DF"
                                            ],
                                            "guid": "z%hdtTfark",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::-}} operator is used for subtraction",
                                                "",
                                                "",
                                                "F0D3CCB9-FDDF-4E31-8D39-7777EC3A127B"
                                            ],
                                            "guid": "n$yCPng^XO",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::*}} operator is used for multiplication",
                                                "",
                                                "",
                                                "8FCF2398-4FBD-4DF5-A6B8-086B01D897C1"
                                            ],
                                            "guid": "r(v&]d;d#*",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::/}} operator is used for division",
                                                "",
                                                "",
                                                "F2648701-C91B-4D02-A7B1-801586F17B1E"
                                            ],
                                            "guid": "Nd-sA?;nOJ",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::%}} operator is used for modulo operations.",
                                                "<img src=\"H4fLHpN6Lsxe4KLwx672ZgHpjBrM3U0oGvr5NJ1WFUtH3h7OyEUNrt2loIEwYj8kBsrlICVvMXjdzOeTmvFPEggNaest6cjhMncLy_Q3soZHqfqcRQx.png\">",
                                                "",
                                                "A697CA50-2E83-4911-AFDF-8D507B851FBB"
                                            ],
                                            "guid": "mT`69_yx:p",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::**}} operator is used for exponentiation",
                                                "",
                                                "",
                                                "970609DD-B837-485B-86C7-0FD5D6D28D33"
                                            ],
                                            "guid": "xX-v&+-d7[",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "Python uses&nbsp;{{c1:://}}&nbsp;as the floor division operator",
                                                "so the // operator is exactly like the / operator except it rounds the number down after performing the division operation.<br><br>e.g. 5 // 2 == 2",
                                                "",
                                                "E54739F6-3F6D-4FC3-AA95-BC93718F8FC6"
                                            ],
                                            "guid": "Bd^,&e^Z.;",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                }
                            ],
                            "crowdanki_uuid": "46bf43c0-ffe0-11eb-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "arithmetic",
                            "notes": []
                        },
                        {
                            "__type__": "Deck",
                            "children": [
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "fb5c7fb2-0140-11ec-ac5d-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "code challenges",
                                    "notes": []
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c8a09a08-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "output",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(not True)",
                                                "False",
                                                "",
                                                "",
                                                "9aa4b6a5-a133-4dfd-af83-e36f8c1e06df"
                                            ],
                                            "guid": "B5;s~!&B>Q",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(not False)",
                                                "True",
                                                "",
                                                "",
                                                "db68b18c-0d6d-4484-8041-dccaef4b011d"
                                            ],
                                            "guid": "eb>^DSw`sf",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(not 1 &gt; 2)",
                                                "True",
                                                "",
                                                "",
                                                "5d381953-dc1a-4b58-bbc6-afbde2d88f76"
                                            ],
                                            "guid": "pXi@>7mu*-",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(True and True)",
                                                "True",
                                                "",
                                                "",
                                                "79d0cc99-3d88-4598-90d2-4d688f12c3ab"
                                            ],
                                            "guid": "iI3NSBQ1rh",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(True and False)",
                                                "False",
                                                "The and operator returns True only if both it's left and right operand result in True.",
                                                "",
                                                "7f33faa9-393a-44ef-8af8-2a551623cbb5"
                                            ],
                                            "guid": "MDuF_j^gFj",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(False and False)",
                                                "False",
                                                "",
                                                "",
                                                "2b7b6088-2382-4bb9-8ca8-493aa3be1b8f"
                                            ],
                                            "guid": "Dpe?esx58%",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(1 == 1 and 1 &lt; 2)",
                                                "True",
                                                "",
                                                "",
                                                "271a6f2a-4263-4473-a8b7-dce4073bb2f4"
                                            ],
                                            "guid": "N@A}=*z0.q",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(1 &lt; 2 and 2 &lt; 1)",
                                                "False",
                                                "",
                                                "",
                                                "d57d91ba-db60-4433-b43d-02384c3722d5"
                                            ],
                                            "guid": "j>hVn#hz.L",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(True or True)",
                                                "True",
                                                "",
                                                "",
                                                "0e59e83d-f48a-4a14-b727-b2728b3ba9d1"
                                            ],
                                            "guid": "Pe|*2x{nd`",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(True or False)",
                                                "True",
                                                "",
                                                "",
                                                "59096d6e-dfb3-4afc-8b56-750cbe95cbf5"
                                            ],
                                            "guid": "K8gkP5TB%R",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(False or False)",
                                                "False",
                                                "",
                                                "",
                                                "d8454122-767f-4dc1-9e7d-4b6a1d9f8f23"
                                            ],
                                            "guid": "fCq2zQVaZz",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c8a0c8a2-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "rUk-lQMQQCAZLB_WITNP629JQiCcMWM1nMwlc83kiprfwGhsE1WfK4TuQiCiYxyiPapnCmtTP3o1Jcj0dRkoq55isbfGVx8U1s1yvv2ZE6jslxfZlqH.png",
                                        "wqKvy_I1gp9-XUGEmeidj1ek8YqZs2ib-rNhcdqY736knNzCsmAgsauWzdECLSVYtsWHdOLDtW_uP4rL2hFSGixUL5xtQj6GTEqvHHOjjHywwL7cMpe.png",
                                        "zBkC9zVjCf3o_ji8HwvU9-ekv00ksmPfPEpo8VvIXdoEOFKQ2WssZuAR0Cm7a_JhEydr-15MkRDN-Tr7kxvtoMP1kRzyP0CoaQspQ3r4yBdD4r2yug7.png"
                                    ],
                                    "name": "syntax",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::not}} operator is used in a Boolean expression in order to evaluate the expression to its inverse value.",
                                                "<img src=\"zBkC9zVjCf3o_ji8HwvU9-ekv00ksmPfPEpo8VvIXdoEOFKQ2WssZuAR0Cm7a_JhEydr-15MkRDN-Tr7kxvtoMP1kRzyP0CoaQspQ3r4yBdD4r2yug7.png\">",
                                                "",
                                                "5C264750-B2F0-4B23-9456-EC1ECBA63D58"
                                            ],
                                            "guid": "c;`]4(R6q7",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The Python {{c1::and}} operator performs a Boolean comparison between two Boolean values, variables, or expressions. If both sides of the operator evaluate to True then it returns True.",
                                                "<img src=\"wqKvy_I1gp9-XUGEmeidj1ek8YqZs2ib-rNhcdqY736knNzCsmAgsauWzdECLSVYtsWHdOLDtW_uP4rL2hFSGixUL5xtQj6GTEqvHHOjjHywwL7cMpe.png\">",
                                                "",
                                                "F25CA83D-3B0E-4538-998E-511B0B88B64C"
                                            ],
                                            "guid": "J7WH(K-Ifz",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The Python {{c1::or}} operator combines two Boolean expressions and evaluates to True if at least one of the expressions returns True.",
                                                "<img src=\"rUk-lQMQQCAZLB_WITNP629JQiCcMWM1nMwlc83kiprfwGhsE1WfK4TuQiCiYxyiPapnCmtTP3o1Jcj0dRkoq55isbfGVx8U1s1yvv2ZE6jslxfZlqH.png\">",
                                                "",
                                                "27CDE63D-5103-4FEE-BC32-313E9C0A00D0"
                                            ],
                                            "guid": "uh*x@]-e);",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                }
                            ],
                            "crowdanki_uuid": "46bf7066-ffe0-11eb-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "logical",
                            "notes": []
                        },
                        {
                            "__type__": "Deck",
                            "children": [
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "fb5d0338-0140-11ec-ac5d-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "code challenges",
                                    "notes": []
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c8a0f804-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "misc",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "If the values being compared using the  ==  operator are the same, the operator returns {{c1::True}}<i></i> , otherwise, it returns {{c1::False}}<i></i>.",
                                                "",
                                                "",
                                                "BBB73FCB-3658-4C52-8AE1-D86588001B04"
                                            ],
                                            "guid": "t7DhIDxG9f",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c8a10d44-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "paste-d5150a4dc82c9cecc8dfb7dc8c6d84886c9ffe6d.jpg",
                                        "paste-dae22a687362cffc9c7d0e75b13621a6b2979e94.jpg"
                                    ],
                                    "name": "output",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(\"example\" == \"example\")",
                                                "True",
                                                "",
                                                "",
                                                "a1c53517-0a13-49f7-ad0b-1310545e1c22"
                                            ],
                                            "guid": "E^Ck:DpSIb",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print( (1 &lt; 2) == (1 &lt; 2) )",
                                                "True",
                                                "",
                                                "",
                                                "6e342e23-d647-4113-bb50-3433c2d43eef"
                                            ],
                                            "guid": "n?+R%57:E|",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"paste-dae22a687362cffc9c7d0e75b13621a6b2979e94.jpg\">",
                                                "<img src=\"paste-d5150a4dc82c9cecc8dfb7dc8c6d84886c9ffe6d.jpg\">",
                                                "",
                                                "",
                                                "8e906339-9386-411b-8073-61072e0492f7"
                                            ],
                                            "guid": "fy]J,/!fvU",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(2 == \"2\")",
                                                "False",
                                                "The operator takes the data type into account when making the comparison, so a string value of \"2\" is not considered the same as a numeric value of 2.",
                                                "",
                                                "5f11de44-f8cc-499d-9d2d-1bcfcbe24435"
                                            ],
                                            "guid": "hW>+ujg|?c",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(False == False)",
                                                "True",
                                                "",
                                                "",
                                                "b91604e7-fc8a-4fee-b45e-2bd7e2f035db"
                                            ],
                                            "guid": "Ot8Q2:#)9Y",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(\"example\" != \"example\")",
                                                "False",
                                                "",
                                                "",
                                                "f72b4fc4-2a56-4307-9668-fe348512cc00"
                                            ],
                                            "guid": ">9GPfgviy",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print( (2 &gt; 1) != (1 &lt; 2) )",
                                                "False",
                                                "The code above is the same as `print(True != True)`",
                                                "",
                                                "f7288408-9b0c-4265-8695-12cc6f475b25"
                                            ],
                                            "guid": "vL#=Fu|%^[",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(False != False)",
                                                "False",
                                                "",
                                                "",
                                                "1c9b24ef-a5e8-46ee-a349-ef865dc6b614"
                                            ],
                                            "guid": "r31ne>{ex{",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(3 &lt; 3)",
                                                "False",
                                                "",
                                                "",
                                                "0c7bcb68-10d9-4b4f-bd6e-af91e5bff8b5"
                                            ],
                                            "guid": "zadsNiOd[9",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(3 &gt;= 3)",
                                                "True",
                                                "",
                                                "",
                                                "96ba92b5-e172-4399-b6e6-ed50adb25a4d"
                                            ],
                                            "guid": "w4RTmG9TAj",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c8a13904-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "nPgQ1J8suQD9OT0cTFD2E6MpHo1onsaVD_d1h1jMAW9b2KeqUuY8K0HxsOtlFY_MMyZQ6fLhBTW5nIHqXn3HNhnQCsyPgKygJOY-1P0EKDmmmYgo9CI.png",
                                        "zuqCVIfVJIgRH_J16nouxdJBvsCiA6f4xNSw4lWiJ1qzavcPCLMEP39GgwxQZTKtot_LXN9SyKN7fn_31PHHKiv3FgrEyQGGNu4fJ5foBmczOtngqxi.png"
                                    ],
                                    "name": "syntax",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::==}} operator is used to compare two values, variables, or expressions and returns True if they are the same.",
                                                "<img src=\"nPgQ1J8suQD9OT0cTFD2E6MpHo1onsaVD_d1h1jMAW9b2KeqUuY8K0HxsOtlFY_MMyZQ6fLhBTW5nIHqXn3HNhnQCsyPgKygJOY-1P0EKDmmmYgo9CI.png\">",
                                                "",
                                                "A4DDA2E9-D714-4463-8E2F-5C5391F8AB1A"
                                            ],
                                            "guid": "kCvKzZHmVc",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::!=}}&nbsp;operator is used to compare two values, variables, or expressions and returns `True` if they are&nbsp;<b>NOT</b>&nbsp;the same, otherwise, it returns `False`.",
                                                "<img src=\"zuqCVIfVJIgRH_J16nouxdJBvsCiA6f4xNSw4lWiJ1qzavcPCLMEP39GgwxQZTKtot_LXN9SyKN7fn_31PHHKiv3FgrEyQGGNu4fJ5foBmczOtngqxi.png\">",
                                                "",
                                                "54300B37-FB5E-45DC-8336-449C28CA05E3"
                                            ],
                                            "guid": "N@;yfSG;ir",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "{{c1::&lt;}} and {{c1::&gt;}} are&nbsp;the \"less than\" and \"greater than\" comparison operators.<br><br>",
                                                "",
                                                "",
                                                "A3C9E324-AA0A-4D63-BE23-4C24F5B25E2A"
                                            ],
                                            "guid": "x#4e~^T22r",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "{{c1::&gt;=}} and {{c1::&lt;=}} are&nbsp;the \"greater than or equal to\" and \"less than or equal to\" comparison operators.",
                                                "",
                                                "",
                                                "E4E93142-A4AE-4C45-B0C5-773341551A55"
                                            ],
                                            "guid": "IjW?WuJofb",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                }
                            ],
                            "crowdanki_uuid": "46bfd286-ffe0-11eb-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "relational",
                            "notes": []
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "46c0729a-ffe0-11eb-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "syntax",
                            "notes": []
                        }
                    ],
                    "crowdanki_uuid": "46bf26d8-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [],
                    "name": "operators",
                    "notes": []
                },
                {
                    "__type__": "Deck",
                    "children": [
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "42fbb8c6-004a-11ec-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "paste-a2318102197fe84922949801efc722c27b5517a3.jpg"
                            ],
                            "name": "booleans",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "The {{c1::Boolean}} data type is a data type that has only one of two possible values: <b>True </b>or <b>False</b>",
                                        "<img src=\"paste-a2318102197fe84922949801efc722c27b5517a3.jpg\">",
                                        "",
                                        "d672534d-a6e4-43e3-ad9d-d83fc0a148d9"
                                    ],
                                    "guid": "Bl7+GqM;nI",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "What values can boolean datatypes be?",
                                        "`True` or `False`",
                                        "",
                                        "",
                                        "d3fd866b-6959-4448-83e8-e075d3bbb528"
                                    ],
                                    "guid": "Qk{K6}OXTq",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "42fbcbcc-004a-11ec-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "CUrnvWcjx9lg0pEGi3uaNC3AcePODfkWN1ECXyMK0UHXu24khY97yXfQgGrUY3TODzSfsiRdM7QZ6tPl4D4nxOLmzjeOVEAdseL-sHF7fIfe_dU5lzt.png",
                                "NGqjZ6wa2Lpdvs8dOXF1iMW3_najuUqwfUSM77GWf9KrcyLJm4QM6jooA8acO_BGdQiqlIYmCOPbQxtzCjOE_CsWy9ggdAb3f4y0Ixh1xJBMdvUqnw8.png",
                                "paste-1fa1f4d149dafe7666700bd8fbfba6f822758937.jpg",
                                "paste-d2a10660f5c823f590165c1719d910d7c389f220.jpg"
                            ],
                            "name": "numbers",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "An {{c1::integer}} is a number that can be written without a fractional part (no decimal).",
                                        "<img src=\"NGqjZ6wa2Lpdvs8dOXF1iMW3_najuUqwfUSM77GWf9KrcyLJm4QM6jooA8acO_BGdQiqlIYmCOPbQxtzCjOE_CsWy9ggdAb3f4y0Ixh1xJBMdvUqnw8.png\">",
                                        "",
                                        "f99d4a9f-35d3-4af8-8091-34cba0b5eb88"
                                    ],
                                    "guid": "w};^e>&se",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": [
                                        "codecademy",
                                        "python"
                                    ]
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "What is an integer?",
                                        "numbers that have no decimal",
                                        "",
                                        "",
                                        "7db85a60-5b6c-46de-a4b9-1a56e8265d0e"
                                    ],
                                    "guid": "QEpP~Z7%YU",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": [
                                        "codecademy",
                                        "python"
                                    ]
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "What is a floating point number?",
                                        "0.07",
                                        "A number with a decimal portion<br><img src=\"CUrnvWcjx9lg0pEGi3uaNC3AcePODfkWN1ECXyMK0UHXu24khY97yXfQgGrUY3TODzSfsiRdM7QZ6tPl4D4nxOLmzjeOVEAdseL-sHF7fIfe_dU5lzt.png\">",
                                        "",
                                        "ac3accfc-ce90-4eb8-9be7-33e5958d22a7"
                                    ],
                                    "guid": "Jp#_ppAWJm",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": [
                                        "codecademy",
                                        "python"
                                    ]
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<img src=\"paste-d2a10660f5c823f590165c1719d910d7c389f220.jpg\">",
                                        "<img src=\"paste-1fa1f4d149dafe7666700bd8fbfba6f822758937.jpg\">",
                                        "",
                                        "",
                                        "b1347720-799e-4795-97b4-662b982684d2"
                                    ],
                                    "guid": "MshX*fFvY1",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        }
                    ],
                    "crowdanki_uuid": "46bed1f6-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [],
                    "name": "primitive datatypes",
                    "notes": []
                },
                {
                    "__type__": "Deck",
                    "children": [],
                    "crowdanki_uuid": "46c0b2aa-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [
                        "A-DK9veeCBCnaS7s9M6yhJo65OqXNxBLUb941xpIfONk_AjKxlOQ82Ccmv4GNWslaNKNZvs0jn7YocS4H0Tw079h32e8uD0lbiGSp28aP3W7W4uoZzF.png",
                        "Bk5kwnadwRn1Atf3wFoRa0yCxp5japMwz0CIYVMZNscrHpLMUHvp7ZvJn24oh8sgMqdPs7nhY8_LbE5Q1IwpAdLcXCuGz3VHZB1jARrtYQ9stmAmFRD.png",
                        "e2sDqVgd_12rfVKEknSw750a_altjFds0yr6m9mS63OTDM1CSpcjlJ7-eJSvu9mMFZwA4VZEg38pTneZC6bC19zmv4tGobwJ8OxPRLvrMu0RGwxygWe.png"
                    ],
                    "name": "reserved keywords",
                    "notes": [
                        {
                            "__type__": "Note",
                            "fields": [
                                "The {{c1::#}} character is used to make comments",
                                "<img src=\"Bk5kwnadwRn1Atf3wFoRa0yCxp5japMwz0CIYVMZNscrHpLMUHvp7ZvJn24oh8sgMqdPs7nhY8_LbE5Q1IwpAdLcXCuGz3VHZB1jARrtYQ9stmAmFRD.png\">",
                                "",
                                "3340E666-E4FF-410B-9CCD-7E37CEC770FE"
                            ],
                            "guid": "BOW&8$9R|-",
                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "What is the # character for?",
                                "Making comments",
                                "<img src=\"Bk5kwnadwRn1Atf3wFoRa0yCxp5japMwz0CIYVMZNscrHpLMUHvp7ZvJn24oh8sgMqdPs7nhY8_LbE5Q1IwpAdLcXCuGz3VHZB1jARrtYQ9stmAmFRD.png\">",
                                "",
                                "93298d48-927e-438d-8510-cdbd1f5736c0"
                            ],
                            "guid": "udSr)3hhm6",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "A {{c1::try}}<i></i> and {{c1::except}}<i></i> block can be used to handle error in code block.",
                                "<img src=\"e2sDqVgd_12rfVKEknSw750a_altjFds0yr6m9mS63OTDM1CSpcjlJ7-eJSvu9mMFZwA4VZEg38pTneZC6bC19zmv4tGobwJ8OxPRLvrMu0RGwxygWe.png\">",
                                "",
                                "7D139D9F-F139-4104-878B-3BF5ABF7A1F6"
                            ],
                            "guid": "d*#/ga-xam",
                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "The {{c1::in}} keyword is used to determine if a letter or a substring exists in a string. It returns True if a match is found, otherwise False is returned.<br><br>print(\"a\" {{c1::in}} \"apple\") # prints True<br>print(\"b\" {{c1::in}} \"apple\") # print False",
                                "<img src=\"A-DK9veeCBCnaS7s9M6yhJo65OqXNxBLUb941xpIfONk_AjKxlOQ82Ccmv4GNWslaNKNZvs0jn7YocS4H0Tw079h32e8uD0lbiGSp28aP3W7W4uoZzF.png\">",
                                "",
                                "56A52540-D776-426B-879B-A53910BEF019"
                            ],
                            "guid": "e*$*h:y0}Y",
                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        }
                    ]
                },
                {
                    "__type__": "Deck",
                    "children": [],
                    "crowdanki_uuid": "9c445404-0114-11ec-9d19-3e22fb2860fe",
                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [
                        "0Iv3_iEOugauPXL6hNGV-0qbfedUkNi0luwImnu_SMVqze_bqok7gO3J-Ht4nDr6u-954YY7mH6YADGtZ5TljVuywTGgVRHNnTj3q3VXqplgn7rYCBb.png",
                        "F2Jad5mt_Rf06E5jQF9EIBsS53BqLkNHMBHj6Co3pbkXBiDEpU6WvS6uG5E1-eRGHhFmOTlK9Mpz_3xdkS4WVKMJivT3JuhjmNJX9_Z32Fp9yz86ieX.png",
                        "S0zLaotYru1_TVdP2pSMa0phd5JRn10yr0ILh7bljDWNzcN7AvY4k0g0zXWVip3seyw__Aab9nYByqkiHiRsTrZDe_Ro7aFv0QcK4msBJQVAh1EfxOD.png",
                        "gUeng9G6KF4-HG7KQ-GdG7mMQuxKRljm9AwgmPycbBt1syHoNRI6umhxxNAIqwUr_1vUPYrplKVVJfLbZ_S6grdl_hm9UEGgoK6wh-KeNmbQBU6feT8.png",
                        "paste-72e29472e08172ab0c9f750da67e82bf05df6b05.jpg",
                        "paste-c2a238adc67fa2ceabf3fd01d3f35878ee9e8bff.jpg"
                    ],
                    "mid": 1629301724971,
                    "name": "scope",
                    "notes": [
                        {
                            "__type__": "Note",
                            "fields": [
                                "def func():\n<br>&nbsp; &nbsp; x = 1\n<br><br>x = 2\n<br>func()\n<br>print(x)",
                                "2",
                                "x inside func() is local",
                                "",
                                "362349aa-7260-4cbf-862e-cae847c767e6"
                            ],
                            "guid": "B4qzsjw&!-",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "def func():\n<br>&nbsp; &nbsp; x = 1\n<br><br>print (x)",
                                "error",
                                "NameError: name 'x' is not defined<br><br>func() wasn't called, and even if it was, x is a local variable (not global)",
                                "",
                                "eb717d16-175f-4444-b0b2-f93ffda36575"
                            ],
                            "guid": "zF`LE4Kkz=",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "def my_function(value): <br>&nbsp; &nbsp; print(value)<br><br>my_function(7) <br>print(value)",
                                "7\n<br>Error",
                                "7<br>NameError: name 'value' is not defined<br><br><img src=\"F2Jad5mt_Rf06E5jQF9EIBsS53BqLkNHMBHj6Co3pbkXBiDEpU6WvS6uG5E1-eRGHhFmOTlK9Mpz_3xdkS4WVKMJivT3JuhjmNJX9_Z32Fp9yz86ieX.png\">",
                                "",
                                "1837804a-a040-46cc-8e8f-e43ecf2060c5"
                            ],
                            "guid": "bR#V+mmWSw",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "<img src=\"0Iv3_iEOugauPXL6hNGV-0qbfedUkNi0luwImnu_SMVqze_bqok7gO3J-Ht4nDr6u-954YY7mH6YADGtZ5TljVuywTGgVRHNnTj3q3VXqplgn7rYCBb.png\">",
                                "<img src=\"paste-72e29472e08172ab0c9f750da67e82bf05df6b05.jpg\">",
                                "<img src=\"paste-c2a238adc67fa2ceabf3fd01d3f35878ee9e8bff.jpg\"><br># Example: <br><br>counter = 0 <br><br>def update(): <br>&nbsp; &nbsp; new_counter = counter + 1 <br>&nbsp; &nbsp; return new_counter <br><br>print(counter) # prints 0 <br>print(new_counter) # throws error: NameError: name 'new_counter' is not defined <br><br># This is because new_counter is defined inside the update function. Variables defined inside a function cannot be accessed outside the function. This is because of something called 'scope'. Scope is a concept that refers to where values and functions can be accessed. <br><br># In Python, values and functions can be globally scoped, or scoped inside a function. Since counter is scoped outside of the update function, it is globally scoped, but new_counter is scoped inside the update function. <br><br># So new_counter will throw an error if we try to access it outside of the update function since it was defined inside update, so it is only scoped within the update function. It is not defined outside the update function. <br><br># Watch this video if you still don't understand: <a href=\"https://www.youtube.com/watch?v=wueXfiVkw1I\">https://www.youtube.com/watch?v=wueXfiVkw1I</a> <br><br># Then watch this video if you still don't understand: <a href=\"https://www.youtube.com/watch?v=QVdf0LgmICw\">https://www.youtube.com/watch?v=QVdf0LgmICw</a> <br><br># If you still don't understand, please contact me or submit feedback on this card.",
                                "",
                                "4700c728-3fdd-4e4a-917c-a3c8fb4c4de2"
                            ],
                            "guid": "g{eLR19|:A",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "How are variables scoped in python?",
                                "variables defined within a function can only be accessed within that function.",
                                "<img src=\"S0zLaotYru1_TVdP2pSMa0phd5JRn10yr0ILh7bljDWNzcN7AvY4k0g0zXWVip3seyw__Aab9nYByqkiHiRsTrZDe_Ro7aFv0QcK4msBJQVAh1EfxOD.png\"><br># Local Scope\n<br># A variable created inside a function belongs to the local <br>\n# scope of that function, and can only be used inside that function\n<br><br>#A variable created inside a function is available inside that function:\n<br>def myfunc():\n<br>&nbsp; &nbsp; x = 300\n<br>&nbsp; &nbsp; print(x)\n<br>myfunc() # prints 300\n<br><br># A variable created outside of a function is global and can be used by anyone:\n<br>x = 300\n<br>def myfunc():\n<br>&nbsp; &nbsp; print(x)\n<br>myfunc() # prints 300\n<br>print(x) # prints 300",
                                "",
                                "486f6143-5b87-47bb-838d-c52723cf59a0"
                            ],
                            "guid": "BE<CYV,ZPX",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "A variable that is defined outside of a function is called a {{c1::global}} variable",
                                "<img src=\"gUeng9G6KF4-HG7KQ-GdG7mMQuxKRljm9AwgmPycbBt1syHoNRI6umhxxNAIqwUr_1vUPYrplKVVJfLbZ_S6grdl_hm9UEGgoK6wh-KeNmbQBU6feT8.png\">",
                                "",
                                "491f5c31-e18d-4f3e-9b69-eb15b48495d1"
                            ],
                            "guid": "cwMQQ@JRg<",
                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        }
                    ]
                },
                {
                    "__type__": "Deck",
                    "children": [],
                    "crowdanki_uuid": "46c0fc9c-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [
                        "7mcRtj6smLLfiY__C7wBKv8Dtr7HLjCUeWnKY_o0V4XELUnVrJlueCRgKj3fFy0etn_IX_e-YgVqO-_oBDTFJU3dBTy6IPGBqN5PUKGhC7G7t-vEaT3.png",
                        "paste-b488ab7911a3d868d363d5ad3030ad5578f6bf1b.jpg",
                        "paste-fb017733aff396cd32c45f409e4fe3e2517e4c29.jpg"
                    ],
                    "name": "syntactic sugar",
                    "notes": [
                        {
                            "__type__": "Note",
                            "fields": [
                                "Make the following code more concise:<br><br>x = x + 1",
                                "x += 1",
                                "<img src=\"7mcRtj6smLLfiY__C7wBKv8Dtr7HLjCUeWnKY_o0V4XELUnVrJlueCRgKj3fFy0etn_IX_e-YgVqO-_oBDTFJU3dBTy6IPGBqN5PUKGhC7G7t-vEaT3.png\">",
                                "",
                                "0e9ecbb9-de78-4f10-8f34-788a80871d74"
                            ],
                            "guid": "u,fV60#f$}",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "<img src=\"paste-b488ab7911a3d868d363d5ad3030ad5578f6bf1b.jpg\">",
                                "<img src=\"paste-fb017733aff396cd32c45f409e4fe3e2517e4c29.jpg\">",
                                "",
                                "",
                                "410eb13a-855c-4a41-b875-ea7ae952384a"
                            ],
                            "guid": "D<jzQCr$(^",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        }
                    ]
                },
                {
                    "__type__": "Deck",
                    "children": [],
                    "crowdanki_uuid": "46c17348-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [
                        "6PdM1xUXoQzHYchDZvjI44Vu8qXWmjKPBRjNgw1oBqPfeKHfb4pqceJtgbAt9-RiwgrvSXZEP6Lku6dIImYF7FQQz-3H8B31dkQ9Bc5fNGZxPvSCnrG.png"
                    ],
                    "name": "terminology",
                    "notes": [
                        {
                            "__type__": "Note",
                            "fields": [
                                "A {{c1::variable}} is used to store data that will be used by the program.",
                                "<img src=\"6PdM1xUXoQzHYchDZvjI44Vu8qXWmjKPBRjNgw1oBqPfeKHfb4pqceJtgbAt9-RiwgrvSXZEP6Lku6dIImYF7FQQz-3H8B31dkQ9Bc5fNGZxPvSCnrG.png\">",
                                "",
                                "B9B58EE9-9E0B-4B5E-AD79-396329188AE1"
                            ],
                            "guid": "jrEo`NQpHz",
                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "What is a boolean expression?",
                                "A statement that evaluates to either `True` or `False`",
                                "",
                                "",
                                "c8ca06ca-85e2-483a-a1a5-a64d4e091b88"
                            ],
                            "guid": "r#*$p1{B6_",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "In Python, for any specific data-type ( strings, booleans, lists, etc. ) there is built-in functionality that we can use to create, manipulate, and even delete our data. We call this built-in functionality a {{c1::method}}.",
                                "",
                                "",
                                "ed18faaf-1305-4a26-8bac-d35a598a2754"
                            ],
                            "guid": "Qibz)irB|c",
                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        }
                    ]
                },
                {
                    "__type__": "Deck",
                    "children": [],
                    "crowdanki_uuid": "46c130e0-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [
                        "paste-1a9355f142d6233c6d7486339b92aca886bfb57d.jpg",
                        "paste-370db977248659ec7f1d03c91f0d59b0e1f9448d.jpg",
                        "paste-49b886ac8f406677b43badfca4c863fe49a2306d.jpg",
                        "paste-f5ae5f0a880cf31abf851b04b388f8ac42e39101.jpg",
                        "qfEBWIei-AnSW237ORXpvCVon_38lgKvplCiBMe2WWbKPoVMcj5I60dmvNpRO8cmO6K5ADErVQy_NZCnIM2dQz834OtEqhKxaBOgoxGgNW86IlsHZXI.png"
                    ],
                    "name": "variables",
                    "notes": [
                        {
                            "__type__": "Note",
                            "fields": [
                                "How to declare a variable?",
                                "example = 'any value we want'",
                                "<img src=\"qfEBWIei-AnSW237ORXpvCVon_38lgKvplCiBMe2WWbKPoVMcj5I60dmvNpRO8cmO6K5ADErVQy_NZCnIM2dQz834OtEqhKxaBOgoxGgNW86IlsHZXI.png\">",
                                "",
                                "874afece-a233-4032-a948-6b566f36fbc5"
                            ],
                            "guid": "MCzFgJIc63",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "<img src=\"paste-49b886ac8f406677b43badfca4c863fe49a2306d.jpg\">",
                                "42",
                                "<img src=\"paste-370db977248659ec7f1d03c91f0d59b0e1f9448d.jpg\"><br>In order to change the variable by multiplying it by 5, you would have had to do something like this:<br><br>`cool_number *= 5`<br>OR<br>`cool_number = cool_number * 5`<br><br>`cool_number * 5` does nothing because we don't save the result of multiplying the variable by 5 to anything.",
                                "",
                                "0d180093-9771-47f8-a06d-f47ce884d455"
                            ],
                            "guid": "JDzFs0Ga@`",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "<img src=\"paste-1a9355f142d6233c6d7486339b92aca886bfb57d.jpg\">",
                                "<img src=\"paste-f5ae5f0a880cf31abf851b04b388f8ac42e39101.jpg\">",
                                "",
                                "",
                                "1bcbb35f-779f-4fa5-87b9-6297595863ef"
                            ],
                            "guid": "nAJNeO80:s",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        }
                    ]
                }
            ],
            "crowdanki_uuid": "46be6e0a-ffe0-11eb-ac0f-3e22fb2860fe",
            "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [],
            "name": "Python 3",
            "notes": []
        },
        {
            "__type__": "Deck",
            "children": [],
            "crowdanki_uuid": "00b88e90-0440-11ec-a2b6-3e22fb2860fe",
            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [],
            "name": "Trash",
            "notes": [
                {
                    "__type__": "Note",
                    "fields": [
                        "<b>THIS CARD IS TRASH<br>Do not review this card...</b><br><br>{{c1::&lt;=}} is the \"less than or equal to\" comparison operator.",
                        "",
                        "",
                        "89377C9E-46B1-4542-B88F-4EA894E7985C"
                    ],
                    "guid": "IxDXX8<w&_",
                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<b>THIS CARD IS TRASH<br>Do not review this card...</b><br><br>{{c1::&gt;}} is the \"greater than\" comparison operator.",
                        "",
                        "",
                        "E32DADA5-1C9F-4C94-888D-BEA6B019C7DD"
                    ],
                    "guid": "JOL}PkI0:}",
                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<div><b>THIS CARD IS TRASH<br>Don't review it...</b><br><br><br>Create a function named&nbsp;<b>always_false()&nbsp;</b>that has one parameter named&nbsp;<b>num</b>.<br><br></div><div>Using an if statement, your variable&nbsp;<b>num</b>, and the operators&nbsp;<b>&gt;</b>, and&nbsp;<b>&lt;</b>, make it so your function will return&nbsp;<b>False</b>&nbsp;no matter what number is stored in&nbsp;<b>num</b>.<br><br></div><div>An if statement that is always false is called a contradiction. You will rarely want to do this while programming, but it is important to realize it is possible to do this.</div>",
                        "<b>Example 1:<br>input: </b>num = 0<br><b>output:&nbsp;</b>False<br><br><b>Example 2:</b><br><b>input:&nbsp;</b>num = 1<br><b>output:&nbsp;</b>False<br><br><b>Example 3:</b><br><b>input:&nbsp;</b>num = -1<br><b>output: </b>False",
                        "def always_false(num):",
                        "<div><div>print(always_false(0))</div><div># should print False</div><div>print(always_false(-1))</div><div># should print False</div><div>print(always_false(1))</div><div># should print False</div></div>",
                        "<a href=\"https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-control-flow\">https://www.codecademy.com/courses/learn-python-3/articles/advanced-python-code-challenges-control-flow</a>",
                        "Go to <b>3. Always False</b>",
                        "def always_false(num):<br>&nbsp;&nbsp;&nbsp; if num &gt; 0 and num &lt; 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return True<br>&nbsp;&nbsp;&nbsp; else:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return False",
                        "In our example, we use the contradiction of being greater than and less than 0 at the same time. No matter what value we pass into the function, our condition will always be false since it is not logically possible. You normally want to avoid creating conditions like this.",
                        "",
                        "1ee91d01-9753-4d09-8760-a157dce1f086"
                    ],
                    "guid": "d(Dm~V5VS&",
                    "note_model_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
                    "tags": []
                }
            ]
        }
    ],
    "crowdanki_uuid": "9484cde0-ffb4-11eb-9d39-3e22fb2860fe",
    "deck_config_uuid": "28efb9d2-fc9e-11eb-9db2-3e22fb2860fe",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "autoplay": true,
            "crowdanki_uuid": "28efb9d2-fc9e-11eb-9db2-3e22fb2860fe",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 1,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": false,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 1,
                "perDay": 9999
            },
            "newMix": 0,
            "newPerDayMinimum": 0,
            "replayq": true,
            "rev": {
                "bury": false,
                "ease4": 1.3,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "perDay": 9999
            },
            "reviewOrder": 0,
            "timer": 0
        },
        {
            "__type__": "DeckConfig",
            "autoplay": true,
            "crowdanki_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 1,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": false,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 1,
                "perDay": 9999
            },
            "newMix": 0,
            "newPerDayMinimum": 0,
            "replayq": true,
            "rev": {
                "bury": false,
                "ease4": 1.3,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "perDay": 200
            },
            "reviewOrder": 0,
            "timer": 0
        },
        {
            "__type__": "DeckConfig",
            "autoplay": true,
            "crowdanki_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 1,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": false,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 1,
                "perDay": 9999
            },
            "newMix": 0,
            "newPerDayMinimum": 0,
            "replayq": true,
            "rev": {
                "bury": false,
                "ease4": 1.3,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "perDay": 9999
            },
            "reviewOrder": 0,
            "timer": 0
        }
    ],
    "desc": "",
    "dyn": 0,
    "extendNew": 0,
    "extendRev": 0,
    "media_files": [],
    "name": "knowledge",
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
            "css": ".card {\n  font-family: arial;\n  font-size: 20px;\n  color: white;\n  background-color: #1e272e\n}\n\n\n#feedback, #submit{\n\t\tfont-size: 20px;\n\t}\n\n    #submit{\n    \tbackground: #f53b57;\n        color: white;\n        border: 0;\n        padding: 10px 20px 10px 20px;\n        border-radius: 5px;\n\t\t\t\t outline: none;\n    }\n    #submit:hover{\n    \tcursor: pointer;\n      background: #e52b47;\n    }\n    \n        #submit:active{\n    \tcursor: pointer;\n        background: #c50b27;\n    }\n\n    #feedbackwrapper{\n    \tdisplay: flex;\n        align-items: center;\n        flex-direction: column;\n    }\n\n\n\t\t/* LOADER STYLES */\n.loader {\n  border: 16px solid #f3f3f3; /* Light grey */\n  border-top: 16px solid #3498db; /* Blue */\n  border-radius: 50%;\n  width: 120px;\n  height: 120px;\n  animation: spin 2s linear infinite;\n\topacity: 0.8;\n\tposition: absolute;\n\tdisplay: none;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}",
            "flds": [
                {
                    "font": "Arial",
                    "name": "Front",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Back",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Optional",
                    "ord": 2,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Personal",
                    "ord": 3,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "ID",
                    "ord": 4,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Basic - Dev Accelerator",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [],
            "tmpls": [
                {
                    "afmt": "<head>\n<script defer>\nfunction load(){\nconst feedbackWrapper = document.getElementById(\"feedbackwrapper\")\nfeedbackWrapper.style.display = \"flex\"\nconst cardId = document.getElementById('id').textContent\nconst feedback = document.getElementById('feedback')\nconst button = document.getElementById('submit')\nconst loader = document.querySelector('.loader')\nbutton.onclick = async () => {\n  if (feedback.value === \"\"){\n\t\talert(\"Feedback not submitted because field was empty\")\n \t\treturn\n\t}\n\tloader.style.display = \"block\"\n\tconst response = await fetch(\"https://api-anki-feedback-collector.herokuapp.com/cardfeedback\", {\n\t\tmethod: 'POST',\n        headers: {\n        \t'Accept': 'application/json',\n        \t'Content-Type': 'application/json'\n      \t},\n      \tbody: JSON.stringify({\n        \tfeedback: feedback.value, \n            cardID: cardId\n        })\n    })\n\t\tloader.style.display = \"none\"\n    if (response.ok){\n    \tfeedback.value = ''\n    \talert(\"Feedback submitted successfully.\")\n    } else {\n    \talert(\"Error submitting feedback. Please notify me at 619-776-2454 OR alexficachirizo@gmail.com\")\n    }\n}\n}\nload()\n</script>\n</head>\n\n\n{{FrontSide}}\n\n<hr id=answer>\n<div style=\"color: #ffdd59;\">\n\t{{Back}}\n</div>\n\n{{#Personal}}\n<br><br>\n\t<div style=\"color: #0be881\">\n\t\t<em>Personal:</em><br><br>\n\t\t{{Personal}}\n\t</div>\n{{/Personal}}\n\n{{#Optional}}\n\t<div style=\"color: #4bcffa\">\n\t\t<br><br>\n\t\t<em>Optional:</em><br><br>\n\t\t{{Optional}}\n\t</div>\n{{/Optional}}\n<br><br><br><br>\n\n<div style=\"font-size: 8px\">\n\tAlex Ficachi Coaching\n\t<div style=\"visibility: hidden\">\n\t\tCARD ID: \n\t\t<span id=\"id\">\n\t\t\t{{ID}}\n\t\t</span>\n\t</div>\n</div>\n\n\n<br>\n<div id=\"feedbackwrapper\">\n<textarea cols=\"50\" id=\"feedback\" placeholder=\"Write feedback, questions, or suggestions here\" rows=\"8\"></textarea>\n<div class=\"loader\"></div>\n<button id=\"submit\">Submit</button>\n</div>",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Card 1",
                    "ord": 0,
                    "qfmt": "{{Front}}"
                }
            ],
            "type": 0
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "a2c9167c-0144-11ec-bb59-3e22fb2860fe",
            "css": ".card {\n  font-family: arial;\n  font-size: 20px;\n  color: white;\n  background-color: #1e272e\n}\n\na{\n\tcolor: #82ccdd;\n  text-decoration: underline;\n}\n\n#feedback, #submit{\n\t\tfont-size: 20px;\n\t}\n\n    #submit{\n    \tbackground: #f53b57;\n        color: white;\n        border: 0;\n        padding: 10px 20px 10px 20px;\n        border-radius: 5px;\n\t\t\t\t outline: none;\n    }\n    #submit:hover{\n    \tcursor: pointer;\n      background: #e52b47;\n    }\n    \n        #submit:active{\n    \tcursor: pointer;\n        background: #c50b27;\n    }\n\n    #feedbackwrapper{\n    \t   display: none;\n        align-items: center;\n        flex-direction: column;\n    }\n\n\n\t\t/* LOADER STYLES */\n.loader {\n  border: 16px solid #f3f3f3; /* Light grey */\n  border-top: 16px solid #3498db; /* Blue */\n  border-radius: 50%;\n  width: 120px;\n  height: 120px;\n  animation: spin 2s linear infinite;\n\topacity: 0.8;\n\tposition: absolute;\n\tdisplay: none;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}",
            "flds": [
                {
                    "font": "Arial",
                    "name": "Description",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Examples",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Starter Code",
                    "ord": 2,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Tests",
                    "ord": 3,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "URL",
                    "ord": 4,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "URL Instructions",
                    "ord": 5,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Answer",
                    "ord": 6,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Optional",
                    "ord": 7,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Personal",
                    "ord": 8,
                    "rtl": false,
                    "size": 20,
                    "sticky": true
                },
                {
                    "font": "Arial",
                    "name": "ID",
                    "ord": 9,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Code Challenge - Dev Accelerator",
            "req": [
                [
                    0,
                    "any",
                    [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [],
            "tmpls": [
                {
                    "afmt": "<head>\n<script defer>\nfunction load(){\nconst feedbackWrapper = document.getElementById(\"feedbackwrapper\")\nfeedbackWrapper.style.display = \"flex\"\nconst cardId = document.getElementById('id').textContent\nconst feedback = document.getElementById('feedback')\nconst button = document.getElementById('submit')\nconst loader = document.querySelector('.loader')\nbutton.onclick = async () => {\n  if (feedback.value === \"\"){\n\t\talert(\"Feedback not submitted because field was empty\")\n \t\treturn\n\t}\n\tloader.style.display = \"block\"\n\tconst response = await fetch(\"https://api-anki-feedback-collector.herokuapp.com/cardfeedback\", {\n\t\tmethod: 'POST',\n        headers: {\n        \t'Accept': 'application/json',\n        \t'Content-Type': 'application/json'\n      \t},\n      \tbody: JSON.stringify({\n        \tfeedback: feedback.value, \n            cardID: cardId\n        })\n    })\n\t\tloader.style.display = \"none\"\n    if (response.ok){\n    \tfeedback.value = ''\n    \talert(\"Feedback submitted successfully.\")\n    } else {\n    \talert(\"Error submitting feedback. Please notify me at 619-776-2454 OR alexficachirizo@gmail.com\")\n    }\n}\n}\nload()\n</script>\n</head>\n\n\n{{FrontSide}}\n\n<hr id=answer>\n<br>\n\n\n\n<div style=\"color: #ffdd59;\">\n# One possible solution: <br>\n\t{{Answer}}\n</div>\n\n{{#Personal}}\n<br><br>\n\t<div style=\"color: #0be881\">\n\t\t<em>Personal:</em><br><br>\n\t\t{{Personal}}\n\t</div>\n{{/Personal}}\n\n{{#Optional}}\n\t<div style=\"color: #4bcffa\">\n\t\t<br><br>\n\t\t<em>Optional:</em><br><br>\n\t\t{{Optional}}\n\t</div>\n{{/Optional}}\n<br><br><br><br>\n\n<div style=\"font-size: 8px\">\n\tAlex Ficachi Coaching\n\t<div style=\"visibility: hidden\">\n\t\tCARD ID: \n\t\t<span id=\"id\">\n\t\t\t{{ID}}\n\t\t</span>\n\t</div>\n</div>\n\n<br>\n<div id=\"feedbackwrapper\">\n<textarea cols=\"50\" id=\"feedback\" placeholder=\"Write feedback, questions, or suggestions here\" rows=\"8\"></textarea>\n<div class=\"loader\"></div>\n<button id=\"submit\">Submit</button>\n</div>\n\n",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Card 1",
                    "ord": 0,
                    "qfmt": "<style>\n #heading{\n\t\tcolor: #34e7e4;\n\t}\n\t\n</style>\nTest your code here:<br>\n({{URL Instructions}}):\n{{URL}}\n<br><br>\n\n<b id=\"heading\">Description</b>: <br>\n{{Description}}\n<br><br><br>\n\n{{#Examples}}\n<b id=\"heading\">Examples</b>: <br>\n{{Examples}}\n<br><br><br>\n{{/Examples}}\n\n{{#Starter Code}}\n<b id=\"heading\">Starting Code</b>: <br>\n{{Starter Code}}\n<br>\n<br>\n{{/Starter Code}}\n{{#Tests}}\n# Print statements to test code: <br>\n{{Tests}}\n{{/Tests}}"
                }
            ],
            "type": 0
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
            "css": ".card {\n  font-family: arial;\n  font-size: 20px;\n  color: white;\n  background-color: #1e272e;\n}\n\n.cloze {\n font-weight: bold;\n color: #ffdd59;\n}\n\n\n#feedback, #submit{\n\t\tfont-size: 20px;\n\t}\n\n    #submit{\n    \tbackground: #f53b57;\n        color: white;\n        border: 0;\n        padding: 10px 20px 10px 20px;\n        border-radius: 5px;\n\t\t\t\t outline: none;\n    }\n    #submit:hover{\n    \tcursor: pointer;\n      background: #e52b47;\n    }\n    \n        #submit:active{\n    \tcursor: pointer;\n        background: #c50b27;\n    }\n\n    #feedbackwrapper{\n    \tdisplay: flex;\n        align-items: center;\n        flex-direction: column;\n    }\n\n\n\t\t/* LOADER STYLES */\n.loader {\n  border: 16px solid #f3f3f3; /* Light grey */\n  border-top: 16px solid #3498db; /* Blue */\n  border-radius: 50%;\n  width: 120px;\n  height: 120px;\n  animation: spin 2s linear infinite;\n\topacity: 0.8;\n\tposition: absolute;\n\tdisplay: none;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}",
            "flds": [
                {
                    "font": "Arial",
                    "name": "Text",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Optional",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Personal",
                    "ord": 2,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "ID",
                    "ord": 3,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Cloze - Dev Accelerator",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [],
            "tmpls": [
                {
                    "afmt": "<head>\n<script defer>\nfunction load(){\nconst feedbackWrapper = document.getElementById(\"feedbackwrapper\")\nfeedbackWrapper.style.display = \"flex\"\nconst cardId = document.getElementById('id').textContent\nconst feedback = document.getElementById('feedback')\nconst button = document.getElementById('submit')\nconst loader = document.querySelector('.loader')\nbutton.onclick = async () => {\n  if (feedback.value === \"\"){\n\t\talert(\"Feedback not submitted because field was empty\")\n \t\treturn\n\t}\n\tloader.style.display = \"block\"\n\tconst response = await fetch(\"https://api-anki-feedback-collector.herokuapp.com/cardfeedback\", {\n\t\tmethod: 'POST',\n        headers: {\n        \t'Accept': 'application/json',\n        \t'Content-Type': 'application/json'\n      \t},\n      \tbody: JSON.stringify({\n        \tfeedback: feedback.value, \n            cardID: cardId\n        })\n    })\n\t\tloader.style.display = \"none\"\n    if (response.ok){\n    \tfeedback.value = ''\n    \talert(\"Feedback submitted successfully.\")\n    } else {\n    \talert(\"Error submitting feedback. Please notify me at 619-776-2454 OR alexficachirizo@gmail.com\")\n    }\n}\n}\nload()\n</script>\n</head>\n\n\n{{cloze:Text}}<br>\n\n{{#Personal}}\n\t<br><br>\n\t<div style=\"color: #0be881\">\n\t<em>Personal:</em><br><br>\n\t{{Personal}}\n  </div>\n{{/Personal}}\n\n{{#Optional}}\n\t<br><br>\n\t<div style=\"color: #4bcffa\">\n\t<em>Optional:</em><br><br>\n\t{{Optional}}\n  </div>\n{{/Optional}}\n\n<br><br><br><br>\n\n<div style=\"font-size: 8px\">\n\tAlex Ficachi Coaching\n\t<div style=\"visibility: hidden\">\n\t\tCARD ID: \n\t\t<span id=\"id\">\n\t\t\t{{ID}}\n\t\t</span>\n\t</div>\n</div>\n\n\n<br>\n<div id=\"feedbackwrapper\">\n<textarea cols=\"50\" id=\"feedback\" placeholder=\"Write feedback, questions, or suggestions here\" rows=\"8\"></textarea>\n<div class=\"loader\"></div>\n<button id=\"submit\">Submit</button>\n</div>",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Cloze",
                    "ord": 0,
                    "qfmt": "{{cloze:Text}}"
                }
            ],
            "type": 1
        }
    ],
    "notes": []
}
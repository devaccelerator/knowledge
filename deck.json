{
    "__type__": "Deck",
    "children": [
        {
            "__type__": "Deck",
            "children": [
                {
                    "__type__": "Deck",
                    "children": [],
                    "crowdanki_uuid": "46be7fbc-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [
                        "SXA8x_aNcZiD7NOIS04m0AL8qcGYSaHJBysU7G7ypZBsMcGC15-JMOOfSw-6MsNbDThVEJQefMygzYGIfmUQKM7RmTEmGW-S3Q45ky1khzTKdRKVAk0.png",
                        "gW1axJRiAOU_SBKa3IbU-JakPIkiaASckBwPYWR7RpdNuzb-ueyLr-WgJO6qrXTbhQE5QGOq2DxfSqfjIVmFBAEIcBm8MXVbjelYuhRMvd2FUP-P3uR.png",
                        "hZLbtVb5lipVjPm4oJoqZPdRrycehPp2eY6Wct6sAZiABeTPZhXF_JB88CFkavYRTn8KgrUxw01nJUu-Lvsoniul5P6OSS7VnCV9ghAmfOn_kruNZal.png",
                        "lUNCMxlhX2KPsjoKejmgIg0E-u8VJA6D04vHZWMQH0TBxZhzyS-ftGtUSw7vpDKcN9Y7XmgIJPh1KWGlpw_USZZOZEeqSvZEcWOYzCkKLkbRootKtK5.png",
                        "mDHBPdzUJa4sVULySsBFD07fT5B3WMOENDPvd3UZSbOMXCVvMuOCVocFFLibkVVzJHDQpwEgUqcsae-ygzYum-bvJMLzND_rrkvZSrjC-W2eZijHLdU.png",
                        "paste-6d2a721acbf338ba38f842428b082bf3fd7f9023.jpg",
                        "vEBBBrsInivN85ZPrwJ7krpLPuGPBN_9m1ZcUFUS8QPS5bIg65ig35R6kl9IyWZ_ICa4ZeKGqfu16fDJKe3z7i-0MVsDSfQOOm6p-JUJoGL11_ifVzV.png",
                        "ylCnoBAF1_F7_nGY1TdvWQ9SDv6_mbEptmO5qvSSirBHTkecUj2kX1UzWC_ANklH0K2Zs5PyRiUxMHXgbrBSuI5z824jbFAnP48O0lWuIdCbsl9JdTz.png"
                    ],
                    "name": "built-in functions",
                    "notes": [
                        {
                            "__type__": "Note",
                            "fields": [
                                "The {{c1::print()}} function is used to output information to the console.",
                                "<img src=\"mDHBPdzUJa4sVULySsBFD07fT5B3WMOENDPvd3UZSbOMXCVvMuOCVocFFLibkVVzJHDQpwEgUqcsae-ygzYum-bvJMLzND_rrkvZSrjC-W2eZijHLdU.png\">",
                                ""
                            ],
                            "guid": "zK5TWR,D*x",
                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": [
                                "codecademy",
                                "python"
                            ]
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "What does the print function do?",
                                "output information to the console",
                                "<img src=\"mDHBPdzUJa4sVULySsBFD07fT5B3WMOENDPvd3UZSbOMXCVvMuOCVocFFLibkVVzJHDQpwEgUqcsae-ygzYum-bvJMLzND_rrkvZSrjC-W2eZijHLdU.png\">",
                                ""
                            ],
                            "guid": "bmsPa)DAq%",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": [
                                "codecademy",
                                "python"
                            ]
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "the {{c1::str()}} function converts the specified value into a string",
                                "ten = str(10)&nbsp;<br># so ten equals the string '10'",
                                ""
                            ],
                            "guid": "py5+dO1V_&",
                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": [
                                "codecademy",
                                "python"
                            ]
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "using the range() function, create a range object that has a sequence of [0, 1, 2, 3, 4]",
                                "range(5)",
                                "`range(0, 5)` also works, but is less concise.",
                                ""
                            ],
                            "guid": "nF!8SU?b48",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "<img src=\"hZLbtVb5lipVjPm4oJoqZPdRrycehPp2eY6Wct6sAZiABeTPZhXF_JB88CFkavYRTn8KgrUxw01nJUu-Lvsoniul5P6OSS7VnCV9ghAmfOn_kruNZal.png\">",
                                "<img src=\"SXA8x_aNcZiD7NOIS04m0AL8qcGYSaHJBysU7G7ypZBsMcGC15-JMOOfSw-6MsNbDThVEJQefMygzYGIfmUQKM7RmTEmGW-S3Q45ky1khzTKdRKVAk0.png\">",
                                "",
                                ""
                            ],
                            "guid": "G4+&F9T]1j",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "What inputs does range() take?",
                                "range(start, stop, step)<br><br>`start` and `stop` are optional, so here are the possible inputs:<br>range(stop)<br>range(start, stop)<br>range(start, stop, step)",
                                "<img src=\"paste-6d2a721acbf338ba38f842428b082bf3fd7f9023.jpg\"><br><a href=\"https://www.w3schools.com/python/ref_func_range.asp\">https://www.w3schools.com/python/ref_func_range.asp</a>",
                                ""
                            ],
                            "guid": "sYm)4n1I>G",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "<img src=\"gW1axJRiAOU_SBKa3IbU-JakPIkiaASckBwPYWR7RpdNuzb-ueyLr-WgJO6qrXTbhQE5QGOq2DxfSqfjIVmFBAEIcBm8MXVbjelYuhRMvd2FUP-P3uR.png\">",
                                "<img src=\"ylCnoBAF1_F7_nGY1TdvWQ9SDv6_mbEptmO5qvSSirBHTkecUj2kX1UzWC_ANklH0K2Zs5PyRiUxMHXgbrBSuI5z824jbFAnP48O0lWuIdCbsl9JdTz.png\">",
                                "",
                                ""
                            ],
                            "guid": "jh1;BOPdux",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "using the range() function, create the range object `[3, 2, 1, 0]`",
                                "range(3, -1, -1)",
                                "inputs:<br>range(start, stop, step)<br><br>So we `start` at the number 3, and then we go backwards because our `step` is -1, and we stop before we reach `stop` which is -1.<br><br>print(list(range(3,-1,-1))) # [3, 2, 1, 0]",
                                ""
                            ],
                            "guid": "FbVr@*Vv8l",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "The {{c1::int()}} function converts the specified value into an integer",
                                "",
                                ""
                            ],
                            "guid": "E&/^R(6lO3",
                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "The {{c1::list()}} function converts an object into a list.",
                                "",
                                ""
                            ],
                            "guid": "ff~K/$FCM<",
                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "Syntax to get the length of a list?",
                                "len(my_list)",
                                "<img src=\"lUNCMxlhX2KPsjoKejmgIg0E-u8VJA6D04vHZWMQH0TBxZhzyS-ftGtUSw7vpDKcN9Y7XmgIJPh1KWGlpw_USZZOZEeqSvZEcWOYzCkKLkbRootKtK5.png\">",
                                ""
                            ],
                            "guid": "K:D#X]m`xL",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "print(len([1,2,3]))",
                                "3",
                                "",
                                ""
                            ],
                            "guid": "dnuRHTjru_",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "The {{c1::sorted()}} function accepts a list as an argument, and will return a new, sorted list containing the same elements as the original",
                                "<img src=\"vEBBBrsInivN85ZPrwJ7krpLPuGPBN_9m1ZcUFUS8QPS5bIg65ig35R6kl9IyWZ_ICa4ZeKGqfu16fDJKe3z7i-0MVsDSfQOOm6p-JUJoGL11_ifVzV.png\">",
                                ""
                            ],
                            "guid": "On%j,dnN?Y",
                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        }
                    ]
                },
                {
                    "__type__": "Deck",
                    "children": [
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "42fabbd8-004a-11ec-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "output",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "if True:\n<br>&nbsp; &nbsp; print(\"A\")\n<br>if&nbsp;False:&nbsp;<br>&nbsp; &nbsp; print(\"B\")\n<br>print(\"C\")",
                                        "A<br>C",
                                        "`C` gets printed no matter what because it is not indented inside any `if` statement. only `A` and `B` are printed conditionally based on what the boolean expression the `if` statement evaluates to.",
                                        ""
                                    ],
                                    "guid": "zM;CXX;X2:",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "if True:\n<br>&nbsp; &nbsp; print(\"A\")\n<br>else:\n<br>&nbsp; &nbsp; print(\"B\")",
                                        "A",
                                        "",
                                        ""
                                    ],
                                    "guid": "tv-vxL0x|x",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "if&nbsp;False:&nbsp;<br>&nbsp; &nbsp; print(\"A\")&nbsp;<br>else:&nbsp;<br>&nbsp; &nbsp; print(\"B\")",
                                        "B",
                                        "",
                                        ""
                                    ],
                                    "guid": "Lh72c1;U#8",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "if False:\n<br>&nbsp; &nbsp; print(\"A\")\n<br>elif True:\n<br>&nbsp; &nbsp;&nbsp;print(\"B\")",
                                        "B",
                                        "",
                                        ""
                                    ],
                                    "guid": "z=[gl*.(n|",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "if False:&nbsp;<br>&nbsp; &nbsp; print(\"A\")&nbsp;<br>elif True:&nbsp;<br>&nbsp; &nbsp;&nbsp;print(\"B\")<br>else:<br>&nbsp; &nbsp; print(\"C\")",
                                        "B",
                                        "The blocks of code within if, elif, and else statements are mutually exclusive.",
                                        ""
                                    ],
                                    "guid": "ETL{V!(@Ao",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "if False:&nbsp;<br>&nbsp; &nbsp; print(\"A\")&nbsp;<br>elif False:&nbsp;<br>&nbsp; &nbsp;&nbsp;print(\"B\")<br>else:<br>&nbsp; &nbsp; print(\"C\")",
                                        "C",
                                        "",
                                        ""
                                    ],
                                    "guid": "wq%n*<-Xj[",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "listA = [1, 2, 3]\n<br>listA + [4, 5, 6]\n<br>print(listA)",
                                        "[1, 2, 3]",
                                        "`listA + [4, 5, 6]` does not modify listA, instead it returns a new list that contains the elements of the lists being added together, demonstration:<br><br>```<br>listA = [1, 2, 3]\n<br>listB = listA + [4, 5, 6]\n<br>print(listA)\n<br>print(listB)<br>```<br><br>ouput:<br>```<br>[1, 2, 3]\n<br>[1, 2, 3, 4, 5, 6]<br>```",
                                        ""
                                    ],
                                    "guid": "d/{7vKf}qZ",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "46c03276-ffe0-11eb-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "467AGnY6M1UO9FOAweD6y4ykuFWyO9RvCMUnMC6XkFiSGPODYyhOT48Ha9BFK7nl69Pt-7KIwtQvPBDWbOhEN2XMC-hxPDuj82vOKH_tOipNo1v4dKU.png",
                                "LBFykoHXOySsUyfqcrE3xBB7fAohbBFYv8hNLpDSsXRvB_esvdexiJ36Rz-7fBjnlo-ikb6RcadrFoG5iMmk2JZTwbqWZP6cjYIMF62qmS2XpyCRgnK.png",
                                "mclIg-zOYABsHq7n1lmDQKB4SS5epQBx8bqX6st7eCw8ARCnbio_Rr54b6o1ClZWMKP6z7v_qE4vtYo-jtNFu47pOUUArSDDLZ4Q7shkw4kHjLw-HF1.png"
                            ],
                            "name": "syntax",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "The Python {{c1::if}} statement determines the execution of code based on the evaluation of a Boolean expression.",
                                        "<img src=\"LBFykoHXOySsUyfqcrE3xBB7fAohbBFYv8hNLpDSsXRvB_esvdexiJ36Rz-7fBjnlo-ikb6RcadrFoG5iMmk2JZTwbqWZP6cjYIMF62qmS2XpyCRgnK.png\">",
                                        ""
                                    ],
                                    "guid": "f]NFP)^!+;",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "How to code an if statement?",
                                        "if boolean_expression:<br>&nbsp; &nbsp; print()",
                                        "The colon : comes after the boolean expression, and the code to be executed based on that boolean expression should be indented after the if statement.<br><br>if [boolean]:<br>&nbsp; &nbsp; [code block]",
                                        ""
                                    ],
                                    "guid": "O,]wAVhX`e",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "The {{c1::else}} statement provides alternate code to execute if the expression in an `if` statement evaluates to `False`.",
                                        "<img src=\"467AGnY6M1UO9FOAweD6y4ykuFWyO9RvCMUnMC6XkFiSGPODYyhOT48Ha9BFK7nl69Pt-7KIwtQvPBDWbOhEN2XMC-hxPDuj82vOKH_tOipNo1v4dKU.png\">",
                                        ""
                                    ],
                                    "guid": "h11%p)+?H8",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "add an else statement to the following code:<br><br>if False:<br>&nbsp; &nbsp; print(\"This won't print\")",
                                        "if False:<br>&nbsp; &nbsp; print(\"This won't print\")<br><b>else:</b><br>&nbsp; &nbsp; # whatever indented code goes here will execute",
                                        "",
                                        ""
                                    ],
                                    "guid": "nJ:2C#G;?X",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "The Python {{c1::elif}} statement allows for continued checks to be performed after an initial `if` statement.",
                                        "<img src=\"mclIg-zOYABsHq7n1lmDQKB4SS5epQBx8bqX6st7eCw8ARCnbio_Rr54b6o1ClZWMKP6z7v_qE4vtYo-jtNFu47pOUUArSDDLZ4Q7shkw4kHjLw-HF1.png\">",
                                        ""
                                    ],
                                    "guid": "i<ssCy3.f2",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        }
                    ],
                    "crowdanki_uuid": "46bea992-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [],
                    "name": "conditionals",
                    "notes": []
                },
                {
                    "__type__": "Deck",
                    "children": [
                        {
                            "__type__": "Deck",
                            "children": [
                                {
                                    "__type__": "Deck",
                                    "children": [
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89ddd22-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [],
                                            "name": "output",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "print( [1,2,3][0] )",
                                                        "1",
                                                        "it prints the first element",
                                                        ""
                                                    ],
                                                    "guid": "gxlGJqqeU^",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "print( [1,2,3][-1] )",
                                                        "3",
                                                        "it prints the last element",
                                                        ""
                                                    ],
                                                    "guid": "vj6Z=E.aQV",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89e0c02-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "ql9Pa0ytTql7OCPaQ_nIvKWE0rqgZ1P9ButD0vSAXTvCYalYtwx2prT2_HilJkhR1RG6jLKPhof96kJdo6mtCPFO4iyxVCp5lTI2r107yMypLShMMG3.png",
                                                "xBgO4NYTeXFEXaRpVsGeNMW5L4kbV9P6KAlj3zArKJ44YYeFYxS0QU3D6vc9UntKGzACsXA3NAMfC9QMlOSZvyrvlNnWyZPx504SJWqws6Rh6xjkAeG.png",
                                                "yWk-VEbo6mk_bfP2vKVoKVTdX7TqJJ61-Y8muXWFsAWDEtrIxF0qV6qZZIIDmo37FqJDt31vXtNdWzpYYQXkPzJKHC786ugEENom_jBe_3hSAHyU5Lp.png"
                                            ],
                                            "name": "syntax",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "Syntax to access a list element by index?",
                                                        "list[index]",
                                                        "<img src=\"xBgO4NYTeXFEXaRpVsGeNMW5L4kbV9P6KAlj3zArKJ44YYeFYxS0QU3D6vc9UntKGzACsXA3NAMfC9QMlOSZvyrvlNnWyZPx504SJWqws6Rh6xjkAeG.png\"><br><img src=\"yWk-VEbo6mk_bfP2vKVoKVTdX7TqJJ61-Y8muXWFsAWDEtrIxF0qV6qZZIIDmo37FqJDt31vXtNdWzpYYQXkPzJKHC786ugEENom_jBe_3hSAHyU5Lp.png\">",
                                                        ""
                                                    ],
                                                    "guid": "sGO&)hIu!G",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "Syntax to access the last element of a list?",
                                                        "list[-1]",
                                                        "",
                                                        ""
                                                    ],
                                                    "guid": "IpV&7[8(}z",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "Syntax to access the first element of a list?",
                                                        "list[0]",
                                                        "Demonstration:<br><br>```<br>my_list = [1, 2, 3]<br>one = my_list[0]<br>print(one)<br>```<br>output:<br>```<br>1<br>```",
                                                        ""
                                                    ],
                                                    "guid": "LijdgoB|an",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# Syntax to access the number 6 from the matrix below?<br><br>matrix = [[1,2,3], [4,5,6], [7,8,9]]",
                                                        "matrix[1][2]&nbsp;",
                                                        "<img src=\"ql9Pa0ytTql7OCPaQ_nIvKWE0rqgZ1P9ButD0vSAXTvCYalYtwx2prT2_HilJkhR1RG6jLKPhof96kJdo6mtCPFO4iyxVCp5lTI2r107yMypLShMMG3.png\">",
                                                        ""
                                                    ],
                                                    "guid": "D]12I3t}`p",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# Mutate the matrix below to equal [[\"A\": 0], [\"B\": 1]]<br><br>matrix = [[\"A\": 0], [\"B\": 999]]",
                                                        "matrix[1][1] = 1",
                                                        "",
                                                        ""
                                                    ],
                                                    "guid": "iP@/fIMAyl",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        }
                                    ],
                                    "crowdanki_uuid": "c89dc738-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "indexing",
                                    "notes": []
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89e5572-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "JZ7uRjA7vGoire5Qs1sIn9NGqQsMy6m_Y1ip5r0IKgHSUUeIBoI_9mrmGlWnr2J1_kWSHPS8ebNjspn4Ew9TLtH5gBdtqF4ynM2DDG8Ks1gX9pYJrca.png"
                                            ],
                                            "name": "append",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "Syntax to add values to the end of a list in Python? (You should mutate the original list)",
                                                        "my_list.append(\"like this\")",
                                                        "<img src=\"JZ7uRjA7vGoire5Qs1sIn9NGqQsMy6m_Y1ip5r0IKgHSUUeIBoI_9mrmGlWnr2J1_kWSHPS8ebNjspn4Ew9TLtH5gBdtqF4ynM2DDG8Ks1gX9pYJrca.png\">",
                                                        ""
                                                    ],
                                                    "guid": "tV+p6D!<HY",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "x = [0, 1, 2]\n<br>x.append(3)\n<br>print(x)",
                                                        "[0, 1, 2, 3]&nbsp;",
                                                        "append  method adds a single element to the end of the list",
                                                        ""
                                                    ],
                                                    "guid": "cf9_-WjGV/",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "x = [0, 1, 2]\n<br>x.append([3, 4])\n<br>print(x)\n<br>print(x[3])",
                                                        "[0, 1, 2, [3, 4]]\n<br>[3, 4]",
                                                        "append method always adds a single element to a list",
                                                        ""
                                                    ],
                                                    "guid": "lv*[x`-le~",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89e7778-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "60qMNdJcgTgbYHDGPXjrI7F5ADiONOpbfjcudTUKzlLTAW6v9e9B81XvMUGTMWYQW73u5Xp_AIgtib1laefBrj-hxgmMx-jzqjBTU78kwTGaIMLjX90.png",
                                                "E3yeKREgHmvSnq6AX9KtWAtq8JCvDdeTZFGLeIYduDMdSYK7zDFKo1K4xH8LNpDtOEczLRcnzbH5UOC-WZ-z7nhWNb1dRcebpzioY-9gZ03445vqjpS.png",
                                                "N3YSj8c30TvvKdpiLdRddsQakFtNLDVxdgsFNCbeYtKrMjpxFSaPWVUeScE0fqay242oZJrhHjKWqD1ilKXt-oxnDN0YIhYvDfCiXV7A4byFSn1OdKO.png"
                                            ],
                                            "name": "count",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "The {{c1::.count()}}  list method searches a list for whatever search term it receives as an argument, then returns the number of matching entries found.",
                                                        "<img src=\"60qMNdJcgTgbYHDGPXjrI7F5ADiONOpbfjcudTUKzlLTAW6v9e9B81XvMUGTMWYQW73u5Xp_AIgtib1laefBrj-hxgmMx-jzqjBTU78kwTGaIMLjX90.png\">",
                                                        ""
                                                    ],
                                                    "guid": "~3xHm7gq`",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<img src=\"E3yeKREgHmvSnq6AX9KtWAtq8JCvDdeTZFGLeIYduDMdSYK7zDFKo1K4xH8LNpDtOEczLRcnzbH5UOC-WZ-z7nhWNb1dRcebpzioY-9gZ03445vqjpS.png\">",
                                                        "<img src=\"N3YSj8c30TvvKdpiLdRddsQakFtNLDVxdgsFNCbeYtKrMjpxFSaPWVUeScE0fqay242oZJrhHjKWqD1ilKXt-oxnDN0YIhYvDfCiXV7A4byFSn1OdKO.png\">",
                                                        "",
                                                        ""
                                                    ],
                                                    "guid": "O@+r~J0hVx",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89e9726-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "eWS3udz6wLMyg9Vzs6_cYLc7YunorlkzW16UTpVkDK0mR7EciP6aTQ893_sTmD0WwmqHWhVUlcxqDOW2BCPpDr6Zl23p-y7G7UUZMs_h06E84uOWPy1.png"
                                            ],
                                            "name": "insert",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "The {{c1::.insert()}} list method allows us to add an element to a specific index in a list.",
                                                        "",
                                                        ""
                                                    ],
                                                    "guid": "i~#Se{(+7$",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "What inputs does the .insert() method take?",
                                                        "(index, element)",
                                                        "list.insert(0, \"example\")<br><img src=\"eWS3udz6wLMyg9Vzs6_cYLc7YunorlkzW16UTpVkDK0mR7EciP6aTQ893_sTmD0WwmqHWhVUlcxqDOW2BCPpDr6Zl23p-y7G7UUZMs_h06E84uOWPy1.png\">",
                                                        ""
                                                    ],
                                                    "guid": "dBv9x@^=;v",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# using a list method, change `mylist` to be [1,2,3,4]&nbsp;<br><br>mylist = [1, 2, 4]",
                                                        "mylist.insert(2, 3)",
                                                        "So now the number 3 is in the 2nd index of the list.<br><br>Before we inserted into the array, the number 4 was in the 2nd index of the list instead.",
                                                        ""
                                                    ],
                                                    "guid": "n|mevu^BSq",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89eb652-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "LkycJOcxGBEn_bKfxkkRFk_tYM3sJUmDEGbBK9-oGbmh1yna16L2JgXoMtr1A0PhAr2WDYRqhQlwtug9o8Amxg1QWu0UgZgb3XboUhZUAqErNUe26Iz.png",
                                                "UIYQgHTQB89IRDhHCjv00RRX_NyVgfcvVD2Cz9FwUKaC0B-8640BPeb0rKnmyczUVfqXr_EkOKZFy1DTeCA8Rl7U5kz2S5yPIv12xU8aQzR2HsMQDTz.png",
                                                "gLf_07W4Tudr4ng4kLIA40TRHNlvmpFXfyppFQk7Kz4ut-oWSnEp1EOGR4_m-Lt6gCpcxsbPkKCadOvClXyzuBJPodBhTPffXtBf4doO9vzK-976mC5.png"
                                            ],
                                            "name": "pop",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "The {{c1::.pop()}} list method allows us to remove an element from a list while also returning it. It accepts one optional input which is the index of the element to remove. If no index is provided, then the last element in the list will be removed and returned.",
                                                        "<img src=\"UIYQgHTQB89IRDhHCjv00RRX_NyVgfcvVD2Cz9FwUKaC0B-8640BPeb0rKnmyczUVfqXr_EkOKZFy1DTeCA8Rl7U5kz2S5yPIv12xU8aQzR2HsMQDTz.png\">",
                                                        ""
                                                    ],
                                                    "guid": "Oym.kaD0j<",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<span style=\"color: rgb(35, 39, 53);\">x = [0, 1, 2, 3]\n<br>y = x.pop()\n<br>print(x)\n<br>print(y)</span>",
                                                        "[0, 1, 2]\n<br>3",
                                                        "pop  method removes a single element from list and returns it. By default, pop removes and returns the last element.",
                                                        ""
                                                    ],
                                                    "guid": "Q<1{_$?~cd",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<img src=\"LkycJOcxGBEn_bKfxkkRFk_tYM3sJUmDEGbBK9-oGbmh1yna16L2JgXoMtr1A0PhAr2WDYRqhQlwtug9o8Amxg1QWu0UgZgb3XboUhZUAqErNUe26Iz.png\">",
                                                        "<img src=\"gLf_07W4Tudr4ng4kLIA40TRHNlvmpFXfyppFQk7Kz4ut-oWSnEp1EOGR4_m-Lt6gCpcxsbPkKCadOvClXyzuBJPodBhTPffXtBf4doO9vzK-976mC5.png\">",
                                                        "",
                                                        ""
                                                    ],
                                                    "guid": "DpdLF.N//O",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89ed4e8-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "XNAhF9atQ48AtJuXzQ4eXxB4VumAJQDR3qs4ftu8oc69eBOMfTXV01pW8EDF17YOjT8210foRwhiwAzrqyLSslg5vCBrWwIYs96ncN04Anqc0QmBAxE.png"
                                            ],
                                            "name": "remove",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# Using a list method, delete the number 2 from the list below<br>my_list = [1,2,3]",
                                                        "my_list.remove(2)",
                                                        "<img src=\"XNAhF9atQ48AtJuXzQ4eXxB4VumAJQDR3qs4ftu8oc69eBOMfTXV01pW8EDF17YOjT8210foRwhiwAzrqyLSslg5vCBrWwIYs96ncN04Anqc0QmBAxE.png\">",
                                                        ""
                                                    ],
                                                    "guid": "kr<3kx!&>{",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<span style=\"color: rgb(35, 39, 53);\">my_list = [1,0,1]\n<br>my_list.remove(1)\n<br>print(my_list)</span>",
                                                        "[0, 1]",
                                                        "When using the `.remove()` method In the case where two or more elements in the list have the same value, the first occurrence of the element is removed.",
                                                        ""
                                                    ],
                                                    "guid": "E&<u{P[vz?",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89ef23e-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "fbjxql5ICKSaPgg3gGizuOF5vqBeB-6MdAu6_l175VXT5k3_E6sCnFQMoSztJWejLF7SsSllSubXd7ZA7IZrxZjuVdBmdfWXtpDHZOppIpA8RuYuGjI.png"
                                            ],
                                            "name": "sort",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "The {{c1::.sort()}}  list method will sort the contents of whatever list it is called on.",
                                                        "<img src=\"fbjxql5ICKSaPgg3gGizuOF5vqBeB-6MdAu6_l175VXT5k3_E6sCnFQMoSztJWejLF7SsSllSubXd7ZA7IZrxZjuVdBmdfWXtpDHZOppIpA8RuYuGjI.png\">",
                                                        ""
                                                    ],
                                                    "guid": "k7nuQ@4{YM",
                                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<span style=\"color: rgb(35, 39, 53);\">my_list = [2, 1, 3]\n<br>my_list.sort()\n<br>print(my_list)</span>",
                                                        "[1, 2, 3]",
                                                        "the .sort() method sorts in ascending order by default.",
                                                        ""
                                                    ],
                                                    "guid": "P8K~jM-U7?",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "my_list = [\"b\", \"a\", \"c\"]\n<br>my_list.sort()\n<br>print(my_list)",
                                                        "['a', 'b', 'c']",
                                                        "",
                                                        ""
                                                    ],
                                                    "guid": "s$Ya!M@Z[Z",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# using the .sort() method, change `my_list` to be `[3,2,1,0]`<br><br>my_list = [1,3,0,2]",
                                                        "my_list.sort(reverse=True)",
                                                        "pass in `reverse=True` as an argument to `.sort()` in order to indicate we want to sort the list in descending order instead of the default ascending order",
                                                        ""
                                                    ],
                                                    "guid": "bH6EnC(DLY",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "# using a list method, mutate `mylist` to equal [0,1,2,3]\n<br><br>mylist = [3,0,2,1]",
                                                        "mylist.sort()",
                                                        "",
                                                        ""
                                                    ],
                                                    "guid": "F]vLE81-I5",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        }
                                    ],
                                    "crowdanki_uuid": "c89e3d80-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "methods",
                                    "notes": []
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c89f15e8-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "HfUssMsaz6j3B5_q3k3uGkq5rAvCiIX3ZrpgNB77oScNrG5abCXWECbBCOd9Nbwkz18Odwoj3aArKAfhDU9iNnsocmmatsQKjzkmUsCRXHc1GSHtyTJ.png",
                                        "QYUOkuWZjZnJG7aD35U8WZQv4S9GhZz14ai3K_dLdorXZkGhdQBvdCmSbeKFW193W9LTT6MOxy4UKjloxYeqQPw11GdyJkMiz3ovvPti2csF0gX9cng.png",
                                        "WXr4VFV9UzJtZBpJLctrCFzw9PGhJzfPnLRkkGyj798dpHWcxyvDQ8OS6_2dGd9rcL1_UJucEUkR4dnWytb83pkoc8pOYD-ZW-hYAyaLpOKtmRynRH3.png",
                                        "XdD6nPmxv8QA_TXqPNm_zd56FbR6tIbDSEOXw1Kt-Qc4O9AJvXRy_yU3G_AzsTzwvUy9b2gXvS7w7QDfw8ROspPP_R8Q4-GCEIaxwIZMby4RTJgsbkf.png"
                                    ],
                                    "name": "misc",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "In Python, {{c1::lists}} are ordered collections of items that allow for easy use of a set of data",
                                                "<img src=\"XdD6nPmxv8QA_TXqPNm_zd56FbR6tIbDSEOXw1Kt-Qc4O9AJvXRy_yU3G_AzsTzwvUy9b2gXvS7w7QDfw8ROspPP_R8Q4-GCEIaxwIZMby4RTJgsbkf.png\">",
                                                ""
                                            ],
                                            "guid": "ce088lqSbM",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "What types of datatypes can a list hold?",
                                                "any",
                                                "<img src=\"WXr4VFV9UzJtZBpJLctrCFzw9PGhJzfPnLRkkGyj798dpHWcxyvDQ8OS6_2dGd9rcL1_UJucEUkR4dnWytb83pkoc8pOYD-ZW-hYAyaLpOKtmRynRH3.png\">",
                                                ""
                                            ],
                                            "guid": "EL8}fl%e*r",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "In Python, lists can be added to each other by {{c1::using the plus symbol +}}",
                                                "<img src=\"QYUOkuWZjZnJG7aD35U8WZQv4S9GhZz14ai3K_dLdorXZkGhdQBvdCmSbeKFW193W9LTT6MOxy4UKjloxYeqQPw11GdyJkMiz3ovvPti2csF0gX9cng.png\">",
                                                ""
                                            ],
                                            "guid": "or%(+r<.#e",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "What is the index of the first element in a list in Python?",
                                                "zero",
                                                "<img src=\"HfUssMsaz6j3B5_q3k3uGkq5rAvCiIX3ZrpgNB77oScNrG5abCXWECbBCOd9Nbwkz18Odwoj3aArKAfhDU9iNnsocmmatsQKjzkmUsCRXHc1GSHtyTJ.png\">",
                                                ""
                                            ],
                                            "guid": "dc}m+wr>>^",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "my_list = [0, 1, 2]\n<br>two = 4/2\n<br>print(my_list[two])",
                                                "error",
                                                "TypeError: list indices must be integers or slices, not float<br><br>The `/` operator returns a float datatype, not an integer, and you can only use an integer to access elements of a list.",
                                                ""
                                            ],
                                            "guid": "c3])WT7bY?",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c89f38a2-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "output",
                                    "notes": []
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89f6886-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [],
                                            "name": "output",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "print( [1,2,3][1:2] )",
                                                        "[2]",
                                                        "it prints all elements starting from index 1 all the way up to but not including index 2",
                                                        ""
                                                    ],
                                                    "guid": "IJ8T|P8Q[!",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "print( [1,2,3][:1] )",
                                                        "[1]",
                                                        "it prints all elements starting from the beginning all the way up to but not including index 1",
                                                        ""
                                                    ],
                                                    "guid": "udvl7CW>Ed",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "print( [1,2,3][1:] )",
                                                        "[2,3]",
                                                        "it prints the elements starting from index 1, all the way until the end",
                                                        ""
                                                    ],
                                                    "guid": "m64QlS(2c&",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "print( [1,2,3][:-1] )&nbsp;",
                                                        "[1,2]",
                                                        "it prints all elements starting from the beginning all the way up to but not including the last element",
                                                        ""
                                                    ],
                                                    "guid": "tIP5Rb~yi.",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "print( [1,2,3][:] )",
                                                        "[1,2,3]",
                                                        "so list[:] simply returns a copy of that list.<br>since [START:END] are not specified, the whole list is selected.",
                                                        ""
                                                    ],
                                                    "guid": "B!^zlgFrDK",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        },
                                        {
                                            "__type__": "Deck",
                                            "children": [],
                                            "crowdanki_uuid": "c89f8dfc-0074-11ec-9d19-3e22fb2860fe",
                                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                            "desc": "",
                                            "dyn": 0,
                                            "extendNew": 0,
                                            "extendRev": 0,
                                            "media_files": [
                                                "8-V9LdTutqJsvOrv2RWOavqtujXPwK7r8smge_OggrsdDPYfGBk60wkrQNrR_KpVvuQD74JckEB37PR64CXbHRFsHz_o5HCxeH5t772kAi0IkgaDada.png",
                                                "ONKC3LNk9lkKLYvz_yUVBZ8y-76p8PCNv_A6iCm2BMvaQp-4do0uGe3p03KNwOiOhhlkQG65kaEz66JxM3baKdkXO6wLsiaowM60Zm6rpWahOwiDtjL.png",
                                                "_x1YG7kEfWxtipFb4tq07EHaCB6YV2o2nuBxhNSQhRMKcd8sqAq2Nx_y7H2QPzC5NXRr_Ko87sUBc8XvfSKPnotcZM2i_nodZpnNlGNG4rZLHfNeJe-.png",
                                                "fsVZfABmoRuTyYTi3RG9bqxtVz9w8WtBqHLd1X_CUkMOI4dwA1o2miY9LlMmQvYPxz9iJJ_Ac7STdzs8CYtx4xSkhsVL1CQm3z5A_lRzJouuLGIxQJp.png",
                                                "s2c55s0SI06UtiqAiDXmQYHAsY3-9_B5nu-WfxTjgLsUBHrJzB0Sb1orNgjm1Om_ugIA8sBFqoF0oS6iBmNP2C8Of1RR0N_WPJxaYK0dvIrQIPAGpcl.png"
                                            ],
                                            "name": "syntax",
                                            "notes": [
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "Syntax to slice the first two elements of a list?",
                                                        "list[:2]",
                                                        "",
                                                        ""
                                                    ],
                                                    "guid": "t$MfeT93;O",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "Syntax to slice the all elements of a list except the first two elements?",
                                                        "list[2:]",
                                                        "",
                                                        ""
                                                    ],
                                                    "guid": "QB1Dc/-|yd",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "What is the syntax for slicing a list in Python?",
                                                        "my_list[START_NUMBER:END_NUMBER]",
                                                        "`START_NUMBER` is inclusive, but `END_NUMBER` is exclusive. So slicing returns a list from the `(START_NUMBER)` index, all the way to the `(END_NUMBER - 1)` index.<br><br><img src=\"_x1YG7kEfWxtipFb4tq07EHaCB6YV2o2nuBxhNSQhRMKcd8sqAq2Nx_y7H2QPzC5NXRr_Ko87sUBc8XvfSKPnotcZM2i_nodZpnNlGNG4rZLHfNeJe-.png\">",
                                                        ""
                                                    ],
                                                    "guid": "B-!L4^=Fp<",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<img src=\"fsVZfABmoRuTyYTi3RG9bqxtVz9w8WtBqHLd1X_CUkMOI4dwA1o2miY9LlMmQvYPxz9iJJ_Ac7STdzs8CYtx4xSkhsVL1CQm3z5A_lRzJouuLGIxQJp.png\">",
                                                        "<img src=\"s2c55s0SI06UtiqAiDXmQYHAsY3-9_B5nu-WfxTjgLsUBHrJzB0Sb1orNgjm1Om_ugIA8sBFqoF0oS6iBmNP2C8Of1RR0N_WPJxaYK0dvIrQIPAGpcl.png\">",
                                                        "",
                                                        ""
                                                    ],
                                                    "guid": "A&Kh*luPOR",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                },
                                                {
                                                    "__type__": "Note",
                                                    "fields": [
                                                        "<img src=\"ONKC3LNk9lkKLYvz_yUVBZ8y-76p8PCNv_A6iCm2BMvaQp-4do0uGe3p03KNwOiOhhlkQG65kaEz66JxM3baKdkXO6wLsiaowM60Zm6rpWahOwiDtjL.png\">",
                                                        "<img src=\"8-V9LdTutqJsvOrv2RWOavqtujXPwK7r8smge_OggrsdDPYfGBk60wkrQNrR_KpVvuQD74JckEB37PR64CXbHRFsHz_o5HCxeH5t772kAi0IkgaDada.png\">",
                                                        "",
                                                        ""
                                                    ],
                                                    "guid": "B:2VlVExyf",
                                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                                    "tags": []
                                                }
                                            ]
                                        }
                                    ],
                                    "crowdanki_uuid": "c89f5422-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "slicing",
                                    "notes": []
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c89fafa8-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "syntax",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "Syntax to declare a list that contains numbers in Python?",
                                                "my_list = [1, 2, 3]",
                                                "List values are placed in between brackets separated by commas",
                                                ""
                                            ],
                                            "guid": "r3.wb6k.D@",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "Syntax to declare an empty list?",
                                                "my_list = []",
                                                "Why would we create an empty list?<br><br>Usually, it’s because we’re planning on filling it up later based on some other input.",
                                                ""
                                            ],
                                            "guid": "keT)P<!1[/",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                }
                            ],
                            "crowdanki_uuid": "c89db11c-0074-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "lists",
                            "notes": []
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "c89fc9fc-0074-11ec-9d19-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "tuples",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "Syntax to declare a tuple in Python?",
                                        "example = (1, 2, 3)",
                                        "So like a list, but instead of brackets, we use parentesis. So ( instead of [.",
                                        ""
                                    ],
                                    "guid": "wGb=g/LeGI",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "What's the difference between a Tuple and a List?",
                                        "Tuples are immutable while lists are mutable.&nbsp;",
                                        "Meaning once a tuple is created, the data inside it cannot be mutated.<br><br>For example, if we have a list, we can append and pop elements from the list, and assign new values to certain indexes of that list. We cannot do this with tuples though.",
                                        ""
                                    ],
                                    "guid": "g_f=O54Ckv",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        }
                    ],
                    "crowdanki_uuid": "c89d9b6e-0074-11ec-9d19-3e22fb2860fe",
                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [],
                    "name": "data structures",
                    "notes": []
                },
                {
                    "__type__": "Deck",
                    "children": [],
                    "crowdanki_uuid": "46c05bde-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [
                        "paste-2c5e311facf3a35fe253359b0c4a412314df94e1.jpg",
                        "paste-47b4cdfaa6363c000116d29234289dfd2b7b81d6.jpg"
                    ],
                    "name": "errors",
                    "notes": [
                        {
                            "__type__": "Note",
                            "fields": [
                                "<img src=\"paste-47b4cdfaa6363c000116d29234289dfd2b7b81d6.jpg\">",
                                "<img src=\"paste-2c5e311facf3a35fe253359b0c4a412314df94e1.jpg\">",
                                "",
                                ""
                            ],
                            "guid": "tMK2@e&.Wt",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        }
                    ]
                },
                {
                    "__type__": "Deck",
                    "children": [],
                    "crowdanki_uuid": "46befeba-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [],
                    "name": "execution order",
                    "notes": [
                        {
                            "__type__": "Note",
                            "fields": [
                                "in what order are mathematical operations performed in python?",
                                "the standard mathematical order of operations",
                                "PEMDAS<br><br>parentheses first, then exponents, then all multiplication and division from left to right in the order both operations appear, then all addition and subtraction from left to right in the order both operations appear.",
                                ""
                            ],
                            "guid": "CUqK#6d)%P",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": [
                                "codecademy",
                                "python"
                            ]
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "in what order is Python code executed?",
                                "from top to bottom",
                                "",
                                ""
                            ],
                            "guid": "Ik[uS{Cgz^",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        }
                    ]
                },
                {
                    "__type__": "Deck",
                    "children": [
                        {
                            "__type__": "Deck",
                            "children": [
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c8a03ef0-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "output",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(3 % 7)",
                                                "3",
                                                "`7` goes into `3` zero times. So the remainder is 3.",
                                                ""
                                            ],
                                            "guid": "Qe-)[?knZ[",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(7 % 3)",
                                                "1",
                                                "",
                                                ""
                                            ],
                                            "guid": "Euo)=x`3!$",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(3 % 3)",
                                                "0",
                                                "",
                                                ""
                                            ],
                                            "guid": "Nu{l^Jqyi9",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(3**2)",
                                                "9",
                                                "",
                                                ""
                                            ],
                                            "guid": "o|gdaXt3Q^",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "number = 4/2<br>print(number)",
                                                "2.0",
                                                "division in python always returns a floating point number, not an integer.",
                                                ""
                                            ],
                                            "guid": "N7>So}e$<E",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c8a0607e-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "H4fLHpN6Lsxe4KLwx672ZgHpjBrM3U0oGvr5NJ1WFUtH3h7OyEUNrt2loIEwYj8kBsrlICVvMXjdzOeTmvFPEggNaest6cjhMncLy_Q3soZHqfqcRQx.png"
                                    ],
                                    "name": "syntax",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::+}} operator is used for addition",
                                                "",
                                                ""
                                            ],
                                            "guid": "z%hdtTfark",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::-}} operator is used for subtraction",
                                                "",
                                                ""
                                            ],
                                            "guid": "n$yCPng^XO",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::*}} operator is used for multiplication",
                                                "",
                                                ""
                                            ],
                                            "guid": "r(v&]d;d#*",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::/}} operator is used for division",
                                                "",
                                                ""
                                            ],
                                            "guid": "Nd-sA?;nOJ",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::%}} operator is used for modulo operations.",
                                                "<img src=\"H4fLHpN6Lsxe4KLwx672ZgHpjBrM3U0oGvr5NJ1WFUtH3h7OyEUNrt2loIEwYj8kBsrlICVvMXjdzOeTmvFPEggNaest6cjhMncLy_Q3soZHqfqcRQx.png\">",
                                                ""
                                            ],
                                            "guid": "mT`69_yx:p",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::**}} operator is used for exponentiation",
                                                "",
                                                ""
                                            ],
                                            "guid": "xX-v&+-d7[",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": [
                                                "codecademy",
                                                "python"
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "crowdanki_uuid": "46bf43c0-ffe0-11eb-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "arithmetic",
                            "notes": []
                        },
                        {
                            "__type__": "Deck",
                            "children": [
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c8a09a08-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "output",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(not True)",
                                                "False",
                                                "",
                                                ""
                                            ],
                                            "guid": "B5;s~!&B>Q",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(not False)",
                                                "True",
                                                "",
                                                ""
                                            ],
                                            "guid": "eb>^DSw`sf",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(not 1 &gt; 2)",
                                                "True",
                                                "",
                                                ""
                                            ],
                                            "guid": "pXi@>7mu*-",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(True and True)",
                                                "True",
                                                "",
                                                ""
                                            ],
                                            "guid": "iI3NSBQ1rh",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(True and False)",
                                                "False",
                                                "",
                                                ""
                                            ],
                                            "guid": "MDuF_j^gFj",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(False and False)",
                                                "False",
                                                "",
                                                ""
                                            ],
                                            "guid": "Dpe?esx58%",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(1 == 1 and 1 &lt; 2)",
                                                "True",
                                                "",
                                                ""
                                            ],
                                            "guid": "N@A}=*z0.q",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(1 &lt; 2 and 2 &lt; 1)",
                                                "False",
                                                "",
                                                ""
                                            ],
                                            "guid": "j>hVn#hz.L",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(True or True)",
                                                "True",
                                                "",
                                                ""
                                            ],
                                            "guid": "Pe|*2x{nd`",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(True or False)",
                                                "True",
                                                "",
                                                ""
                                            ],
                                            "guid": "K8gkP5TB%R",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(False or False)",
                                                "False",
                                                "",
                                                ""
                                            ],
                                            "guid": "fCq2zQVaZz",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c8a0c8a2-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "rUk-lQMQQCAZLB_WITNP629JQiCcMWM1nMwlc83kiprfwGhsE1WfK4TuQiCiYxyiPapnCmtTP3o1Jcj0dRkoq55isbfGVx8U1s1yvv2ZE6jslxfZlqH.png",
                                        "wqKvy_I1gp9-XUGEmeidj1ek8YqZs2ib-rNhcdqY736knNzCsmAgsauWzdECLSVYtsWHdOLDtW_uP4rL2hFSGixUL5xtQj6GTEqvHHOjjHywwL7cMpe.png",
                                        "zBkC9zVjCf3o_ji8HwvU9-ekv00ksmPfPEpo8VvIXdoEOFKQ2WssZuAR0Cm7a_JhEydr-15MkRDN-Tr7kxvtoMP1kRzyP0CoaQspQ3r4yBdD4r2yug7.png"
                                    ],
                                    "name": "syntax",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::not}} operator is used in a Boolean expression in order to evaluate the expression to its inverse value.",
                                                "<img src=\"zBkC9zVjCf3o_ji8HwvU9-ekv00ksmPfPEpo8VvIXdoEOFKQ2WssZuAR0Cm7a_JhEydr-15MkRDN-Tr7kxvtoMP1kRzyP0CoaQspQ3r4yBdD4r2yug7.png\">",
                                                ""
                                            ],
                                            "guid": "c;`]4(R6q7",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The Python {{c1::and}} operator performs a Boolean comparison between two Boolean values, variables, or expressions. If both sides of the operator evaluate to True then it returns True.",
                                                "<img src=\"wqKvy_I1gp9-XUGEmeidj1ek8YqZs2ib-rNhcdqY736knNzCsmAgsauWzdECLSVYtsWHdOLDtW_uP4rL2hFSGixUL5xtQj6GTEqvHHOjjHywwL7cMpe.png\">",
                                                ""
                                            ],
                                            "guid": "J7WH(K-Ifz",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The Python {{c1::or}} operator combines two Boolean expressions and evaluates to True if at least one of the expressions returns True.",
                                                "<img src=\"rUk-lQMQQCAZLB_WITNP629JQiCcMWM1nMwlc83kiprfwGhsE1WfK4TuQiCiYxyiPapnCmtTP3o1Jcj0dRkoq55isbfGVx8U1s1yvv2ZE6jslxfZlqH.png\">",
                                                ""
                                            ],
                                            "guid": "uh*x@]-e);",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                }
                            ],
                            "crowdanki_uuid": "46bf7066-ffe0-11eb-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "logical",
                            "notes": []
                        },
                        {
                            "__type__": "Deck",
                            "children": [
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c8a0f804-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [],
                                    "name": "misc",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "If the values being compared using the  ==  operator are the same, the operator returns {{c1::True}}<i></i> , otherwise, it returns {{c1::False}}<i></i>.",
                                                "",
                                                ""
                                            ],
                                            "guid": "t7DhIDxG9f",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c8a10d44-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "paste-d5150a4dc82c9cecc8dfb7dc8c6d84886c9ffe6d.jpg",
                                        "paste-dae22a687362cffc9c7d0e75b13621a6b2979e94.jpg"
                                    ],
                                    "name": "output",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(\"example\" == \"example\")",
                                                "True",
                                                "",
                                                ""
                                            ],
                                            "guid": "E^Ck:DpSIb",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print( (2 &gt; 1) == (1 &lt; 2) )",
                                                "True",
                                                "",
                                                ""
                                            ],
                                            "guid": "n?+R%57:E|",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "<img src=\"paste-dae22a687362cffc9c7d0e75b13621a6b2979e94.jpg\">",
                                                "<img src=\"paste-d5150a4dc82c9cecc8dfb7dc8c6d84886c9ffe6d.jpg\">",
                                                "",
                                                ""
                                            ],
                                            "guid": "fy]J,/!fvU",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(2 == \"2\")",
                                                "False",
                                                "The operator takes the data type into account when making the comparison, so a string value of \"2\" is not considered the same as a numeric value of 2.",
                                                ""
                                            ],
                                            "guid": "hW>+ujg|?c",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(False == False)",
                                                "True",
                                                "",
                                                ""
                                            ],
                                            "guid": "Ot8Q2:#)9Y",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(\"example\" != \"example\")",
                                                "False",
                                                "",
                                                ""
                                            ],
                                            "guid": ">9GPfgviy",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print( (2 &gt; 1) != (1 &lt; 2) )",
                                                "False",
                                                "The code above is the same as `print(True != True)`",
                                                ""
                                            ],
                                            "guid": "vL#=Fu|%^[",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(False != False)",
                                                "False",
                                                "",
                                                ""
                                            ],
                                            "guid": "r31ne>{ex{",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(3 &lt; 3)",
                                                "False",
                                                "",
                                                ""
                                            ],
                                            "guid": "zadsNiOd[9",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "print(3 &gt;= 3)",
                                                "True",
                                                "",
                                                ""
                                            ],
                                            "guid": "w4RTmG9TAj",
                                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                },
                                {
                                    "__type__": "Deck",
                                    "children": [],
                                    "crowdanki_uuid": "c8a13904-0074-11ec-9d19-3e22fb2860fe",
                                    "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                                    "desc": "",
                                    "dyn": 0,
                                    "extendNew": 0,
                                    "extendRev": 0,
                                    "media_files": [
                                        "nPgQ1J8suQD9OT0cTFD2E6MpHo1onsaVD_d1h1jMAW9b2KeqUuY8K0HxsOtlFY_MMyZQ6fLhBTW5nIHqXn3HNhnQCsyPgKygJOY-1P0EKDmmmYgo9CI.png",
                                        "zuqCVIfVJIgRH_J16nouxdJBvsCiA6f4xNSw4lWiJ1qzavcPCLMEP39GgwxQZTKtot_LXN9SyKN7fn_31PHHKiv3FgrEyQGGNu4fJ5foBmczOtngqxi.png"
                                    ],
                                    "name": "syntax",
                                    "notes": [
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::==}} operator is used to compare two values, variables, or expressions and returns True if they are the same.",
                                                "<img src=\"nPgQ1J8suQD9OT0cTFD2E6MpHo1onsaVD_d1h1jMAW9b2KeqUuY8K0HxsOtlFY_MMyZQ6fLhBTW5nIHqXn3HNhnQCsyPgKygJOY-1P0EKDmmmYgo9CI.png\">",
                                                ""
                                            ],
                                            "guid": "kCvKzZHmVc",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "The {{c1::!=}}&nbsp;operator is used to compare two values, variables, or expressions and returns `True` if they are&nbsp;<b>NOT</b>&nbsp;the same, otherwise, it returns `False`.",
                                                "<img src=\"zuqCVIfVJIgRH_J16nouxdJBvsCiA6f4xNSw4lWiJ1qzavcPCLMEP39GgwxQZTKtot_LXN9SyKN7fn_31PHHKiv3FgrEyQGGNu4fJ5foBmczOtngqxi.png\">",
                                                ""
                                            ],
                                            "guid": "N@;yfSG;ir",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "{{c1::&lt;}} is the \"less than\" comparison operator.",
                                                "",
                                                ""
                                            ],
                                            "guid": "x#4e~^T22r",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "{{c1::&lt;=}} is the \"less than or equal to\" comparison operator.",
                                                "",
                                                ""
                                            ],
                                            "guid": "IxDXX8<w&_",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "{{c1::&gt;=}} is the \"greater than or equal to\" comparison operator.",
                                                "",
                                                ""
                                            ],
                                            "guid": "IjW?WuJofb",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        },
                                        {
                                            "__type__": "Note",
                                            "fields": [
                                                "{{c1::&gt;}} is the \"greater than\" comparison operator.",
                                                "",
                                                ""
                                            ],
                                            "guid": "JOL}PkI0:}",
                                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                            "tags": []
                                        }
                                    ]
                                }
                            ],
                            "crowdanki_uuid": "46bfd286-ffe0-11eb-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "relational",
                            "notes": []
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "46c0729a-ffe0-11eb-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [],
                            "name": "syntax",
                            "notes": []
                        }
                    ],
                    "crowdanki_uuid": "46bf26d8-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [],
                    "name": "operators",
                    "notes": []
                },
                {
                    "__type__": "Deck",
                    "children": [
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "42fbb8c6-004a-11ec-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "paste-a2318102197fe84922949801efc722c27b5517a3.jpg"
                            ],
                            "name": "booleans",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "What datatype is `True` and `False`?",
                                        "boolean",
                                        "<img src=\"paste-a2318102197fe84922949801efc722c27b5517a3.jpg\">",
                                        ""
                                    ],
                                    "guid": "Bl7+GqM;nI",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "What values can boolean datatypes be?",
                                        "`True` or `False`",
                                        "",
                                        ""
                                    ],
                                    "guid": "Qk{K6}OXTq",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "42fbcbcc-004a-11ec-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "CUrnvWcjx9lg0pEGi3uaNC3AcePODfkWN1ECXyMK0UHXu24khY97yXfQgGrUY3TODzSfsiRdM7QZ6tPl4D4nxOLmzjeOVEAdseL-sHF7fIfe_dU5lzt.png",
                                "NGqjZ6wa2Lpdvs8dOXF1iMW3_najuUqwfUSM77GWf9KrcyLJm4QM6jooA8acO_BGdQiqlIYmCOPbQxtzCjOE_CsWy9ggdAb3f4y0Ixh1xJBMdvUqnw8.png",
                                "paste-1fa1f4d149dafe7666700bd8fbfba6f822758937.jpg",
                                "paste-d2a10660f5c823f590165c1719d910d7c389f220.jpg"
                            ],
                            "name": "numbers",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "An {{c1::integer}} is a number that can be written without a fractional part (no decimal).",
                                        "<img src=\"NGqjZ6wa2Lpdvs8dOXF1iMW3_najuUqwfUSM77GWf9KrcyLJm4QM6jooA8acO_BGdQiqlIYmCOPbQxtzCjOE_CsWy9ggdAb3f4y0Ixh1xJBMdvUqnw8.png\">",
                                        ""
                                    ],
                                    "guid": "w};^e>&se",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": [
                                        "codecademy",
                                        "python"
                                    ]
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "What is an integer?",
                                        "numbers that have no decimal",
                                        "",
                                        ""
                                    ],
                                    "guid": "QEpP~Z7%YU",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": [
                                        "codecademy",
                                        "python"
                                    ]
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "What is a floating point number?",
                                        "0.07",
                                        "A number with a decimal portion<br><img src=\"CUrnvWcjx9lg0pEGi3uaNC3AcePODfkWN1ECXyMK0UHXu24khY97yXfQgGrUY3TODzSfsiRdM7QZ6tPl4D4nxOLmzjeOVEAdseL-sHF7fIfe_dU5lzt.png\">",
                                        ""
                                    ],
                                    "guid": "Jp#_ppAWJm",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": [
                                        "codecademy",
                                        "python"
                                    ]
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<img src=\"paste-d2a10660f5c823f590165c1719d910d7c389f220.jpg\">",
                                        "<img src=\"paste-1fa1f4d149dafe7666700bd8fbfba6f822758937.jpg\">",
                                        "",
                                        ""
                                    ],
                                    "guid": "MshX*fFvY1",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        },
                        {
                            "__type__": "Deck",
                            "children": [],
                            "crowdanki_uuid": "42fbe38c-004a-11ec-ac0f-3e22fb2860fe",
                            "deck_config_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
                            "desc": "",
                            "dyn": 0,
                            "extendNew": 0,
                            "extendRev": 0,
                            "media_files": [
                                "0QLlyvzKJFecih7xPD72ld8KWc08YEcZTzkBwZXnwLiC9KIJo5RcWoh6yEo-xEN9zT97X46BcI011ECB2wl1RQSJg6B36oRuRcp9cDn1LJoTeacSi-4.png",
                                "FQ5fvhLxCC8QaNwG9e32rKkIE-J_Pgg_abs78_KmHQ3rJaaRQQmPvfGrQ3EXof4DJA5ilyB-XZqTWy5hZXJMOcwNzGCZO8AeRs3J69idDo55C8ICwZJ.png",
                                "hX_zOQveJSkLRou3Fipbnip0GYKk6NadelmM1XtfY0Hb8faWGkv1OCVq9w5LlyuRtVbnkXsVRYxLjLxPsI7xyQglDyeGiCNzY9e2NC7hLH4xsbI1jc9.png",
                                "paste-331c25474d8a9d679564d62b06953596f86e4c9c.jpg",
                                "paste-a344c24bf8a17b0925b927d9bf27ced50a9ec2b1.jpg",
                                "paste-ac8bf830b18795882ab3640bdca489afb46e4850.jpg",
                                "paste-caefc5d2105d44cb7624b977444653e283acdaf4.jpg",
                                "paste-cbb46354ad4f4176cff8fff55c2872a59d803bba.jpg",
                                "paste-d50d1844c26295d78a753b9c6c199f590a8a272e.jpg"
                            ],
                            "name": "strings",
                            "notes": [
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "A {{c1::string}} is a sequence of characters (letters, numbers, whitespace or punctuation) enclosed by quotation marks.",
                                        "<img src=\"0QLlyvzKJFecih7xPD72ld8KWc08YEcZTzkBwZXnwLiC9KIJo5RcWoh6yEo-xEN9zT97X46BcI011ECB2wl1RQSJg6B36oRuRcp9cDn1LJoTeacSi-4.png\">",
                                        ""
                                    ],
                                    "guid": "URG!nmUuU",
                                    "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": [
                                        "codecademy",
                                        "python"
                                    ]
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "What is a string?",
                                        "'this is a string'",
                                        "A sequence of characters enclosed by quotation marks",
                                        ""
                                    ],
                                    "guid": "P*B;b)ou{k",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": [
                                        "codecademy",
                                        "python"
                                    ]
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "How to concatenate strings?",
                                        "using the + operator",
                                        "example:<br>result = \"hello \" + \"world\"<br>print(result) # hello world<br><br><img src=\"FQ5fvhLxCC8QaNwG9e32rKkIE-J_Pgg_abs78_KmHQ3rJaaRQQmPvfGrQ3EXof4DJA5ilyB-XZqTWy5hZXJMOcwNzGCZO8AeRs3J69idDo55C8ICwZJ.png\">",
                                        ""
                                    ],
                                    "guid": "J47SJG4XM#",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "How to declare a multi-line string?",
                                        "'''<br>like<br>this<br>'''",
                                        "<img src=\"hX_zOQveJSkLRou3Fipbnip0GYKk6NadelmM1XtfY0Hb8faWGkv1OCVq9w5LlyuRtVbnkXsVRYxLjLxPsI7xyQglDyeGiCNzY9e2NC7hLH4xsbI1jc9.png\">",
                                        ""
                                    ],
                                    "guid": "c32[j7h^Cp",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<img src=\"paste-331c25474d8a9d679564d62b06953596f86e4c9c.jpg\">",
                                        "<img src=\"paste-a344c24bf8a17b0925b927d9bf27ced50a9ec2b1.jpg\">",
                                        "",
                                        ""
                                    ],
                                    "guid": "iX?ZrhvK2D",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<img src=\"paste-d50d1844c26295d78a753b9c6c199f590a8a272e.jpg\">",
                                        "<img src=\"paste-ac8bf830b18795882ab3640bdca489afb46e4850.jpg\">",
                                        "",
                                        ""
                                    ],
                                    "guid": "A$SZ.NB+D)",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                },
                                {
                                    "__type__": "Note",
                                    "fields": [
                                        "<img src=\"paste-cbb46354ad4f4176cff8fff55c2872a59d803bba.jpg\">",
                                        "<img src=\"paste-caefc5d2105d44cb7624b977444653e283acdaf4.jpg\">",
                                        "",
                                        ""
                                    ],
                                    "guid": "h31rQQzD8$",
                                    "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                                    "tags": []
                                }
                            ]
                        }
                    ],
                    "crowdanki_uuid": "46bed1f6-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [],
                    "name": "primitive datatypes",
                    "notes": []
                },
                {
                    "__type__": "Deck",
                    "children": [],
                    "crowdanki_uuid": "46c0b2aa-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [
                        "Bk5kwnadwRn1Atf3wFoRa0yCxp5japMwz0CIYVMZNscrHpLMUHvp7ZvJn24oh8sgMqdPs7nhY8_LbE5Q1IwpAdLcXCuGz3VHZB1jARrtYQ9stmAmFRD.png",
                        "e2sDqVgd_12rfVKEknSw750a_altjFds0yr6m9mS63OTDM1CSpcjlJ7-eJSvu9mMFZwA4VZEg38pTneZC6bC19zmv4tGobwJ8OxPRLvrMu0RGwxygWe.png"
                    ],
                    "name": "reserved keywords",
                    "notes": [
                        {
                            "__type__": "Note",
                            "fields": [
                                "The {{c1::#}} character is used to make comments",
                                "<img src=\"Bk5kwnadwRn1Atf3wFoRa0yCxp5japMwz0CIYVMZNscrHpLMUHvp7ZvJn24oh8sgMqdPs7nhY8_LbE5Q1IwpAdLcXCuGz3VHZB1jARrtYQ9stmAmFRD.png\">",
                                ""
                            ],
                            "guid": "BOW&8$9R|-",
                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "What is the # character for?",
                                "Making comments",
                                "<img src=\"Bk5kwnadwRn1Atf3wFoRa0yCxp5japMwz0CIYVMZNscrHpLMUHvp7ZvJn24oh8sgMqdPs7nhY8_LbE5Q1IwpAdLcXCuGz3VHZB1jARrtYQ9stmAmFRD.png\">",
                                ""
                            ],
                            "guid": "udSr)3hhm6",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "A {{c1::try}}<i></i> and {{c1::except}}<i></i> block can be used to handle error in code block.",
                                "<img src=\"e2sDqVgd_12rfVKEknSw750a_altjFds0yr6m9mS63OTDM1CSpcjlJ7-eJSvu9mMFZwA4VZEg38pTneZC6bC19zmv4tGobwJ8OxPRLvrMu0RGwxygWe.png\">",
                                ""
                            ],
                            "guid": "d*#/ga-xam",
                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        }
                    ]
                },
                {
                    "__type__": "Deck",
                    "children": [],
                    "crowdanki_uuid": "46c0fc9c-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [
                        "7mcRtj6smLLfiY__C7wBKv8Dtr7HLjCUeWnKY_o0V4XELUnVrJlueCRgKj3fFy0etn_IX_e-YgVqO-_oBDTFJU3dBTy6IPGBqN5PUKGhC7G7t-vEaT3.png",
                        "paste-b488ab7911a3d868d363d5ad3030ad5578f6bf1b.jpg",
                        "paste-fb017733aff396cd32c45f409e4fe3e2517e4c29.jpg"
                    ],
                    "name": "syntactic sugar",
                    "notes": [
                        {
                            "__type__": "Note",
                            "fields": [
                                "Make the following code more concise:<br><br>x = x + 1",
                                "x += 1",
                                "<img src=\"7mcRtj6smLLfiY__C7wBKv8Dtr7HLjCUeWnKY_o0V4XELUnVrJlueCRgKj3fFy0etn_IX_e-YgVqO-_oBDTFJU3dBTy6IPGBqN5PUKGhC7G7t-vEaT3.png\">",
                                ""
                            ],
                            "guid": "u,fV60#f$}",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "<img src=\"paste-b488ab7911a3d868d363d5ad3030ad5578f6bf1b.jpg\">",
                                "<img src=\"paste-fb017733aff396cd32c45f409e4fe3e2517e4c29.jpg\">",
                                "",
                                ""
                            ],
                            "guid": "D<jzQCr$(^",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        }
                    ]
                },
                {
                    "__type__": "Deck",
                    "children": [],
                    "crowdanki_uuid": "46c17348-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [
                        "6PdM1xUXoQzHYchDZvjI44Vu8qXWmjKPBRjNgw1oBqPfeKHfb4pqceJtgbAt9-RiwgrvSXZEP6Lku6dIImYF7FQQz-3H8B31dkQ9Bc5fNGZxPvSCnrG.png"
                    ],
                    "name": "terminology",
                    "notes": [
                        {
                            "__type__": "Note",
                            "fields": [
                                "A {{c1::variable}} is used to store data that will be used by the program.",
                                "<img src=\"6PdM1xUXoQzHYchDZvjI44Vu8qXWmjKPBRjNgw1oBqPfeKHfb4pqceJtgbAt9-RiwgrvSXZEP6Lku6dIImYF7FQQz-3H8B31dkQ9Bc5fNGZxPvSCnrG.png\">",
                                ""
                            ],
                            "guid": "jrEo`NQpHz",
                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "What is a boolean expression?",
                                "A statement that evaluates to either `True` or `False`",
                                "",
                                ""
                            ],
                            "guid": "r#*$p1{B6_",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "In Python, for any specific data-type ( strings, booleans, lists, etc. ) there is built-in functionality that we can use to create, manipulate, and even delete our data. We call this built-in functionality a {{c1::method}}.",
                                "",
                                ""
                            ],
                            "guid": "Qibz)irB|c",
                            "note_model_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        }
                    ]
                },
                {
                    "__type__": "Deck",
                    "children": [],
                    "crowdanki_uuid": "46c130e0-ffe0-11eb-ac0f-3e22fb2860fe",
                    "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
                    "desc": "",
                    "dyn": 0,
                    "extendNew": 0,
                    "extendRev": 0,
                    "media_files": [
                        "paste-1a9355f142d6233c6d7486339b92aca886bfb57d.jpg",
                        "paste-370db977248659ec7f1d03c91f0d59b0e1f9448d.jpg",
                        "paste-49b886ac8f406677b43badfca4c863fe49a2306d.jpg",
                        "paste-f5ae5f0a880cf31abf851b04b388f8ac42e39101.jpg",
                        "qfEBWIei-AnSW237ORXpvCVon_38lgKvplCiBMe2WWbKPoVMcj5I60dmvNpRO8cmO6K5ADErVQy_NZCnIM2dQz834OtEqhKxaBOgoxGgNW86IlsHZXI.png"
                    ],
                    "name": "variables",
                    "notes": [
                        {
                            "__type__": "Note",
                            "fields": [
                                "How to declare a variable?",
                                "example = 'any value we want'",
                                "<img src=\"qfEBWIei-AnSW237ORXpvCVon_38lgKvplCiBMe2WWbKPoVMcj5I60dmvNpRO8cmO6K5ADErVQy_NZCnIM2dQz834OtEqhKxaBOgoxGgNW86IlsHZXI.png\">",
                                ""
                            ],
                            "guid": "MCzFgJIc63",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "<img src=\"paste-49b886ac8f406677b43badfca4c863fe49a2306d.jpg\">",
                                "42",
                                "<img src=\"paste-370db977248659ec7f1d03c91f0d59b0e1f9448d.jpg\"><br>In order to change the variable by multiplying it by 5, you would have had to do something like this:<br><br>`cool_number *= 5`<br>OR<br>`cool_number = cool_number * 5`<br><br>`cool_number * 5` does nothing because we don't save the result of multiplying the variable by 5 to anything.",
                                ""
                            ],
                            "guid": "JDzFs0Ga@`",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        },
                        {
                            "__type__": "Note",
                            "fields": [
                                "<img src=\"paste-1a9355f142d6233c6d7486339b92aca886bfb57d.jpg\">",
                                "<img src=\"paste-f5ae5f0a880cf31abf851b04b388f8ac42e39101.jpg\">",
                                "",
                                ""
                            ],
                            "guid": "nAJNeO80:s",
                            "note_model_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
                            "tags": []
                        }
                    ]
                }
            ],
            "crowdanki_uuid": "46be6e0a-ffe0-11eb-ac0f-3e22fb2860fe",
            "deck_config_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [],
            "name": "Python 3",
            "notes": []
        }
    ],
    "crowdanki_uuid": "9484cde0-ffb4-11eb-9d39-3e22fb2860fe",
    "deck_config_uuid": "28efb9d2-fc9e-11eb-9db2-3e22fb2860fe",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "autoplay": true,
            "crowdanki_uuid": "28efb9d2-fc9e-11eb-9db2-3e22fb2860fe",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 1,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": false,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 1,
                "perDay": 9999
            },
            "newMix": 0,
            "newPerDayMinimum": 0,
            "replayq": true,
            "rev": {
                "bury": false,
                "ease4": 1.3,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "perDay": 9999
            },
            "reviewOrder": 0,
            "timer": 0
        },
        {
            "__type__": "DeckConfig",
            "autoplay": true,
            "crowdanki_uuid": "98a467a4-ffbf-11eb-849c-3e22fb2860fe",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 1,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": false,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 1,
                "perDay": 9999
            },
            "newMix": 0,
            "newPerDayMinimum": 0,
            "replayq": true,
            "rev": {
                "bury": false,
                "ease4": 1.3,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "perDay": 9999
            },
            "reviewOrder": 0,
            "timer": 0
        },
        {
            "__type__": "DeckConfig",
            "autoplay": true,
            "crowdanki_uuid": "6ca6a540-ffbf-11eb-b612-3e22fb2860fe",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 1,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": false,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 1,
                "perDay": 20
            },
            "newMix": 0,
            "newPerDayMinimum": 0,
            "replayq": true,
            "rev": {
                "bury": false,
                "ease4": 1.3,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "perDay": 200
            },
            "reviewOrder": 0,
            "timer": 0
        }
    ],
    "desc": "",
    "dyn": 0,
    "extendNew": 0,
    "extendRev": 0,
    "media_files": [],
    "name": "knowledge",
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "e52a587c-0046-11ec-ac0f-3e22fb2860fe",
            "css": ".card {\n  font-family: arial;\n  font-size: 20px;\n  color: white;\n  background-color: #1e272e;\n}\n\n.cloze {\n font-weight: bold;\n color: #ffdd59;\n}",
            "flds": [
                {
                    "font": "Arial",
                    "name": "Text",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Optional",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Personal",
                    "ord": 2,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Cloze - Dev Accelerator",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [],
            "tmpls": [
                {
                    "afmt": "{{cloze:Text}}<br>\n\n{{#Personal}}\n\t<br><br>\n\t<div style=\"color: #0be881\">\n\t<em>Personal:</em><br><br>\n\t{{Personal}}\n  </div>\n{{/Personal}}\n\n{{#Optional}}\n\t<br><br>\n\t<div style=\"color: #4bcffa\">\n\t<em>Optional:</em><br><br>\n\t{{Optional}}\n  </div>\n{{/Optional}}\n\n<br><br><br><br>\n<span style=\"font-size: 8px\">Alex Ficachi Coaching</span>",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Cloze",
                    "ord": 0,
                    "qfmt": "{{cloze:Text}}"
                }
            ],
            "type": 1
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "e52a5bba-0046-11ec-ac0f-3e22fb2860fe",
            "css": ".card {\n  font-family: arial;\n  font-size: 20px;\n  color: white;\n  background-color: #1e272e\n}\n",
            "flds": [
                {
                    "font": "Arial",
                    "name": "Front",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Back",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Optional",
                    "ord": 2,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Personal",
                    "ord": 3,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Basic - Dev Accelerator",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [],
            "tmpls": [
                {
                    "afmt": "{{FrontSide}}\n\n<hr id=answer>\n<div style=\"color: #ffdd59;\">\n\t{{Back}}\n</div>\n\n{{#Personal}}\n<br><br>\n\t<div style=\"color: #0be881\">\n\t\t<em>Personal:</em><br><br>\n\t\t{{Personal}}\n\t</div>\n{{/Personal}}\n\n{{#Optional}}\n\t<div style=\"color: #4bcffa\">\n\t\t<br><br>\n\t\t<em>Optional:</em><br><br>\n\t\t{{Optional}}\n\t</div>\n{{/Optional}}\n<br><br><br><br>\n<span style=\"font-size: 8px\">Alex Ficachi Coaching</span>",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Card 1",
                    "ord": 0,
                    "qfmt": "{{Front}}"
                }
            ],
            "type": 0
        }
    ],
    "notes": []
}